---
swagger: "2.0"
info:
  description: "This describes the dockstore API, a webservice that manages pairs\
    \ of Docker images and associated metadata such as CWL documents and Dockerfiles\
    \ used to build those images. Explore swagger.json for a Swagger 2.0 description\
    \ of our API and explore openapi.yaml for OpenAPI 3.0 descriptions."
  version: "1.9.0-alpha.1-SNAPSHOT"
  title: "Dockstore API"
  termsOfService: "TBD"
  contact:
    name: "Dockstore@ga4gh"
    url: "https://discuss.dockstore.org/t/opening-helpdesk-tickets/1506"
    email: "theglobalalliance@genomicsandhealth.org"
  license:
    name: "Apache License Version 2.0"
    url: "https://github.com/dockstore/dockstore/blob/develop/LICENSE"
basePath: "/"
tags:
- name: "aliases"
  description: "Create, update list aliases for accessing entries"
- name: "containers"
  description: "List and register entries in the dockstore (pairs of images + metadata\
    \ (CWL and Dockerfile))"
- name: "containertags"
  description: "List and modify tags for containers"
- name: "curation"
  description: "List and modify notifications for users of Dockstore"
- name: "entries"
  description: "Interact with entries in Dockstore regardless of whether they are\
    \ containers or workflows"
- name: "events"
- name: "extendedGA4GH"
  description: "Optional experimental extensions of the GA4GH API"
- name: "GA4GH"
  description: "A curated subset of resources proposed as a common standard for tool\
    \ repositories. Implements TRS [2.0.0-beta.2](https://github.com/ga4gh/tool-registry-service-schemas/releases/tag/2.0.0-beta.2)\
    \ . Integrators are welcome to use these endpoints but they are subject to change\
    \ based on community input."
- name: "GA4GHV1"
  description: "A curated subset of resources proposed as a common standard for tool\
    \ repositories. Implements TRS [1.0.0](https://github.com/ga4gh/tool-registry-service-schemas/releases/tag/1.0.0)\
    \ and is considered final (not subject to change)"
- name: "GA4GHV20"
  description: "A curated subset of resources proposed as a common standard for tool\
    \ repositories. Implements TRS [2.0.0](https://github.com/ga4gh/tool-registry-service-schemas/releases/tag/2.0.0)."
- name: "hosted"
  description: "Created and modify hosted entries in the dockstore"
- name: "metadata"
  description: "Information about Dockstore like RSS, sitemap, lists of dependencies,\
    \ etc."
- name: "NIHdatacommons"
  description: "Needed for SmartAPI compatibility apparantly, might be cargo cult\
    \ behaviour"
- name: "organizations"
  description: "Operations on Dockstore organizations"
- name: "tokens"
  description: "List, modify, refresh, and delete tokens for external services"
- name: "toolTester"
  description: "Interactions with the Dockstore-support's ToolTester application"
- name: "users"
  description: "List, modify, and manage end users of the dockstore"
- name: "workflows"
  description: "List and register workflows in the dockstore (CWL, Nextflow, WDL)"
paths:
  /aliases/workflow-versions/{alias}:
    get:
      tags:
      - "aliases"
      summary: "Retrieves workflow version path information by alias."
      description: "Does not require authentication for published workflows, authentication\
        \ can be provided for restricted workflows"
      operationId: "getWorkflowVersionPathInfoByAlias"
      produces:
      - "application/json"
      parameters:
      - name: "alias"
        in: "path"
        description: "Alias"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/WorkflowVersionPathInfo"
      security:
      - BEARER: []
  /aliases/workflow-versions/{workflowVersionId}:
    post:
      tags:
      - "aliases"
      summary: "Add aliases linked to a workflow version in Dockstore."
      description: "Aliases are alphanumerical (case-insensitive and may contain internal\
        \ hyphens), given in a comma-delimited list."
      operationId: "addAliases"
      produces:
      - "application/json"
      parameters:
      - name: "workflowVersionId"
        in: "path"
        description: "workflow version to modify."
        required: true
        type: "integer"
        format: "int64"
      - name: "aliases"
        in: "query"
        description: "Comma-delimited list of aliases."
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/WorkflowVersion"
      security:
      - BEARER: []
  /api/ga4gh/v1/metadata:
    get:
      tags:
      - "GA4GHV1"
      summary: "Return some metadata that is useful for describing this registry"
      description: "Return some metadata that is useful for describing this registry"
      operationId: "metadataGet"
      produces:
      - "application/json"
      - "text/plain"
      parameters: []
      responses:
        200:
          description: "A Metadata object describing this service."
          schema:
            $ref: "#/definitions/MetadataV1"
  /api/ga4gh/v1/tool-classes:
    get:
      tags:
      - "GA4GHV1"
      summary: "List all tool types"
      description: "This endpoint returns all tool-classes available "
      operationId: "toolClassesGet"
      produces:
      - "application/json"
      - "text/plain"
      parameters: []
      responses:
        200:
          description: "An array of methods that match the filter."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ToolClass"
  /api/ga4gh/v1/tools:
    get:
      tags:
      - "GA4GHV1"
      summary: "List all tools"
      description: "This endpoint returns all tools available or a filtered subset\
        \ using metadata query parameters. "
      operationId: "toolsGet"
      produces:
      - "application/json"
      - "text/plain"
      parameters:
      - name: "id"
        in: "query"
        description: "A unique identifier of the tool, scoped to this registry, for\
          \ example `123456`"
        required: false
        type: "string"
      - name: "registry"
        in: "query"
        description: "The image registry that contains the image."
        required: false
        type: "string"
      - name: "organization"
        in: "query"
        description: "The organization in the registry that published the image."
        required: false
        type: "string"
      - name: "name"
        in: "query"
        description: "The name of the image."
        required: false
        type: "string"
      - name: "toolname"
        in: "query"
        description: "The name of the tool."
        required: false
        type: "string"
      - name: "description"
        in: "query"
        description: "The description of the tool."
        required: false
        type: "string"
      - name: "author"
        in: "query"
        description: "The author of the tool (TODO a thought occurs, are we assuming\
          \ that the author of the CWL and the image are the same?)."
        required: false
        type: "string"
      - name: "offset"
        in: "query"
        description: "Start index of paging. Pagination results can be based on numbers\
          \ or other values chosen by the registry implementor (for example, SHA values).\
          \ If this exceeds the current result set return an empty set.  If not specified\
          \ in the request this will start at the beginning of the results."
        required: false
        type: "string"
      - name: "limit"
        in: "query"
        description: "Amount of records to return in a given page.  By default it\
          \ is 1000."
        required: false
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "An array of Tools that match the filter."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ToolV1"
  /api/ga4gh/v1/tools/{id}:
    get:
      tags:
      - "GA4GHV1"
      summary: "List one specific tool, acts as an anchor for self references"
      description: "This endpoint returns one specific tool (which has ToolVersions\
        \ nested inside it)"
      operationId: "toolsIdGet"
      produces:
      - "application/json"
      - "text/plain"
      parameters:
      - name: "id"
        in: "path"
        description: "A unique identifier of the tool, scoped to this registry, for\
          \ example `123456`"
        required: true
        type: "string"
      responses:
        200:
          description: "A tool."
          schema:
            $ref: "#/definitions/ToolV1"
  /api/ga4gh/v1/tools/{id}/versions:
    get:
      tags:
      - "GA4GHV1"
      summary: "List versions of a tool"
      description: "Returns all versions of the specified tool"
      operationId: "toolsIdVersionsGet"
      produces:
      - "application/json"
      - "text/plain"
      parameters:
      - name: "id"
        in: "path"
        description: "A unique identifier of the tool, scoped to this registry, for\
          \ example `123456`"
        required: true
        type: "string"
      responses:
        200:
          description: "An array of tool versions"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ToolVersionV1"
  /api/ga4gh/v1/tools/{id}/versions/{version_id}:
    get:
      tags:
      - "GA4GHV1"
      summary: "List one specific tool version, acts as an anchor for self references"
      description: "This endpoint returns one specific tool version"
      operationId: "toolsIdVersionsVersionIdGet"
      produces:
      - "application/json"
      - "text/plain"
      parameters:
      - name: "id"
        in: "path"
        description: "A unique identifier of the tool, scoped to this registry, for\
          \ example `123456`"
        required: true
        type: "string"
      - name: "version_id"
        in: "path"
        description: "An identifier of the tool version, scoped to this registry,\
          \ for example `v1`"
        required: true
        type: "string"
      responses:
        200:
          description: "A tool version."
          schema:
            $ref: "#/definitions/ToolVersionV1"
  /api/ga4gh/v1/tools/{id}/versions/{version_id}/dockerfile:
    get:
      tags:
      - "GA4GHV1"
      summary: "Get the dockerfile for the specified image."
      description: "Returns the dockerfile for the specified image."
      operationId: "toolsIdVersionsVersionIdDockerfileGet"
      produces:
      - "application/json"
      - "text/plain"
      parameters:
      - name: "id"
        in: "path"
        description: "A unique identifier of the tool, scoped to this registry, for\
          \ example `123456`"
        required: true
        type: "string"
      - name: "version_id"
        in: "path"
        description: "An identifier of the tool version for this particular tool registry,\
          \ for example `v1`"
        required: true
        type: "string"
      responses:
        200:
          description: "The tool payload."
          schema:
            $ref: "#/definitions/ToolDockerfile"
        404:
          description: "The tool payload is not present in the service."
          schema:
            $ref: "#/definitions/ToolDockerfile"
  /api/ga4gh/v1/tools/{id}/versions/{version_id}/{type}/descriptor:
    get:
      tags:
      - "GA4GHV1"
      summary: "Get the tool descriptor (CWL/WDL) for the specified tool."
      description: "Returns the CWL or WDL descriptor for the specified tool."
      operationId: "toolsIdVersionsVersionIdTypeDescriptorGet"
      produces:
      - "application/json"
      - "text/plain"
      parameters:
      - name: "type"
        in: "path"
        description: "The output type of the descriptor. If not specified it is up\
          \ to the underlying implementation to determine which output type to return.\
          \ Plain types return the bare descriptor while the \"non-plain\" types return\
          \ a descriptor wrapped with metadata"
        required: true
        type: "string"
        enum:
        - "CWL"
        - "WDL"
        - "PLAIN_CWL"
        - "PLAIN_WDL"
      - name: "id"
        in: "path"
        description: "A unique identifier of the tool, scoped to this registry, for\
          \ example `123456`"
        required: true
        type: "string"
      - name: "version_id"
        in: "path"
        description: "An identifier of the tool version for this particular tool registry,\
          \ for example `v1`"
        required: true
        type: "string"
      responses:
        200:
          description: "The tool descriptor."
          schema:
            $ref: "#/definitions/ToolDescriptor"
        404:
          description: "The tool can not be output in the specified type."
          schema:
            $ref: "#/definitions/ToolDescriptor"
  /api/ga4gh/v1/tools/{id}/versions/{version_id}/{type}/descriptor/{relative_path}:
    get:
      tags:
      - "GA4GHV1"
      summary: "Get additional tool descriptor files (CWL/WDL) relative to the main\
        \ file"
      description: "Returns additional CWL or WDL descriptors for the specified tool\
        \ in the same or subdirectories"
      operationId: "toolsIdVersionsVersionIdTypeDescriptorRelativePathGet"
      produces:
      - "application/json"
      - "text/plain"
      parameters:
      - name: "type"
        in: "path"
        description: "The output type of the descriptor. If not specified it is up\
          \ to the underlying implementation to determine which output type to return.\
          \  Plain types return the bare descriptor while the \"non-plain\" types\
          \ return a descriptor wrapped with metadata"
        required: true
        type: "string"
        enum:
        - "CWL"
        - "WDL"
        - "PLAIN_CWL"
        - "PLAIN_WDL"
      - name: "id"
        in: "path"
        description: "A unique identifier of the tool, scoped to this registry, for\
          \ example `123456`"
        required: true
        type: "string"
      - name: "version_id"
        in: "path"
        description: "An identifier of the tool version for this particular tool registry,\
          \ for example `v1`"
        required: true
        type: "string"
      - name: "relative_path"
        in: "path"
        description: "A relative path to the additional file (same directory or subdirectories),\
          \ for example 'foo.cwl' would return a 'foo.cwl' from the same directory\
          \ as the main descriptor"
        required: true
        type: "string"
      responses:
        200:
          description: "The tool descriptor."
          schema:
            $ref: "#/definitions/ToolDescriptor"
        404:
          description: "The tool can not be output in the specified type."
          schema:
            $ref: "#/definitions/ToolDescriptor"
  /api/ga4gh/v1/tools/{id}/versions/{version_id}/{type}/tests:
    get:
      tags:
      - "GA4GHV1"
      summary: "Get an array of test JSONs suitable for use with this descriptor type."
      description: ""
      operationId: "toolsIdVersionsVersionIdTypeTestsGet"
      produces:
      - "application/json"
      - "text/plain"
      parameters:
      - name: "type"
        in: "path"
        description: "The output type of the descriptor. If not specified it is up\
          \ to the underlying implementation to determine which output type to return.\
          \ Plain types return the bare descriptor while the \"non-plain\" types return\
          \ a descriptor wrapped with metadata"
        required: true
        type: "string"
        enum:
        - "CWL"
        - "WDL"
        - "PLAIN_CWL"
        - "PLAIN_WDL"
      - name: "id"
        in: "path"
        description: "A unique identifier of the tool, scoped to this registry, for\
          \ example `123456`"
        required: true
        type: "string"
      - name: "version_id"
        in: "path"
        description: "An identifier of the tool version for this particular tool registry,\
          \ for example `v1`"
        required: true
        type: "string"
      responses:
        200:
          description: "The tool test JSON response."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ToolTestsV1"
        404:
          description: "The tool can not be output in the specified type."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ToolTestsV1"
  /api/ga4gh/v2/extended/containers/{organization}:
    get:
      tags:
      - "extendedGA4GH"
      summary: "List entries of an organization"
      description: "This endpoint returns entries of an organization. "
      operationId: "entriesOrgGet"
      produces:
      - "application/json"
      - "text/plain"
      parameters:
      - name: "organization"
        in: "path"
        description: "An organization, for example `cancercollaboratory`"
        required: true
        type: "string"
      responses:
        200:
          description: "An array of Tools of the input organization."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ToolV1"
  /api/ga4gh/v2/extended/organizations:
    get:
      tags:
      - "extendedGA4GH"
      summary: "List all organizations"
      description: "This endpoint returns list of all organizations. "
      operationId: "entriesOrgsGet"
      produces:
      - "application/json"
      - "text/plain"
      parameters: []
      responses:
        200:
          description: "An array of organizations' names."
          schema:
            type: "array"
            items:
              type: "string"
  /api/ga4gh/v2/extended/tools/entry/_search:
    post:
      tags:
      - "extendedGA4GH"
      summary: "Search the index of tools"
      description: "This endpoint searches the index for all published tools and workflows.\
        \ Used by utilities that expect to talk to an elastic search endpoint"
      operationId: "toolsIndexSearch"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "elastic search query"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "An elastic search result."
          schema:
            type: "string"
  /api/ga4gh/v2/extended/tools/index:
    post:
      tags:
      - "extendedGA4GH"
      summary: "Update the index of tools"
      description: "This endpoint updates the index for all published tools and workflows. "
      operationId: "toolsIndexGet"
      produces:
      - "text/plain"
      parameters: []
      responses:
        200:
          description: "An array of Tools of the input organization."
      security:
      - BEARER: []
  /api/ga4gh/v2/extended/tools/{organization}:
    get:
      tags:
      - "extendedGA4GH"
      summary: "List tools of an organization"
      description: "This endpoint returns tools of an organization. "
      operationId: "toolsOrgGet"
      produces:
      - "application/json"
      - "text/plain"
      parameters:
      - name: "organization"
        in: "path"
        description: "An organization, for example `cancercollaboratory`"
        required: true
        type: "string"
      responses:
        200:
          description: "An array of Tools of the input organization."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ToolV1"
  /api/ga4gh/v2/extended/workflows/{organization}:
    get:
      tags:
      - "extendedGA4GH"
      summary: "List workflows of an organization"
      description: "This endpoint returns workflows of an organization. "
      operationId: "workflowsOrgGet"
      produces:
      - "application/json"
      - "text/plain"
      parameters:
      - name: "organization"
        in: "path"
        description: "An organization, for example `cancercollaboratory`"
        required: true
        type: "string"
      responses:
        200:
          description: "An array of Tools of the input organization."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ToolV1"
  /api/ga4gh/v2/extended/{id}/versions/{version_id}/{type}/tests/{relative_path}:
    post:
      tags:
      - "extendedGA4GH"
      summary: "Annotate test JSON with information on whether it ran successfully\
        \ on particular platforms plus metadata"
      description: "Test JSON can be annotated with whether they ran correctly keyed\
        \ by platform and associated with some metadata "
      operationId: "toolsIdVersionsVersionIdTypeTestsPost"
      produces:
      - "application/json"
      parameters:
      - name: "type"
        in: "path"
        description: "The type of the underlying descriptor. Allowable values include\
          \ \"CWL\", \"WDL\", \"NFL\"."
        required: true
        type: "string"
      - name: "id"
        in: "path"
        description: "A unique identifier of the tool, scoped to this registry, for\
          \ example `123456`"
        required: true
        type: "string"
      - name: "version_id"
        in: "path"
        description: "An identifier of the tool version for this particular tool registry,\
          \ for example `v1`"
        required: true
        type: "string"
      - name: "relative_path"
        in: "path"
        description: "A relative path to the test json as retrieved from the files\
          \ endpoint or the tests endpoint"
        required: true
        type: "string"
        pattern: ".+"
      - name: "platform"
        in: "query"
        description: "Platform to report on"
        required: true
        type: "string"
      - name: "platform_version"
        in: "query"
        description: "Version of the platform to report on"
        required: true
        type: "string"
      - name: "verified"
        in: "query"
        description: "Verification status, omit to delete key"
        required: false
        type: "boolean"
      - name: "metadata"
        in: "query"
        description: "Additional information on the verification (notes, explanation)"
        required: true
        type: "string"
      responses:
        200:
          description: "The tool test JSON response."
          schema:
            type: "object"
            additionalProperties:
              type: "object"
        401:
          description: "Credentials not provided or incorrect"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "The tool test cannot be found to annotate."
          schema:
            $ref: "#/definitions/Error"
      security:
      - BEARER: []
  /api/ga4gh/v2/metadata:
    get:
      tags:
      - "GA4GH"
      summary: "Return some metadata that is useful for describing this registry"
      description: "Return some metadata that is useful for describing this registry"
      operationId: "metadataGet"
      produces:
      - "application/json"
      - "text/plain"
      parameters: []
      responses:
        200:
          description: "A Metadata object describing this service."
          schema:
            $ref: "#/definitions/Metadata"
  /api/ga4gh/v2/toolClasses:
    get:
      tags:
      - "GA4GH"
      summary: "List all tool types"
      description: "This endpoint returns all tool-classes available "
      operationId: "toolClassesGet"
      produces:
      - "application/json"
      - "text/plain"
      parameters: []
      responses:
        200:
          description: "A list of potential tool classes."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ToolClass"
  /api/ga4gh/v2/tools:
    get:
      tags:
      - "GA4GH"
      summary: "List all tools"
      description: "This endpoint returns all tools available or a filtered subset\
        \ using metadata query parameters. "
      operationId: "toolsGet"
      produces:
      - "application/json"
      - "text/plain"
      parameters:
      - name: "id"
        in: "query"
        description: "A unique identifier of the tool, scoped to this registry, for\
          \ example `123456`"
        required: false
        type: "string"
      - name: "alias"
        in: "query"
        description: "OPTIONAL for tool registries that support aliases. If provided\
          \ will only return entries with the given alias."
        required: false
        type: "string"
      - name: "registry"
        in: "query"
        description: "The image registry that contains the image."
        required: false
        type: "string"
      - name: "organization"
        in: "query"
        description: "The organization in the registry that published the image."
        required: false
        type: "string"
      - name: "name"
        in: "query"
        description: "The name of the image."
        required: false
        type: "string"
      - name: "toolname"
        in: "query"
        description: "The name of the tool."
        required: false
        type: "string"
      - name: "description"
        in: "query"
        description: "The description of the tool."
        required: false
        type: "string"
      - name: "author"
        in: "query"
        description: "The author of the tool (TODO a thought occurs, are we assuming\
          \ that the author of the CWL and the image are the same?)."
        required: false
        type: "string"
      - name: "checker"
        in: "query"
        description: "Return only checker workflows"
        required: false
        type: "boolean"
      - name: "offset"
        in: "query"
        description: "Start index of paging. Pagination results can be based on numbers\
          \ or other values chosen by the registry implementor (for example, SHA values).\
          \ If this exceeds the current result set return an empty set.  If not specified\
          \ in the request, this will start at the beginning of the results."
        required: false
        type: "string"
      - name: "limit"
        in: "query"
        description: "Amount of records to return in a given page."
        required: false
        type: "integer"
        default: 1000
        format: "int32"
      responses:
        200:
          description: "An array of Tools that match the filter."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Tool"
  /api/ga4gh/v2/tools/{id}:
    get:
      tags:
      - "GA4GH"
      summary: "List one specific tool, acts as an anchor for self references"
      description: "This endpoint returns one specific tool (which has ToolVersions\
        \ nested inside it)"
      operationId: "toolsIdGet"
      produces:
      - "application/json"
      - "text/plain"
      parameters:
      - name: "id"
        in: "path"
        description: "A unique identifier of the tool, scoped to this registry, for\
          \ example `123456`"
        required: true
        type: "string"
      responses:
        200:
          description: "A tool."
          schema:
            $ref: "#/definitions/Tool"
        404:
          description: "The tool can not be found."
          schema:
            $ref: "#/definitions/Error"
  /api/ga4gh/v2/tools/{id}/versions:
    get:
      tags:
      - "GA4GH"
      summary: "List versions of a tool"
      description: "Returns all versions of the specified tool"
      operationId: "toolsIdVersionsGet"
      produces:
      - "application/json"
      - "text/plain"
      parameters:
      - name: "id"
        in: "path"
        description: "A unique identifier of the tool, scoped to this registry, for\
          \ example `123456`"
        required: true
        type: "string"
      responses:
        200:
          description: "An array of tool versions"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ToolVersion"
  /api/ga4gh/v2/tools/{id}/versions/{version_id}:
    get:
      tags:
      - "GA4GH"
      summary: "List one specific tool version, acts as an anchor for self references"
      description: "This endpoint returns one specific tool version"
      operationId: "toolsIdVersionsVersionIdGet"
      produces:
      - "application/json"
      - "text/plain"
      parameters:
      - name: "id"
        in: "path"
        description: "A unique identifier of the tool, scoped to this registry, for\
          \ example `123456`"
        required: true
        type: "string"
      - name: "version_id"
        in: "path"
        description: "An identifier of the tool version, scoped to this registry,\
          \ for example `v1`"
        required: true
        type: "string"
      responses:
        200:
          description: "A tool version."
          schema:
            $ref: "#/definitions/ToolVersion"
        404:
          description: "The tool can not be found."
          schema:
            $ref: "#/definitions/Error"
  /api/ga4gh/v2/tools/{id}/versions/{version_id}/containerfile:
    get:
      tags:
      - "GA4GH"
      summary: "Get the container specification(s) for the specified image."
      description: "Returns the container specifications(s) for the specified image.\
        \ For example, a CWL CommandlineTool can be associated with one specification\
        \ for a container, a CWL Workflow can be associated with multiple specifications\
        \ for containers"
      operationId: "toolsIdVersionsVersionIdContainerfileGet"
      produces:
      - "application/json"
      - "text/plain"
      parameters:
      - name: "id"
        in: "path"
        description: "A unique identifier of the tool, scoped to this registry, for\
          \ example `123456`"
        required: true
        type: "string"
      - name: "version_id"
        in: "path"
        description: "An identifier of the tool version for this particular tool registry,\
          \ for example `v1`"
        required: true
        type: "string"
      responses:
        200:
          description: "The tool payload."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/FileWrapper"
        404:
          description: "There are no container specifications for this tool"
          schema:
            $ref: "#/definitions/Error"
  /api/ga4gh/v2/tools/{id}/versions/{version_id}/{type}/descriptor:
    get:
      tags:
      - "GA4GH"
      summary: "Get the tool descriptor for the specified tool"
      description: "Returns the descriptor for the specified tool (examples include\
        \ CWL, WDL, or Nextflow documents)."
      operationId: "toolsIdVersionsVersionIdTypeDescriptorGet"
      produces:
      - "application/json"
      - "text/plain"
      parameters:
      - name: "type"
        in: "path"
        description: "The output type of the descriptor. If not specified, it is up\
          \ to the underlying implementation to determine which output type to return.\
          \ Plain types return the bare descriptor while the \"non-plain\" types return\
          \ a descriptor wrapped with metadata. Allowable values include \"CWL\",\
          \ \"WDL\", \"NFL\", \"PLAIN_CWL\", \"PLAIN_WDL\", \"PLAIN_NFL\"."
        required: true
        type: "string"
      - name: "id"
        in: "path"
        description: "A unique identifier of the tool, scoped to this registry, for\
          \ example `123456`"
        required: true
        type: "string"
      - name: "version_id"
        in: "path"
        description: "An identifier of the tool version, scoped to this registry,\
          \ for example `v1`"
        required: true
        type: "string"
      responses:
        200:
          description: "The tool descriptor."
          schema:
            $ref: "#/definitions/FileWrapper"
        404:
          description: "The tool descriptor can not be found."
          schema:
            $ref: "#/definitions/Error"
  /api/ga4gh/v2/tools/{id}/versions/{version_id}/{type}/descriptor/{relative_path}:
    get:
      tags:
      - "GA4GH"
      summary: "Get additional tool descriptor files relative to the main file"
      description: "Descriptors can often include imports that refer to additional\
        \ descriptors. This returns additional descriptors for the specified tool\
        \ in the same or other directories that can be reached as a relative path.\
        \ This endpoint can be useful for workflow engine implementations like cwltool\
        \ to programmatically download all the descriptors for a tool and run it.\
        \ This can optionally include other files described with FileWrappers such\
        \ as test parameters and containerfiles. "
      operationId: "toolsIdVersionsVersionIdTypeDescriptorRelativePathGet"
      produces:
      - "application/json"
      - "text/plain"
      parameters:
      - name: "type"
        in: "path"
        description: "The output type of the descriptor. If not specified, it is up\
          \ to the underlying implementation to determine which output type to return.\
          \ Plain types return the bare descriptor while the \"non-plain\" types return\
          \ a descriptor wrapped with metadata. Allowable values are \"CWL\", \"WDL\"\
          , \"NFL\", \"PLAIN_CWL\", \"PLAIN_WDL\", \"PLAIN_NFL\"."
        required: true
        type: "string"
      - name: "id"
        in: "path"
        description: "A unique identifier of the tool, scoped to this registry, for\
          \ example `123456`"
        required: true
        type: "string"
      - name: "version_id"
        in: "path"
        description: "An identifier of the tool version for this particular tool registry,\
          \ for example `v1`"
        required: true
        type: "string"
      - name: "relative_path"
        in: "path"
        description: "A relative path to the additional file (same directory or subdirectories),\
          \ for example 'foo.cwl' would return a 'foo.cwl' from the same directory\
          \ as the main descriptor. 'nestedDirectory/foo.cwl' would return the file\
          \  from a nested subdirectory.  Unencoded paths such 'sampleDirectory/foo.cwl'\
          \ should also be allowed"
        required: true
        type: "string"
        pattern: ".+"
      responses:
        200:
          description: "The tool descriptor."
          schema:
            $ref: "#/definitions/FileWrapper"
        404:
          description: "The tool can not be output in the specified type."
          schema:
            $ref: "#/definitions/Error"
  /api/ga4gh/v2/tools/{id}/versions/{version_id}/{type}/files:
    get:
      tags:
      - "GA4GH"
      summary: "Get a list of objects that contain the relative path and file type"
      description: "Get a list of objects that contain the relative path and file\
        \ type. The descriptors are intended for use with the /tools/{id}/versions/{version_id}/{type}/descriptor/{relative_path\
        \ : .+} endpoint."
      operationId: "toolsIdVersionsVersionIdTypeFilesGet"
      produces:
      - "application/json"
      - "text/plain"
      parameters:
      - name: "type"
        in: "path"
        description: "The output type of the descriptor. Examples of allowable values\
          \ are \"CWL\", \"WDL\", and \"NextFlow.\""
        required: true
        type: "string"
      - name: "id"
        in: "path"
        description: "A unique identifier of the tool, scoped to this registry, for\
          \ example `123456`"
        required: true
        type: "string"
      - name: "version_id"
        in: "path"
        description: "An identifier of the tool version for this particular tool registry,\
          \ for example `v1`"
        required: true
        type: "string"
      responses:
        200:
          description: "The array of File JSON responses."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ToolFile"
        404:
          description: "The tool can not be output in the specified type."
          schema:
            $ref: "#/definitions/Error"
  /api/ga4gh/v2/tools/{id}/versions/{version_id}/{type}/tests:
    get:
      tags:
      - "GA4GH"
      summary: "Get a list of test JSONs"
      description: "Get a list of test JSONs (these allow you to execute the tool\
        \ successfully) suitable for use with this descriptor type."
      operationId: "toolsIdVersionsVersionIdTypeTestsGet"
      produces:
      - "application/json"
      - "text/plain"
      parameters:
      - name: "type"
        in: "path"
        description: "The type of the underlying descriptor. Allowable values include\
          \ \"CWL\", \"WDL\", \"NFL\", \"PLAIN_CWL\", \"PLAIN_WDL\", \"PLAIN_NFL\"\
          . For example, \"CWL\" would return an list of ToolTests objects while \"\
          PLAIN_CWL\" would return a bare JSON list with the content of the tests. "
        required: true
        type: "string"
      - name: "id"
        in: "path"
        description: "A unique identifier of the tool, scoped to this registry, for\
          \ example `123456`"
        required: true
        type: "string"
      - name: "version_id"
        in: "path"
        description: "An identifier of the tool version for this particular tool registry,\
          \ for example `v1`"
        required: true
        type: "string"
      responses:
        200:
          description: "The tool test JSON response."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/FileWrapper"
        404:
          description: "The tool can not be output in the specified type."
          schema:
            $ref: "#/definitions/Error"
  /auth/tokens/bitbucket.org:
    get:
      tags:
      - "tokens"
      summary: "Add a new bitbucket.org token, used by quay.io redirect."
      description: "This is used as part of the OAuth 2 web flow. Once a user has\
        \ approved permissions for CollaboratoryTheir browser will load the redirect\
        \ URI which should resolve here"
      operationId: "addBitbucketToken"
      produces:
      - "application/json"
      parameters:
      - name: "code"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Token"
      security:
      - BEARER: []
  /auth/tokens/github:
    post:
      tags:
      - "tokens"
      summary: "Allow satellizer to post a new GitHub token to dockstore, used by\
        \ login, can create new users."
      description: "A post method is required by satellizer to send the GitHub token"
      operationId: "addToken"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "code"
        required: false
        schema:
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Token"
      security:
      - BEARER: []
  /auth/tokens/github.com:
    get:
      tags:
      - "tokens"
      summary: "Add a new github.com token, used by accounts page."
      description: "This is used as part of the OAuth 2 web flow. Once a user has\
        \ approved permissions for CollaboratoryTheir browser will load the redirect\
        \ URI which should resolve here"
      operationId: "addGithubToken"
      produces:
      - "application/json"
      parameters:
      - name: "code"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Token"
      security:
      - BEARER: []
  /auth/tokens/gitlab.com:
    get:
      tags:
      - "tokens"
      summary: "Add a new gitlab.com token."
      description: "This is used as part of the OAuth 2 web flow. Once a user has\
        \ approved permissions for CollaboratoryTheir browser will load the redirect\
        \ URI which should resolve here"
      operationId: "addGitlabToken"
      produces:
      - "application/json"
      parameters:
      - name: "code"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Token"
      security:
      - BEARER: []
  /auth/tokens/google:
    post:
      tags:
      - "tokens"
      summary: "Allow satellizer to post a new Google token to Dockstore."
      description: "A post method is required by satellizer to send the Google token"
      operationId: "addGoogleToken"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "code"
        required: false
        schema:
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Token"
      security:
      - BEARER: []
  /auth/tokens/quay.io:
    get:
      tags:
      - "tokens"
      summary: "Add a new quay IO token."
      description: "This is used as part of the OAuth 2 web flow. Once a user has\
        \ approved permissions for CollaboratoryTheir browser will load the redirect\
        \ URI which should resolve here"
      operationId: "addQuayToken"
      produces:
      - "application/json"
      parameters:
      - name: "access_token"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Token"
      security:
      - BEARER: []
  /auth/tokens/zenodo.org:
    get:
      tags:
      - "tokens"
      summary: "Add a new zenodo.org token, used by accounts page."
      description: "This is used as part of the OAuth 2 web flow. Once a user has\
        \ approved permissions for CollaboratoryTheir browser will load the redirect\
        \ URI which should resolve here"
      operationId: "addZenodoToken"
      produces:
      - "application/json"
      parameters:
      - name: "code"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Token"
      security:
      - BEARER: []
  /auth/tokens/{tokenId}:
    get:
      tags:
      - "tokens"
      summary: "Get a specific token by id."
      description: ""
      operationId: "listToken"
      produces:
      - "application/json"
      parameters:
      - name: "tokenId"
        in: "path"
        description: "ID of token to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Token"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Token not found"
      security:
      - BEARER: []
    delete:
      tags:
      - "tokens"
      summary: "Delete a token."
      description: ""
      operationId: "deleteToken"
      produces:
      - "application/json"
      parameters:
      - name: "tokenId"
        in: "path"
        description: "Token id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid token value"
      security:
      - BEARER: []
  /containers/dockerRegistryList:
    get:
      tags:
      - "containers"
      summary: "Get the list of docker registries supported on Dockstore."
      description: "Does not need authentication"
      operationId: "getDockerRegistries"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/RegistryBean"
  /containers/hostedEntry:
    post:
      tags:
      - "hosted"
      summary: "Create a hosted tool."
      description: ""
      operationId: "createHostedTool"
      produces:
      - "application/json"
      parameters:
      - name: "registry"
        in: "query"
        description: "The Docker registry (Tools only)"
        required: false
        type: "string"
      - name: "name"
        in: "query"
        description: "The repository name"
        required: true
        type: "string"
      - name: "descriptorType"
        in: "query"
        description: "The descriptor type (Workflows only)"
        required: false
        type: "string"
      - name: "namespace"
        in: "query"
        description: "The Docker namespace (Tools only)"
        required: false
        type: "string"
      - name: "entryName"
        in: "query"
        description: "Optional entry name (Tools only)"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/DockstoreTool"
      security:
      - BEARER: []
  /containers/hostedEntry/{entryId}:
    delete:
      tags:
      - "hosted"
      summary: "Delete a revision of a hosted tool."
      description: ""
      operationId: "deleteHostedToolVersion"
      produces:
      - "application/json"
      parameters:
      - name: "entryId"
        in: "path"
        description: "Entry to modify."
        required: true
        type: "integer"
        format: "int64"
      - name: "version"
        in: "query"
        description: "version"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/DockstoreTool"
      security:
      - BEARER: []
    patch:
      tags:
      - "hosted"
      summary: "Non-idempotent operation for creating new revisions of hosted tools."
      description: ""
      operationId: "editHostedTool"
      produces:
      - "application/json"
      parameters:
      - name: "entryId"
        in: "path"
        description: "Entry to modify."
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Set of updated sourcefiles, add files by adding new files with\
          \ unknown paths, delete files by including them with emptied content"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/SourceFile"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/DockstoreTool"
      security:
      - BEARER: []
  /containers/namespace/{namespace}/published:
    get:
      tags:
      - "containers"
      summary: "List all published tools belonging to the specified namespace."
      description: "NO authentication"
      operationId: "getPublishedContainersByNamespace"
      produces:
      - "application/json"
      parameters:
      - name: "namespace"
        in: "path"
        description: "namespace"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/DockstoreTool"
  /containers/path/tool/{repository}:
    get:
      tags:
      - "containers"
      summary: "Get a tool by the specific tool path"
      description: "Requires full path (including tool name if applicable)."
      operationId: "getContainerByToolPath"
      produces:
      - "application/json"
      parameters:
      - name: "repository"
        in: "path"
        description: "repository path"
        required: true
        type: "string"
      - name: "include"
        in: "query"
        description: "Comma-delimited list of fields to include: validations"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/DockstoreTool"
      security:
      - BEARER: []
  /containers/path/tool/{repository}/published:
    get:
      tags:
      - "containers"
      summary: "Get a published tool by the specific tool path."
      description: "Requires full path (including tool name if applicable)."
      operationId: "getPublishedContainerByToolPath"
      produces:
      - "application/json"
      parameters:
      - name: "repository"
        in: "path"
        description: "repository path"
        required: true
        type: "string"
      - name: "include"
        in: "query"
        description: "Comma-delimited list of fields to include: validations"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/DockstoreTool"
  /containers/path/{containerId}/tags:
    get:
      tags:
      - "containertags"
      summary: "Get tags for a tool by id."
      description: ""
      operationId: "getTagsByPath"
      produces:
      - "application/json"
      parameters:
      - name: "containerId"
        in: "path"
        description: "Tool to modify."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Tag"
            uniqueItems: true
      security:
      - BEARER: []
  /containers/path/{repository}:
    get:
      tags:
      - "containers"
      summary: "Get a list of tools by path."
      description: "Does not require tool name."
      operationId: "getContainerByPath"
      produces:
      - "application/json"
      parameters:
      - name: "repository"
        in: "path"
        description: "repository path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/DockstoreTool"
      security:
      - BEARER: []
  /containers/path/{repository}/published:
    get:
      tags:
      - "containers"
      summary: "Get a list of published tools by path."
      description: "NO authentication"
      operationId: "getPublishedContainerByPath"
      produces:
      - "application/json"
      parameters:
      - name: "repository"
        in: "path"
        description: "repository path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/DockstoreTool"
  /containers/published:
    get:
      tags:
      - "containers"
      summary: "List all published tools."
      description: "NO authentication"
      operationId: "allPublishedContainers"
      produces:
      - "application/json"
      parameters:
      - name: "offset"
        in: "query"
        description: "Start index of paging. Pagination results can be based on numbers\
          \ or other values chosen by the registry implementor (for example, SHA values).\
          \ If this exceeds the current result set return an empty set.  If not specified\
          \ in the request, this will start at the beginning of the results."
        required: false
        type: "string"
      - name: "limit"
        in: "query"
        description: "Amount of records to return in a given page, limited to 100"
        required: false
        type: "integer"
        default: 100
        maximum: 100
        minimum: 1
        format: "int32"
      - name: "filter"
        in: "query"
        description: "Filter, this is a search string that filters the results."
        required: false
        type: "string"
      - name: "sortCol"
        in: "query"
        description: "Sort column"
        required: false
        type: "string"
        default: "stars"
      - name: "sortOrder"
        in: "query"
        description: "Sort order"
        required: false
        type: "string"
        default: "desc"
        enum:
        - "asc"
        - "desc"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/DockstoreTool"
  /containers/published/{containerId}:
    get:
      tags:
      - "containers"
      summary: "Get a published tool."
      description: "NO authentication"
      operationId: "getPublishedContainer"
      produces:
      - "application/json"
      parameters:
      - name: "containerId"
        in: "path"
        description: "Tool ID"
        required: true
        type: "integer"
        format: "int64"
      - name: "include"
        in: "query"
        description: "Comma-delimited list of fields to include: validations"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/DockstoreTool"
  /containers/registerManual:
    post:
      tags:
      - "containers"
      summary: "Register a tool manually, along with tags."
      description: ""
      operationId: "registerManual"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Tool to be registered"
        required: true
        schema:
          $ref: "#/definitions/DockstoreTool"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/DockstoreTool"
      security:
      - BEARER: []
  /containers/schema/{containerId}/published:
    get:
      tags:
      - "containers"
      summary: "Get a published tool's schema by ID."
      description: "NO authentication"
      operationId: "getPublishedContainerSchema"
      produces:
      - "application/json"
      parameters:
      - name: "containerId"
        in: "path"
        description: "Tool ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "array"
              items:
                type: "object"
  /containers/{alias}/aliases:
    get:
      tags:
      - "containers"
      summary: "Retrieves a tool by alias."
      description: "Does not require authentication for published tools, authentication\
        \ can be provided for restricted tools"
      operationId: "getToolByAlias"
      produces:
      - "application/json"
      parameters:
      - name: "alias"
        in: "path"
        description: "Alias"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/DockstoreTool"
      security:
      - BEARER: []
  /containers/{containerId}:
    get:
      tags:
      - "containers"
      summary: "Retrieve a tool."
      description: "This is one of the few endpoints that returns the user object\
        \ with populated properties (minus the userProfiles property)"
      operationId: "getContainer"
      produces:
      - "application/json"
      parameters:
      - name: "containerId"
        in: "path"
        description: "Tool ID"
        required: true
        type: "integer"
        format: "int64"
      - name: "include"
        in: "query"
        description: "Comma-delimited list of fields to include: validations"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/DockstoreTool"
      security:
      - BEARER: []
    put:
      tags:
      - "containers"
      summary: "Update the tool with the given tool."
      description: "Updates default descriptor paths, default Docker paths, default\
        \ test parameter paths, git url, and default version. Also updates tool maintainer\
        \ email, and private access for manual tools."
      operationId: "updateContainer"
      produces:
      - "application/json"
      parameters:
      - name: "containerId"
        in: "path"
        description: "Tool to modify."
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Tool with updated information"
        required: true
        schema:
          $ref: "#/definitions/DockstoreTool"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/DockstoreTool"
      security:
      - BEARER: []
    delete:
      tags:
      - "containers"
      summary: "Delete a tool."
      description: ""
      operationId: "deleteContainer"
      produces:
      - "application/json"
      parameters:
      - name: "containerId"
        in: "path"
        description: "Tool id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid "
      security:
      - BEARER: []
  /containers/{containerId}/descriptor/{relative-path}:
    get:
      tags:
      - "containers"
      summary: "Get the corresponding descriptor file."
      description: "Does not require authentication for published tools, authentication\
        \ can be provided for restricted tools"
      operationId: "secondaryDescriptorPath"
      produces:
      - "application/json"
      parameters:
      - name: "containerId"
        in: "path"
        description: "Tool id"
        required: true
        type: "integer"
        format: "int64"
      - name: "tag"
        in: "query"
        required: false
        type: "string"
      - name: "relative-path"
        in: "path"
        required: true
        type: "string"
      - name: "language"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/SourceFile"
      security:
      - BEARER: []
  /containers/{containerId}/dockerfile:
    get:
      tags:
      - "containers"
      summary: "Get the corresponding Dockerfile."
      description: "Does not require authentication for published tools, authentication\
        \ can be provided for restricted tools"
      operationId: "dockerfile"
      produces:
      - "application/json"
      parameters:
      - name: "containerId"
        in: "path"
        description: "Tool id"
        required: true
        type: "integer"
        format: "int64"
      - name: "tag"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/SourceFile"
      security:
      - BEARER: []
  /containers/{containerId}/labels:
    put:
      tags:
      - "containers"
      summary: "Update the labels linked to a tool."
      description: "Labels are alphanumerical (case-insensitive and may contain internal\
        \ hyphens), given in a comma-delimited list."
      operationId: "updateLabels"
      produces:
      - "application/json"
      parameters:
      - name: "containerId"
        in: "path"
        description: "Tool to modify."
        required: true
        type: "integer"
        format: "int64"
      - name: "labels"
        in: "query"
        description: "Comma-delimited list of labels."
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "This is here to appease Swagger. It requires PUT methods to\
          \ have a body, even if it is empty. Please leave it empty."
        required: false
        schema:
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/DockstoreTool"
      security:
      - BEARER: []
  /containers/{containerId}/primaryDescriptor:
    get:
      tags:
      - "containers"
      summary: "Get the primary descriptor file."
      description: "Does not require authentication for published tools, authentication\
        \ can be provided for restricted tools"
      operationId: "primaryDescriptor"
      produces:
      - "application/json"
      parameters:
      - name: "containerId"
        in: "path"
        description: "Tool id"
        required: true
        type: "integer"
        format: "int64"
      - name: "tag"
        in: "query"
        required: false
        type: "string"
      - name: "language"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/SourceFile"
      security:
      - BEARER: []
  /containers/{containerId}/publish:
    post:
      tags:
      - "containers"
      summary: "Publish or unpublish a tool."
      description: ""
      operationId: "publish"
      produces:
      - "application/json"
      parameters:
      - name: "containerId"
        in: "path"
        description: "Tool id to publish"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "PublishRequest to refresh the list of repos for a user"
        required: true
        schema:
          $ref: "#/definitions/PublishRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/DockstoreTool"
      security:
      - BEARER: []
  /containers/{containerId}/refresh:
    get:
      tags:
      - "containers"
      summary: "Refresh one particular tool."
      description: ""
      operationId: "refresh"
      produces:
      - "application/json"
      parameters:
      - name: "containerId"
        in: "path"
        description: "Tool ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/DockstoreTool"
      security:
      - BEARER: []
  /containers/{containerId}/requestDOI/{tagId}:
    post:
      tags:
      - "containertags"
      summary: "Request a DOI for this version of a tool."
      description: ""
      operationId: "requestDOIForToolTag"
      produces:
      - "application/json"
      parameters:
      - name: "containerId"
        in: "path"
        description: "Tool to modify."
        required: true
        type: "integer"
        format: "int64"
      - name: "tagId"
        in: "path"
        description: "Tag to request DOI."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Tag"
      security:
      - BEARER: []
  /containers/{containerId}/secondaryDescriptors:
    get:
      tags:
      - "containers"
      summary: "Get a list of secondary descriptor files."
      description: "Does not require authentication for published tools, authentication\
        \ can be provided for restricted tools"
      operationId: "secondaryDescriptors"
      produces:
      - "application/json"
      parameters:
      - name: "containerId"
        in: "path"
        description: "Tool id"
        required: true
        type: "integer"
        format: "int64"
      - name: "tag"
        in: "query"
        required: false
        type: "string"
      - name: "language"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/SourceFile"
      security:
      - BEARER: []
  /containers/{containerId}/star:
    put:
      tags:
      - "containers"
      summary: "Star a tool."
      description: ""
      operationId: "starEntry"
      produces:
      - "application/json"
      parameters:
      - name: "containerId"
        in: "path"
        description: "Tool to star."
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "StarRequest to star a repo for a user"
        required: true
        schema:
          $ref: "#/definitions/StarRequest"
      responses:
        default:
          description: "successful operation"
      security:
      - BEARER: []
  /containers/{containerId}/starredUsers:
    get:
      tags:
      - "containers"
      summary: "Returns list of users who starred a tool."
      description: ""
      operationId: "getStarredUsers"
      produces:
      - "application/json"
      parameters:
      - name: "containerId"
        in: "path"
        description: "Tool to grab starred users for."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
  /containers/{containerId}/tags:
    post:
      tags:
      - "containertags"
      summary: "Add new tags linked to a tool."
      description: ""
      operationId: "addTags"
      produces:
      - "application/json"
      parameters:
      - name: "containerId"
        in: "path"
        description: "Tool to modify."
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "List of new tags"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/Tag"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Tag"
      security:
      - BEARER: []
    put:
      tags:
      - "containertags"
      summary: "Update the tags linked to a tool."
      description: ""
      operationId: "updateTags"
      produces:
      - "application/json"
      parameters:
      - name: "containerId"
        in: "path"
        description: "Tool to modify."
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "List of modified tags"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/Tag"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Tag"
      security:
      - BEARER: []
  /containers/{containerId}/tags/{tagId}:
    delete:
      tags:
      - "containertags"
      summary: "Delete tag linked to a tool."
      description: ""
      operationId: "deleteTags"
      produces:
      - "application/json"
      parameters:
      - name: "containerId"
        in: "path"
        description: "Tool to modify."
        required: true
        type: "integer"
        format: "int64"
      - name: "tagId"
        in: "path"
        description: "Tag to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        default:
          description: "successful operation"
      security:
      - BEARER: []
  /containers/{containerId}/testParameterFiles:
    get:
      tags:
      - "containers"
      summary: "Get the corresponding test parameter files."
      description: "Does not require authentication for published tools, authentication\
        \ can be provided for restricted tools"
      operationId: "getTestParameterFiles"
      produces:
      - "application/json"
      parameters:
      - name: "containerId"
        in: "path"
        description: "Tool id"
        required: true
        type: "integer"
        format: "int64"
      - name: "tag"
        in: "query"
        required: false
        type: "string"
      - name: "descriptorType"
        in: "query"
        description: "Descriptor Type"
        required: true
        type: "string"
        enum:
        - "CWL"
        - "WDL"
        - "NFL"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/SourceFile"
      security:
      - BEARER: []
    put:
      tags:
      - "containers"
      summary: "Add test parameter files to a tag."
      description: ""
      operationId: "addTestParameterFiles"
      produces:
      - "application/json"
      parameters:
      - name: "containerId"
        in: "path"
        description: "Tool to modify."
        required: true
        type: "integer"
        format: "int64"
      - name: "testParameterPaths"
        in: "query"
        description: "List of paths."
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - in: "body"
        name: "body"
        description: "This is here to appease Swagger. It requires PUT methods to\
          \ have a body, even if it is empty. Please leave it empty."
        required: false
        schema:
          type: "string"
      - name: "tagName"
        in: "query"
        required: false
        type: "string"
      - name: "descriptorType"
        in: "query"
        description: "Descriptor Type"
        required: true
        type: "string"
        enum:
        - "CWL"
        - "WDL"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/SourceFile"
            uniqueItems: true
      security:
      - BEARER: []
    delete:
      tags:
      - "containers"
      summary: "Delete test parameter files to a tag."
      description: ""
      operationId: "deleteTestParameterFiles"
      produces:
      - "application/json"
      parameters:
      - name: "containerId"
        in: "path"
        description: "Tool to modify."
        required: true
        type: "integer"
        format: "int64"
      - name: "testParameterPaths"
        in: "query"
        description: "List of paths."
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "tagName"
        in: "query"
        required: false
        type: "string"
      - name: "descriptorType"
        in: "query"
        description: "Descriptor Type"
        required: true
        type: "string"
        enum:
        - "CWL"
        - "WDL"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/SourceFile"
            uniqueItems: true
      security:
      - BEARER: []
  /containers/{containerId}/unstar:
    delete:
      tags:
      - "containers"
      summary: "Unstar a tool."
      description: ""
      operationId: "unstarEntry"
      produces:
      - "application/json"
      parameters:
      - name: "containerId"
        in: "path"
        description: "Tool to unstar."
        required: true
        type: "integer"
        format: "int64"
      responses:
        default:
          description: "successful operation"
      security:
      - BEARER: []
      deprecated: true
  /containers/{containerId}/updateTagPaths:
    put:
      tags:
      - "containers"
      summary: "Change the tool paths."
      description: "Resets the descriptor paths and dockerfile path of all versions\
        \ to match the default paths from the tool object passed."
      operationId: "updateTagContainerPath"
      produces:
      - "application/json"
      parameters:
      - name: "containerId"
        in: "path"
        description: "Tool to modify."
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Tool with updated information"
        required: true
        schema:
          $ref: "#/definitions/DockstoreTool"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/DockstoreTool"
      security:
      - BEARER: []
  /containers/{containerId}/users:
    get:
      tags:
      - "containers"
      summary: "Get users of a tool."
      description: ""
      operationId: "getUsers"
      produces:
      - "application/json"
      parameters:
      - name: "containerId"
        in: "path"
        description: "Tool ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
      security:
      - BEARER: []
  /containers/{toolId}/defaultVersion:
    put:
      tags:
      - "containers"
      summary: "Update the default version of the given tool."
      description: ""
      operationId: "updateToolDefaultVersion"
      produces:
      - "application/json"
      parameters:
      - name: "toolId"
        in: "path"
        description: "Tool to modify."
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Tag name to set as default."
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/DockstoreTool"
      security:
      - BEARER: []
  /containers/{toolId}/zip/{tagId}:
    get:
      tags:
      - "containers"
      summary: "Download a ZIP file of a tool and all associated files."
      description: ""
      operationId: "getToolZip"
      produces:
      - "application/zip"
      parameters:
      - name: "toolId"
        in: "path"
        description: "toolId"
        required: true
        type: "integer"
        format: "int64"
      - name: "tagId"
        in: "path"
        description: "tagId"
        required: true
        type: "integer"
        format: "int64"
      responses:
        default:
          description: "successful operation"
      security:
      - BEARER: []
  /curation/notifications:
    get:
      tags:
      - "curation"
      summary: "Return all active notifications"
      description: "NO Authentication"
      operationId: "getActiveNotifications"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Notification"
    post:
      tags:
      - "curation"
      summary: "Create a notification"
      description: "Curator/admin only"
      operationId: "createNotification"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Notification to create"
        required: true
        schema:
          $ref: "#/definitions/Notification"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Notification"
      security:
      - BEARER: []
  /curation/notifications/{id}:
    get:
      tags:
      - "curation"
      summary: "Return the notification with given id"
      description: "NO Authentication"
      operationId: "getNotification"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Notification"
    put:
      tags:
      - "curation"
      summary: "Update a notification"
      description: "Curator/admin only"
      operationId: "updateNotification"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Notification to update"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Updated version of notification"
        required: true
        schema:
          $ref: "#/definitions/Notification"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Notification"
      security:
      - BEARER: []
    delete:
      tags:
      - "curation"
      summary: "Delete a notification"
      description: "Curator/admin only"
      operationId: "deleteNotification"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Notification to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        default:
          description: "successful operation"
      security:
      - BEARER: []
  /entries/{id}/aliases:
    post:
      tags:
      - "entries"
      summary: "Add aliases linked to a entry in Dockstore."
      description: "Aliases are alphanumerical (case-insensitive and may contain internal\
        \ hyphens), given in a comma-delimited list."
      operationId: "addAliases"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Entry to modify."
        required: true
        type: "integer"
        format: "int64"
      - name: "aliases"
        in: "query"
        description: "Comma-delimited list of aliases."
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Entry"
      security:
      - BEARER: []
  /entries/{id}/collections:
    get:
      tags:
      - "entries"
      summary: "Get the collections and organizations that contain the published entry"
      description: "Entry must be published"
      operationId: "entryCollections"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "id"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/CollectionOrganization"
  /entries/{id}/topic:
    post:
      tags:
      - "entries"
      summary: "Create a discourse topic for an entry."
      description: ""
      operationId: "setDiscourseTopic"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id of the entry to add a topic to."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Entry"
      security:
      - BEARER: []
  /events:
    get:
      tags:
      - "events"
      summary: "Get events based on filters."
      description: "Optional authentication."
      operationId: "getEvents"
      produces:
      - "application/json"
      parameters:
      - name: "event_search_type"
        in: "query"
        required: false
        type: "string"
        enum:
        - "STARRED_ENTRIES"
        - "STARRED_ORGANIZATION"
        - "ALL_STARRED"
      - name: "limit"
        in: "query"
        required: false
        type: "integer"
        default: 10
        maximum: 100
        minimum: 1
        format: "int32"
      - name: "offset"
        in: "query"
        required: false
        type: "integer"
        default: 0
        format: "int32"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Event"
      security:
      - BEARER: []
  /metadata/config.json:
    get:
      tags:
      - "metadata"
      summary: "Configuration for UI clients of the API"
      description: "NO authentication"
      operationId: "getConfig"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Config"
  /metadata/descriptorLanguageList:
    get:
      tags:
      - "metadata"
      summary: "Get the list of descriptor languages supported on Dockstore."
      description: "NO authentication"
      operationId: "getDescriptorLanguages"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/DescriptorLanguageBean"
  /metadata/dockerRegistryList:
    get:
      tags:
      - "metadata"
      summary: "Get the list of docker registries supported on Dockstore."
      description: "NO authentication"
      operationId: "getDockerRegistries"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/RegistryBean"
  /metadata/elasticSearch:
    get:
      tags:
      - "metadata"
      summary: "Successful response if elastic search is up and running."
      description: "NO authentication"
      operationId: "checkElasticSearch"
      produces:
      - "text/html"
      - "text/xml"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /metadata/okHttpCachePerformance:
    get:
      tags:
      - "metadata"
      summary: "Get measures of cache performance."
      description: "NO authentication"
      operationId: "getCachePerformance"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "object"
  /metadata/rss:
    get:
      tags:
      - "metadata"
      summary: "List all published tools and workflows in creation order."
      description: "NO authentication"
      operationId: "rssFeed"
      produces:
      - "text/xml"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
  /metadata/runner_dependencies:
    get:
      tags:
      - "metadata"
      summary: "Returns the file containing runner dependencies."
      description: ""
      operationId: "getRunnerDependencies"
      produces:
      - "text/plain"
      - "application/json"
      parameters:
      - name: "client_version"
        in: "query"
        description: "The Dockstore client version"
        required: false
        type: "string"
      - name: "python_version"
        in: "query"
        description: "Python version, only relevant for the cwltool runner"
        required: false
        type: "string"
        default: "3"
      - name: "runner"
        in: "query"
        description: "The tool runner"
        required: false
        type: "string"
        default: "cwltool"
        enum:
        - "cwltool"
      - name: "output"
        in: "query"
        description: "Response type"
        required: false
        type: "string"
        default: "text"
        enum:
        - "json"
        - "text"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
  /metadata/sitemap:
    get:
      tags:
      - "metadata"
      summary: "List all available workflow, tool, organization, and collection paths."
      description: "List all available workflow, tool, organization, and collection\
        \ paths. Available means published for tools/workflows, and approved for organizations\
        \ and their respective collections."
      operationId: "sitemap"
      produces:
      - "text/html"
      - "text/xml"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
  /metadata/sourceControlList:
    get:
      tags:
      - "metadata"
      summary: "Get the list of source controls supported on Dockstore."
      description: "NO authentication"
      operationId: "getSourceControlList"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/SourceControlBean"
  /organizations:
    get:
      tags:
      - "organizations"
      summary: "List all available organizations."
      description: "NO Authentication"
      operationId: "getApprovedOrganizations"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Organization"
    post:
      tags:
      - "organizations"
      summary: "Create an organization."
      description: "Organization requires approval by an admin before being made public."
      operationId: "createOrganization"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Organization to register."
        required: true
        schema:
          $ref: "#/definitions/Organization"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Organization"
      security:
      - BEARER: []
  /organizations/all:
    get:
      tags:
      - "organizations"
      summary: "List all organizations."
      description: "Admin/curator only"
      operationId: "getAllOrganizations"
      produces:
      - "application/json"
      parameters:
      - name: "type"
        in: "query"
        description: "Filter to apply to organizations."
        required: true
        type: "string"
        enum:
        - "all"
        - "pending"
        - "rejected"
        - "approved"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Organization"
      security:
      - BEARER: []
  /organizations/collections/{alias}/aliases:
    get:
      tags:
      - "organizations"
      summary: "Retrieve a collection by alias."
      description: ""
      operationId: "getCollectionByAlias"
      produces:
      - "application/json"
      parameters:
      - name: "alias"
        in: "path"
        description: "Alias of the collection"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Collection"
  /organizations/collections/{collectionId}/aliases:
    post:
      tags:
      - "organizations"
      summary: "Add aliases linked to a collection in Dockstore."
      description: "Aliases are alphanumerical (case-insensitive and may contain internal\
        \ hyphens), given in a comma-delimited list."
      operationId: "addCollectionAliases"
      produces:
      - "application/json"
      parameters:
      - name: "collectionId"
        in: "path"
        description: "Collection to modify."
        required: true
        type: "integer"
        format: "int64"
      - name: "aliases"
        in: "query"
        description: "Comma-delimited list of aliases."
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Collection"
      security:
      - BEARER: []
  /organizations/name/{name}:
    get:
      tags:
      - "organizations"
      summary: "Retrieve an organization by name."
      description: "Does not require authentication for approved organizations, authentication\
        \ can be provided for unapproved organizations"
      operationId: "getOrganizationByName"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "Organization name."
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Organization"
      security:
      - BEARER: []
  /organizations/{alias}/aliases:
    get:
      tags:
      - "organizations"
      summary: "Retrieve an organization by alias."
      description: ""
      operationId: "getOrganizationByAlias"
      produces:
      - "application/json"
      parameters:
      - name: "alias"
        in: "path"
        description: "Alias."
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Organization"
  /organizations/{organizationId}:
    get:
      tags:
      - "organizations"
      summary: "Retrieve an organization by ID."
      description: "Does not require authentication for approved organizations, authentication\
        \ can be provided for unapproved organizations"
      operationId: "getOrganizationById"
      produces:
      - "application/json"
      parameters:
      - name: "organizationId"
        in: "path"
        description: "Organization ID."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Organization"
      security:
      - BEARER: []
    put:
      tags:
      - "organizations"
      summary: "Update an organization."
      description: "Currently only name, display name, description, topic, email,\
        \ link, avatarUrl, and location can be updated."
      operationId: "updateOrganization"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Organization to update with."
        required: true
        schema:
          $ref: "#/definitions/Organization"
      - name: "organizationId"
        in: "path"
        description: "Organization ID."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Organization"
      security:
      - BEARER: []
  /organizations/{organizationId}/aliases:
    post:
      tags:
      - "organizations"
      summary: "Add aliases linked to a listing in Dockstore."
      description: "Aliases are alphanumerical (case-insensitive and may contain internal\
        \ hyphens), given in a comma-delimited list."
      operationId: "addOrganizationAliases"
      produces:
      - "application/json"
      parameters:
      - name: "organizationId"
        in: "path"
        description: "Organization to modify."
        required: true
        type: "integer"
        format: "int64"
      - name: "aliases"
        in: "query"
        description: "Comma-delimited list of aliases."
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Organization"
      security:
      - BEARER: []
  /organizations/{organizationId}/approve:
    post:
      tags:
      - "organizations"
      summary: "Approve an organization."
      description: "Admin/curator only"
      operationId: "approveOrganization"
      produces:
      - "application/json"
      parameters:
      - name: "organizationId"
        in: "path"
        description: "Organization ID."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Organization"
      security:
      - BEARER: []
  /organizations/{organizationId}/collections:
    get:
      tags:
      - "organizations"
      summary: "Retrieve all collections for an organization."
      description: "Does not require authentication for approved organizations, authentication\
        \ can be provided for unapproved organizations"
      operationId: "getCollectionsFromOrganization"
      produces:
      - "application/json"
      parameters:
      - name: "organizationId"
        in: "path"
        description: "Organization ID."
        required: true
        type: "integer"
        format: "int64"
      - name: "include"
        in: "query"
        description: "Included fields"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Collection"
      security:
      - BEARER: []
    post:
      tags:
      - "organizations"
      summary: "Create a collection in the given organization."
      description: ""
      operationId: "createCollection"
      produces:
      - "application/json"
      parameters:
      - name: "organizationId"
        in: "path"
        description: "Organization ID."
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Collection to register."
        required: true
        schema:
          $ref: "#/definitions/Collection"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Collection"
      security:
      - BEARER: []
  /organizations/{organizationId}/collections/{collectionId}:
    get:
      tags:
      - "organizations"
      summary: "Retrieve a collection by ID."
      description: "Does not require authentication for approved organizations, authentication\
        \ can be provided for unapproved organizations"
      operationId: "getCollectionById"
      produces:
      - "application/json"
      parameters:
      - name: "organizationId"
        in: "path"
        description: "Organization ID."
        required: true
        type: "integer"
        format: "int64"
      - name: "collectionId"
        in: "path"
        description: "Collection ID."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Collection"
      security:
      - BEARER: []
    put:
      tags:
      - "organizations"
      summary: "Update a collection."
      description: "Currently only name, display name, description, and topic can\
        \ be updated."
      operationId: "updateCollection"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Collection to update with."
        required: true
        schema:
          $ref: "#/definitions/Collection"
      - name: "organizationId"
        in: "path"
        description: "Organization ID."
        required: true
        type: "integer"
        format: "int64"
      - name: "collectionId"
        in: "path"
        description: "Collection ID."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Collection"
      security:
      - BEARER: []
  /organizations/{organizationId}/collections/{collectionId}/description:
    get:
      tags:
      - "organizations"
      summary: "Retrieve a collection description by organization ID and collection\
        \ ID."
      description: "Does not require authentication for approved organizations, authentication\
        \ can be provided for unapproved organizations"
      operationId: "getCollectionDescription"
      produces:
      - "application/json"
      parameters:
      - name: "organizationId"
        in: "path"
        description: "Organization ID"
        required: true
        type: "integer"
        format: "int64"
      - name: "collectionId"
        in: "path"
        description: "Collection ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
      security:
      - BEARER: []
    put:
      tags:
      - "organizations"
      summary: "Update a collection's description."
      description: "Description in markdown"
      operationId: "updateCollectionDescription"
      produces:
      - "application/json"
      parameters:
      - name: "organizationId"
        in: "path"
        description: "Organization ID."
        required: true
        type: "integer"
        format: "int64"
      - name: "collectionId"
        in: "path"
        description: "Collection ID."
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Collections's description in markdown."
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Collection"
      security:
      - BEARER: []
  /organizations/{organizationId}/collections/{collectionId}/entry:
    post:
      tags:
      - "organizations"
      summary: "Add an entry to a collection."
      description: ""
      operationId: "addEntryToCollection"
      produces:
      - "application/json"
      parameters:
      - name: "organizationId"
        in: "path"
        description: "Organization ID."
        required: true
        type: "integer"
        format: "int64"
      - name: "collectionId"
        in: "path"
        description: "Collection ID."
        required: true
        type: "integer"
        format: "int64"
      - name: "entryId"
        in: "query"
        description: "Entry ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Collection"
      security:
      - BEARER: []
    delete:
      tags:
      - "organizations"
      summary: "Delete an entry from a collection."
      description: ""
      operationId: "deleteEntryFromCollection"
      produces:
      - "application/json"
      parameters:
      - name: "organizationId"
        in: "path"
        description: "Organization ID."
        required: true
        type: "integer"
        format: "int64"
      - name: "collectionId"
        in: "path"
        description: "Collection ID."
        required: true
        type: "integer"
        format: "int64"
      - name: "entryId"
        in: "query"
        description: "Entry ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Collection"
      security:
      - BEARER: []
  /organizations/{organizationId}/description:
    get:
      tags:
      - "organizations"
      summary: "Retrieve an organization description by organization ID."
      description: "Does not require authentication for approved organizations, authentication\
        \ can be provided for unapproved organizations"
      operationId: "getOrganizationDescription"
      produces:
      - "application/json"
      parameters:
      - name: "organizationId"
        in: "path"
        description: "Organization ID."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
      security:
      - BEARER: []
    put:
      tags:
      - "organizations"
      summary: "Update an organization's description."
      description: "Description in markdown"
      operationId: "updateOrganizationDescription"
      produces:
      - "application/json"
      parameters:
      - name: "organizationId"
        in: "path"
        description: "Organization ID."
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Organization's description in markdown."
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Organization"
      security:
      - BEARER: []
  /organizations/{organizationId}/events:
    get:
      tags:
      - "organizations"
      summary: "Retrieve all events for an organization."
      description: "Does not require authentication for approved organizations, authentication\
        \ can be provided for unapproved organizations"
      operationId: "getOrganizationEvents"
      produces:
      - "application/json"
      parameters:
      - name: "organizationId"
        in: "path"
        description: "Organization ID."
        required: true
        type: "integer"
        format: "int64"
      - name: "offset"
        in: "query"
        description: "Start index of paging.  If this exceeds the current result set\
          \ return an empty set.  If not specified in the request, this will start\
          \ at the beginning of the results."
        required: false
        type: "integer"
        default: 0
        format: "int32"
      - name: "limit"
        in: "query"
        description: "Amount of records to return in a given page, limited to 100"
        required: false
        type: "integer"
        default: 100
        maximum: 100
        minimum: 1
        format: "int32"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Event"
      security:
      - BEARER: []
  /organizations/{organizationId}/invitation:
    post:
      tags:
      - "organizations"
      summary: "Accept or reject an organization invitation."
      description: "True accepts the invitation, false rejects the invitation."
      operationId: "acceptOrRejectInvitation"
      produces:
      - "application/json"
      parameters:
      - name: "organizationId"
        in: "path"
        description: "Organization ID."
        required: true
        type: "integer"
        format: "int64"
      - name: "accept"
        in: "query"
        description: "Accept or reject."
        required: true
        type: "boolean"
      responses:
        default:
          description: "successful operation"
      security:
      - BEARER: []
  /organizations/{organizationId}/members:
    get:
      tags:
      - "organizations"
      summary: "Retrieve all members for an organization."
      description: "Does not require authentication for approved organizations, authentication\
        \ can be provided for unapproved organizations"
      operationId: "getOrganizationMembers"
      produces:
      - "application/json"
      parameters:
      - name: "organizationId"
        in: "path"
        description: "Organization ID."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/OrganizationUser"
            uniqueItems: true
      security:
      - BEARER: []
  /organizations/{organizationId}/reject:
    post:
      tags:
      - "organizations"
      summary: "Reject an organization."
      description: "Admin/curator only"
      operationId: "rejectOrganization"
      produces:
      - "application/json"
      parameters:
      - name: "organizationId"
        in: "path"
        description: "Organization ID."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Organization"
      security:
      - BEARER: []
  /organizations/{organizationId}/request:
    post:
      tags:
      - "organizations"
      summary: "Re-request an organization approval."
      description: "Only for rejected organizations"
      operationId: "requestOrganizationReview"
      produces:
      - "application/json"
      parameters:
      - name: "organizationId"
        in: "path"
        description: "Organization ID."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Organization"
      security:
      - BEARER: []
  /organizations/{organizationId}/star:
    put:
      tags:
      - "organizations"
      summary: "Star an organization."
      description: ""
      operationId: "starOrganization"
      produces:
      - "application/json"
      parameters:
      - name: "organizationId"
        in: "path"
        description: "Organization ID."
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "StarRequest to star an organization for a user."
        required: true
        schema:
          $ref: "#/definitions/StarRequest"
      responses:
        default:
          description: "successful operation"
      security:
      - BEARER: []
  /organizations/{organizationId}/starredUsers:
    get:
      tags:
      - "organizations"
      summary: "Return list of users who starred the given approved organization."
      description: ""
      operationId: "getStarredUsersForApprovedOrganization"
      produces:
      - "application/json"
      parameters:
      - name: "organizationId"
        in: "path"
        description: "Organization ID."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
  /organizations/{organizationId}/unstar:
    delete:
      tags:
      - "organizations"
      summary: "Unstar an organization."
      description: ""
      operationId: "unstarOrganization"
      produces:
      - "application/json"
      parameters:
      - name: "organizationId"
        in: "path"
        description: "Organization ID."
        required: true
        type: "integer"
        format: "int64"
      responses:
        default:
          description: "successful operation"
      security:
      - BEARER: []
      deprecated: true
  /organizations/{organizationId}/user:
    post:
      tags:
      - "organizations"
      summary: "Update a user role in an organization."
      description: ""
      operationId: "updateUserRole"
      produces:
      - "application/json"
      parameters:
      - name: "role"
        in: "query"
        description: "Role of user."
        required: true
        type: "string"
        enum:
        - "MAINTAINER"
        - "MEMBER"
      - name: "userId"
        in: "query"
        description: "User ID of user to update within organization."
        required: true
        type: "integer"
        format: "int64"
      - name: "organizationId"
        in: "path"
        description: "Organization ID."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/OrganizationUser"
      security:
      - BEARER: []
    put:
      tags:
      - "organizations"
      summary: "Add a user role to an organization."
      description: ""
      operationId: "addUserToOrg"
      produces:
      - "application/json"
      parameters:
      - name: "role"
        in: "query"
        description: "Role of user."
        required: true
        type: "string"
        enum:
        - "MAINTAINER"
        - "MEMBER"
      - name: "userId"
        in: "query"
        description: "User ID of user to add to organization."
        required: true
        type: "integer"
        format: "int64"
      - name: "organizationId"
        in: "path"
        description: "Organization ID."
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "This is here to appease Swagger. It requires PUT methods to\
          \ have a body, even if it is empty. Please leave it empty."
        required: false
        schema:
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/OrganizationUser"
      security:
      - BEARER: []
    delete:
      tags:
      - "organizations"
      summary: "Remove a user from an organization."
      description: ""
      operationId: "deleteUserRole"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "query"
        description: "User ID of user to remove from organization."
        required: true
        type: "integer"
        format: "int64"
      - name: "organizationId"
        in: "path"
        description: "Organization ID."
        required: true
        type: "integer"
        format: "int64"
      responses:
        default:
          description: "successful operation"
      security:
      - BEARER: []
  /organizations/{organizationId}/users/{username}:
    put:
      tags:
      - "organizations"
      summary: "Add a user role to an organization."
      description: ""
      operationId: "addUserToOrgByUsername"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Role of user."
        required: true
        schema:
          type: "string"
      - name: "username"
        in: "path"
        description: "User to add to org."
        required: true
        type: "string"
      - name: "organizationId"
        in: "path"
        description: "Organization ID."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/OrganizationUser"
      security:
      - BEARER: []
  /organizations/{organizationName}/collections/{collectionName}/name:
    get:
      tags:
      - "organizations"
      summary: "Retrieve a collection by name."
      description: "Does not require authentication for approved organizations, authentication\
        \ can be provided for unapproved organizations"
      operationId: "getCollectionByName"
      produces:
      - "application/json"
      parameters:
      - name: "organizationName"
        in: "path"
        description: "Organization name."
        required: true
        type: "string"
      - name: "collectionName"
        in: "path"
        description: "Collection name."
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Collection"
      security:
      - BEARER: []
  /toolTester/logs:
    get:
      tags:
      - "toolTester"
      operationId: "getToolTesterLog"
      produces:
      - "text/plain"
      parameters:
      - name: "tool_id"
        in: "query"
        required: false
        type: "string"
      - name: "tool_version_name"
        in: "query"
        required: false
        type: "string"
      - name: "test_filename"
        in: "query"
        required: false
        type: "string"
      - name: "runner"
        in: "query"
        required: false
        type: "string"
      - name: "log_type"
        in: "query"
        required: false
        type: "string"
        enum:
        - "FULL"
        - "SUMMARY"
      - name: "filename"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          headers: {}
          schema:
            type: "string"
  /toolTester/logs/search:
    get:
      tags:
      - "toolTester"
      operationId: "search"
      produces:
      - "application/json"
      parameters:
      - name: "tool_id"
        in: "query"
        required: false
        type: "string"
      - name: "tool_version_name"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          headers: {}
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ToolTesterLog"
  /users/checkUser/{username}:
    get:
      tags:
      - "users"
      summary: "Check if user with some username exists."
      description: ""
      operationId: "checkUserExists"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "User name to check"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "boolean"
      security:
      - BEARER: []
  /users/registries:
    get:
      tags:
      - "users"
      summary: "See OpenApi for details"
      description: ""
      operationId: "getUserRegistries"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "string"
              enum:
              - "dockstore.org"
              - "github.com"
              - "bitbucket.org"
              - "gitlab.com"
  /users/registries/{gitRegistry}/organizations:
    get:
      tags:
      - "users"
      summary: "See OpenApi for details"
      description: ""
      operationId: "getUserOrganizations"
      produces:
      - "application/json"
      parameters:
      - name: "gitRegistry"
        in: "path"
        required: true
        type: "string"
        enum:
        - "dockstore.org"
        - "github.com"
        - "bitbucket.org"
        - "gitlab.com"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "string"
            uniqueItems: true
  /users/registries/{gitRegistry}/organizations/{organization}:
    get:
      tags:
      - "users"
      summary: "See OpenApi for details"
      description: ""
      operationId: "getUserOrganizationRepositories"
      produces:
      - "application/json"
      parameters:
      - name: "gitRegistry"
        in: "path"
        required: true
        type: "string"
        enum:
        - "dockstore.org"
        - "github.com"
        - "bitbucket.org"
        - "gitlab.com"
      - name: "organization"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Repository"
  /users/services/sync:
    post:
      tags:
      - "users"
      summary: "Syncs service data with Git accounts."
      description: "Currently only works with GitHub"
      operationId: "syncUserServices"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Workflow"
      security:
      - BEARER: []
  /users/services/{organizationName}/sync:
    post:
      tags:
      - "users"
      summary: "Syncs services with Git accounts for a specified organization."
      description: ""
      operationId: "syncUserServicesbyOrganization"
      produces:
      - "application/json"
      parameters:
      - name: "organizationName"
        in: "path"
        description: "Organization name"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Workflow"
      security:
      - BEARER: []
  /users/starredOrganizations:
    get:
      tags:
      - "users"
      summary: "Get the authenticated user's starred organizations."
      description: ""
      operationId: "getStarredOrganizations"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Organization"
      security:
      - BEARER: []
  /users/starredTools:
    get:
      tags:
      - "users"
      summary: "Get the authenticated user's starred tools."
      description: ""
      operationId: "getStarredTools"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Entry"
      security:
      - BEARER: []
  /users/starredWorkflows:
    get:
      tags:
      - "users"
      summary: "Get the authenticated user's starred workflows."
      description: ""
      operationId: "getStarredWorkflows"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Entry"
      security:
      - BEARER: []
  /users/updateUserMetadata:
    get:
      tags:
      - "users"
      summary: "Update metadata of all users."
      description: "Admin only."
      operationId: "updateUserMetadata"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
      security:
      - BEARER: []
  /users/user:
    get:
      tags:
      - "users"
      summary: "Get the logged-in user."
      description: ""
      operationId: "getUser"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
      security:
      - BEARER: []
    delete:
      tags:
      - "users"
      summary: "Delete user if possible."
      description: ""
      operationId: "selfDestruct"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "boolean"
      security:
      - BEARER: []
  /users/user/changeUsername:
    post:
      tags:
      - "users"
      summary: "Change username if possible."
      description: ""
      operationId: "changeUsername"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "Username to change to"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
      security:
      - BEARER: []
  /users/user/extended:
    get:
      tags:
      - "users"
      summary: "Get additional information about the authenticated user."
      description: ""
      operationId: "getExtendedUserData"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ExtendedUserData"
      security:
      - BEARER: []
  /users/user/memberships:
    get:
      tags:
      - "users"
      summary: "Get the logged-in user's memberships."
      description: ""
      operationId: "getUserMemberships"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/OrganizationUser"
            uniqueItems: true
      security:
      - BEARER: []
  /users/user/updateUserMetadata:
    get:
      tags:
      - "users"
      summary: "Update metadata for logged in user."
      description: ""
      operationId: "updateLoggedInUserMetadata"
      produces:
      - "application/json"
      parameters:
      - name: "source"
        in: "query"
        description: "Token source"
        required: false
        type: "string"
        enum:
        - "google.com"
        - "github.com"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
      security:
      - BEARER: []
  /users/user/{userId}:
    delete:
      tags:
      - "users"
      summary: "Terminate user if possible."
      description: ""
      operationId: "terminateUser"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "User to terminate"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "boolean"
      security:
      - BEARER: []
  /users/user/{userId}/limits:
    get:
      tags:
      - "users"
      summary: "Returns the specified user's limits. ADMIN or CURATOR only"
      description: ""
      operationId: "getUserLimits"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "User ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Limits"
      security:
      - BEARER: []
    put:
      tags:
      - "users"
      summary: "Update the specified user's limits. ADMIN or CURATOR only"
      description: ""
      operationId: "setUserLimits"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "User ID"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Limits to set for a user"
        required: true
        schema:
          $ref: "#/definitions/Limits"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Limits"
      security:
      - BEARER: []
  /users/username/{username}:
    get:
      tags:
      - "users"
      summary: "Get a user by username."
      description: ""
      operationId: "listUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "Username of user to return"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
      security:
      - BEARER: []
  /users/users/entries:
    get:
      tags:
      - "users"
      summary: "See OpenApi for details"
      description: ""
      operationId: "getUserEntries"
      produces:
      - "application/json"
      parameters:
      - name: "count"
        in: "query"
        required: false
        type: "integer"
        format: "int32"
      - name: "filter"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/EntryUpdateTime"
  /users/users/organizations:
    get:
      tags:
      - "users"
      summary: "See OpenApi for details"
      description: ""
      operationId: "getUserDockstoreOrganizations"
      produces:
      - "application/json"
      parameters:
      - name: "count"
        in: "query"
        required: false
        type: "integer"
        format: "int32"
      - name: "filter"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/OrganizationUpdateTime"
  /users/{userId}:
    get:
      tags:
      - "users"
      summary: "Get user by id."
      description: ""
      operationId: "getSpecificUser"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "User to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
      security:
      - BEARER: []
  /users/{userId}/containers:
    get:
      tags:
      - "users"
      summary: "List all tools owned by the authenticated user."
      description: ""
      operationId: "userContainers"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "User ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/DockstoreTool"
      security:
      - BEARER: []
  /users/{userId}/containers/published:
    get:
      tags:
      - "users"
      summary: "List all published tools from a user."
      description: ""
      operationId: "userPublishedContainers"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "User ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/DockstoreTool"
      security:
      - BEARER: []
  /users/{userId}/containers/refresh:
    get:
      tags:
      - "users"
      summary: "Refresh all tools owned by the authenticated user."
      description: ""
      operationId: "refresh"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "User ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/DockstoreTool"
      security:
      - BEARER: []
  /users/{userId}/containers/{organization}/refresh:
    get:
      tags:
      - "users"
      summary: "Refresh all tools owned by the authenticated user with specified organization."
      description: ""
      operationId: "refreshToolsByOrganization"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "User ID"
        required: true
        type: "integer"
        format: "int64"
      - name: "organization"
        in: "path"
        description: "Organization"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/DockstoreTool"
      security:
      - BEARER: []
  /users/{userId}/services:
    get:
      tags:
      - "users"
      summary: "List all services owned by the authenticated user."
      description: ""
      operationId: "userServices"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "User ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Workflow"
      security:
      - BEARER: []
  /users/{userId}/tokens:
    get:
      tags:
      - "users"
      summary: "Get tokens with user id."
      description: ""
      operationId: "getUserTokens"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "User to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Token"
      security:
      - BEARER: []
  /users/{userId}/tokens/dockstore:
    get:
      tags:
      - "users"
      summary: "Get Dockstore tokens with user id."
      description: ""
      operationId: "getDockstoreUserTokens"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "User to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Token"
      security:
      - BEARER: []
  /users/{userId}/tokens/github.com:
    get:
      tags:
      - "users"
      summary: "Get Github tokens with user id."
      description: ""
      operationId: "getGithubUserTokens"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "User to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Token"
      security:
      - BEARER: []
  /users/{userId}/tokens/gitlab.com:
    get:
      tags:
      - "users"
      summary: "Get Gitlab tokens with user id."
      description: ""
      operationId: "getGitlabUserTokens"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "User to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Token"
      security:
      - BEARER: []
  /users/{userId}/tokens/quay.io:
    get:
      tags:
      - "users"
      summary: "Get Quay tokens with user id."
      description: ""
      operationId: "getQuayUserTokens"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "User to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Token"
      security:
      - BEARER: []
  /users/{userId}/workflows:
    get:
      tags:
      - "users"
      summary: "List all workflows owned by the authenticated user."
      description: ""
      operationId: "userWorkflows"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "User ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Workflow"
      security:
      - BEARER: []
  /users/{userId}/workflows/published:
    get:
      tags:
      - "users"
      summary: "List all published workflows from a user."
      description: ""
      operationId: "userPublishedWorkflows"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "User ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Workflow"
      security:
      - BEARER: []
  /users/{userId}/workflows/refresh:
    get:
      tags:
      - "users"
      summary: "Refresh all workflows owned by the authenticated user."
      description: ""
      operationId: "refreshWorkflows"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "User ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Workflow"
      security:
      - BEARER: []
  /users/{userId}/workflows/{organization}/refresh:
    get:
      tags:
      - "users"
      summary: "Refresh all workflows owned by the authenticated user with specified\
        \ organization."
      description: ""
      operationId: "refreshWorkflowsByOrganization"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "User ID"
        required: true
        type: "integer"
        format: "int64"
      - name: "organization"
        in: "path"
        description: "Organization"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Workflow"
      security:
      - BEARER: []
  /workflows/hostedEntry:
    post:
      tags:
      - "hosted"
      summary: "Create a hosted workflow."
      description: ""
      operationId: "createHostedWorkflow"
      produces:
      - "application/json"
      parameters:
      - name: "registry"
        in: "query"
        description: "The Docker registry (Tools only)"
        required: false
        type: "string"
      - name: "name"
        in: "query"
        description: "The repository name"
        required: true
        type: "string"
      - name: "descriptorType"
        in: "query"
        description: "The descriptor type (Workflows only)"
        required: false
        type: "string"
      - name: "namespace"
        in: "query"
        description: "The Docker namespace (Tools only)"
        required: false
        type: "string"
      - name: "entryName"
        in: "query"
        description: "Optional entry name (Tools only)"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Workflow"
      security:
      - BEARER: []
  /workflows/hostedEntry/{entryId}:
    post:
      tags:
      - "hosted"
      summary: "Creates a new revision of a hosted workflow from a zip"
      description: ""
      operationId: "addZip"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "entryId"
        in: "path"
        description: "hosted entry ID"
        required: true
        type: "integer"
        format: "int64"
      - name: "file"
        in: "formData"
        required: false
        type: "file"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Workflow"
      security:
      - BEARER: []
    delete:
      tags:
      - "hosted"
      summary: "Delete a revision of a hosted workflow"
      description: ""
      operationId: "deleteHostedWorkflowVersion"
      produces:
      - "application/json"
      parameters:
      - name: "entryId"
        in: "path"
        description: "Entry to modify."
        required: true
        type: "integer"
        format: "int64"
      - name: "version"
        in: "query"
        description: "version"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Workflow"
      security:
      - BEARER: []
    patch:
      tags:
      - "hosted"
      summary: "Non-idempotent operation for creating new revisions of hosted workflows"
      description: ""
      operationId: "editHostedWorkflow"
      produces:
      - "application/json"
      parameters:
      - name: "entryId"
        in: "path"
        description: "Entry to modify."
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Set of updated sourcefiles, add files by adding new files with\
          \ unknown paths, delete files by including them with emptied content"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/SourceFile"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Workflow"
      security:
      - BEARER: []
  /workflows/manualRegister:
    post:
      tags:
      - "workflows"
      summary: "Manually register a workflow."
      description: "Manually register workflow (public or private)."
      operationId: "manualRegister"
      produces:
      - "application/json"
      parameters:
      - name: "workflowRegistry"
        in: "query"
        description: "Workflow registry"
        required: true
        type: "string"
      - name: "workflowPath"
        in: "query"
        description: "Workflow repository"
        required: true
        type: "string"
      - name: "defaultWorkflowPath"
        in: "query"
        description: "Workflow container new descriptor path (CWL or WDL) and/or name"
        required: true
        type: "string"
      - name: "workflowName"
        in: "query"
        description: "Workflow name, set to empty if none required"
        required: true
        type: "string"
      - name: "descriptorType"
        in: "query"
        description: "Descriptor type"
        required: true
        type: "string"
      - name: "defaultTestParameterFilePath"
        in: "query"
        description: "Default test parameter file path"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Workflow"
      security:
      - BEARER: []
  /workflows/organization/{organization}/published:
    get:
      tags:
      - "workflows"
      summary: "List all published workflows of an organization."
      description: "NO authentication"
      operationId: "getPublishedWorkflowsByOrganization"
      produces:
      - "application/json"
      parameters:
      - name: "organization"
        in: "path"
        description: "organization"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Workflow"
  /workflows/path/entry/{repository}:
    get:
      tags:
      - "workflows"
      summary: "Get an entry by path."
      description: "Requires full path (including entry name if applicable)."
      operationId: "getEntryByPath"
      produces:
      - "application/json"
      parameters:
      - name: "repository"
        in: "path"
        description: "repository path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Entry"
      security:
      - BEARER: []
  /workflows/path/entry/{repository}/published:
    get:
      tags:
      - "workflows"
      summary: "Get a published entry by path."
      description: "Requires full path (including entry name if applicable)."
      operationId: "getPublishedEntryByPath"
      produces:
      - "application/json"
      parameters:
      - name: "repository"
        in: "path"
        description: "repository path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Entry"
  /workflows/path/service:
    post:
      tags:
      - "workflows"
      summary: "Create a service for the given repository (ex. dockstore/dockstore-ui2)."
      description: "To be called by a lambda function. Error code 418 is returned\
        \ to tell lambda not to retry."
      operationId: "addService"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "repository"
        in: "formData"
        description: "Repository path"
        required: true
        type: "string"
      - name: "username"
        in: "formData"
        description: "Name of user on GitHub"
        required: true
        type: "string"
      - name: "installationId"
        in: "formData"
        description: "GitHub installation ID"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Workflow"
      security:
      - BEARER: []
  /workflows/path/service/upsertVersion:
    post:
      tags:
      - "workflows"
      summary: "Add or update a service version for a given GitHub tag for a service\
        \ with the given repository (ex. dockstore/dockstore-ui2)."
      description: "To be called by a lambda function. Error code 418 is returned\
        \ to tell lambda not to retry."
      operationId: "upsertServiceVersion"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "repository"
        in: "formData"
        description: "Repository path"
        required: true
        type: "string"
      - name: "username"
        in: "formData"
        description: "Name of user on GitHub"
        required: true
        type: "string"
      - name: "gitReference"
        in: "formData"
        description: "Git reference for new GitHub tag"
        required: true
        type: "string"
      - name: "installationId"
        in: "formData"
        description: "GitHub installation ID"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Workflow"
      security:
      - BEARER: []
  /workflows/path/workflow/{repository}:
    get:
      tags:
      - "workflows"
      summary: "Get a workflow by path."
      description: "Requires full path (including workflow name if applicable)."
      operationId: "getWorkflowByPath"
      produces:
      - "application/json"
      parameters:
      - name: "repository"
        in: "path"
        description: "repository path"
        required: true
        type: "string"
      - name: "include"
        in: "query"
        description: "Comma-delimited list of fields to include: validations, aliases"
        required: false
        type: "string"
      - name: "services"
        in: "query"
        description: "services"
        required: false
        type: "boolean"
        default: false
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Workflow"
      security:
      - BEARER: []
  /workflows/path/workflow/{repository}/actions:
    get:
      tags:
      - "workflows"
      summary: "Gets all actions a user can perform on a workflow."
      description: ""
      operationId: "getWorkflowActions"
      produces:
      - "application/json"
      parameters:
      - name: "repository"
        in: "path"
        description: "repository path"
        required: true
        type: "string"
      - name: "services"
        in: "query"
        description: "services"
        required: false
        type: "boolean"
        default: false
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "string"
              enum:
              - "WRITE"
              - "READ"
              - "DELETE"
              - "SHARE"
      security:
      - BEARER: []
  /workflows/path/workflow/{repository}/permissions:
    get:
      tags:
      - "workflows"
      summary: "Get all permissions for a workflow."
      description: "The user must be the workflow owner."
      operationId: "getWorkflowPermissions"
      produces:
      - "application/json"
      parameters:
      - name: "repository"
        in: "path"
        description: "repository path"
        required: true
        type: "string"
      - name: "services"
        in: "query"
        description: "services"
        required: false
        type: "boolean"
        default: false
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Permission"
      security:
      - BEARER: []
    delete:
      tags:
      - "workflows"
      summary: "Remove the specified user role for a workflow."
      description: "The user must be the workflow owner."
      operationId: "removeWorkflowRole"
      produces:
      - "application/json"
      parameters:
      - name: "repository"
        in: "path"
        description: "repository path"
        required: true
        type: "string"
      - name: "email"
        in: "query"
        description: "user email"
        required: true
        type: "string"
      - name: "role"
        in: "query"
        description: "role"
        required: true
        type: "string"
        enum:
        - "OWNER"
        - "WRITER"
        - "READER"
      - name: "services"
        in: "query"
        description: "services"
        required: false
        type: "boolean"
        default: false
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Permission"
      security:
      - BEARER: []
    patch:
      tags:
      - "workflows"
      summary: "Set the specified permission for a user on a workflow."
      description: "The user must be the workflow owner. Currently only supported\
        \ on hosted workflows."
      operationId: "addWorkflowPermission"
      produces:
      - "application/json"
      parameters:
      - name: "repository"
        in: "path"
        description: "repository path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "user permission"
        required: true
        schema:
          $ref: "#/definitions/Permission"
      - name: "services"
        in: "query"
        description: "services"
        required: false
        type: "boolean"
        default: false
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Permission"
      security:
      - BEARER: []
  /workflows/path/workflow/{repository}/published:
    get:
      tags:
      - "workflows"
      summary: "Get a published workflow by path"
      description: "Does not require workflow name."
      operationId: "getPublishedWorkflowByPath"
      produces:
      - "application/json"
      parameters:
      - name: "repository"
        in: "path"
        description: "repository path"
        required: true
        type: "string"
      - name: "include"
        in: "query"
        description: "Comma-delimited list of fields to include: validations, aliases"
        required: false
        type: "string"
      - name: "services"
        in: "query"
        description: "services"
        required: false
        type: "boolean"
        default: false
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Workflow"
  /workflows/path/workflow/{repository}/upsertVersion:
    put:
      tags:
      - "workflows"
      summary: "Add or update a workflow version for a given GitHub tag to all workflows\
        \ associated with the given repository (ex. dockstore/dockstore-ui2)."
      description: "To be called by a lambda function."
      operationId: "upsertVersions"
      produces:
      - "application/json"
      parameters:
      - name: "repository"
        in: "path"
        description: "repository path"
        required: true
        type: "string"
      - name: "gitReference"
        in: "query"
        description: "Git reference for new GitHub tag"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "This is here to appease Swagger. It requires PUT methods to\
          \ have a body, even if it is empty. Please leave it empty."
        required: false
        schema:
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Workflow"
      security:
      - BEARER: []
  /workflows/path/{repository}:
    get:
      tags:
      - "workflows"
      summary: "Get a list of workflows by path."
      description: "Does not require workflow name."
      operationId: "getAllWorkflowByPath"
      produces:
      - "application/json"
      parameters:
      - name: "repository"
        in: "path"
        description: "repository path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Workflow"
      security:
      - BEARER: []
  /workflows/published:
    get:
      tags:
      - "workflows"
      summary: "List all published workflows."
      description: "NO authentication"
      operationId: "allPublishedWorkflows"
      produces:
      - "application/json"
      parameters:
      - name: "offset"
        in: "query"
        description: "Start index of paging. Pagination results can be based on numbers\
          \ or other values chosen by the registry implementor (for example, SHA values).\
          \ If this exceeds the current result set return an empty set.  If not specified\
          \ in the request, this will start at the beginning of the results."
        required: false
        type: "string"
      - name: "limit"
        in: "query"
        description: "Amount of records to return in a given page, limited to 100"
        required: false
        type: "integer"
        default: 100
        maximum: 100
        minimum: 1
        format: "int32"
      - name: "filter"
        in: "query"
        description: "Filter, this is a search string that filters the results."
        required: false
        type: "string"
      - name: "sortCol"
        in: "query"
        description: "Sort column"
        required: false
        type: "string"
        default: "stars"
      - name: "sortOrder"
        in: "query"
        description: "Sort order"
        required: false
        type: "string"
        default: "desc"
        enum:
        - "asc"
        - "desc"
      - name: "services"
        in: "query"
        description: "services"
        required: false
        type: "boolean"
        default: false
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Workflow"
  /workflows/published/{workflowId}:
    get:
      tags:
      - "workflows"
      summary: "Get a published workflow."
      description: "Hidden versions will not be visible. NO authentication"
      operationId: "getPublishedWorkflow"
      produces:
      - "application/json"
      parameters:
      - name: "workflowId"
        in: "path"
        description: "Workflow ID"
        required: true
        type: "integer"
        format: "int64"
      - name: "include"
        in: "query"
        description: "Comma-delimited list of fields to include: validations, aliases"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Workflow"
  /workflows/registries/{gitRegistry}/organizations/{organization}/repositories/{repositoryName}:
    post:
      tags:
      - "workflows"
      summary: "See OpenApi for details"
      description: ""
      operationId: "addWorkflow"
      produces:
      - "application/json"
      parameters:
      - name: "gitRegistry"
        in: "path"
        required: true
        type: "string"
        enum:
        - "dockstore.org"
        - "github.com"
        - "bitbucket.org"
        - "gitlab.com"
      - name: "organization"
        in: "path"
        required: true
        type: "string"
      - name: "repositoryName"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/BioWorkflow"
    delete:
      tags:
      - "workflows"
      summary: "See OpenApi for details"
      description: ""
      operationId: "deleteWorkflow"
      produces:
      - "application/json"
      parameters:
      - name: "gitRegistry"
        in: "path"
        required: true
        type: "string"
        enum:
        - "dockstore.org"
        - "github.com"
        - "bitbucket.org"
        - "gitlab.com"
      - name: "organization"
        in: "path"
        required: true
        type: "string"
      - name: "repositoryName"
        in: "path"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
  /workflows/shared:
    get:
      tags:
      - "workflows"
      summary: "Retrieve all workflows shared with user."
      description: ""
      operationId: "sharedWorkflows"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/SharedWorkflows"
      security:
      - BEARER: []
  /workflows/{alias}/aliases:
    get:
      tags:
      - "workflows"
      summary: "Retrieves a workflow by alias."
      description: "Does not require authentication for published workflows, authentication\
        \ can be provided for restricted workflows"
      operationId: "getWorkflowByAlias"
      produces:
      - "application/json"
      parameters:
      - name: "alias"
        in: "path"
        description: "Alias"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Workflow"
      security:
      - BEARER: []
  /workflows/{entryId}/registerCheckerWorkflow/{descriptorType}:
    post:
      tags:
      - "workflows"
      summary: "Register a checker workflow and associates it with the given tool/workflow."
      description: ""
      operationId: "registerCheckerWorkflow"
      produces:
      - "application/json"
      parameters:
      - name: "checkerWorkflowPath"
        in: "query"
        description: "Path of the main descriptor of the checker workflow (located\
          \ in associated tool/workflow repository)"
        required: true
        type: "string"
      - name: "testParameterPath"
        in: "query"
        description: "Default path to test parameter files for the checker workflow.\
          \ If not specified will use that of the entry."
        required: false
        type: "string"
      - name: "entryId"
        in: "path"
        description: "Entry Id of parent tool/workflow."
        required: true
        type: "integer"
        format: "int64"
      - name: "descriptorType"
        in: "path"
        description: "Descriptor type of the workflow, either cwl or wdl."
        required: true
        type: "string"
        enum:
        - "cwl"
        - "wdl"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Entry"
      security:
      - BEARER: []
  /workflows/{workflowId}:
    get:
      tags:
      - "workflows"
      summary: "Retrieve a workflow"
      description: "This is one of the few endpoints that returns the user object\
        \ with populated properties (minus the userProfiles property)"
      operationId: "getWorkflow"
      produces:
      - "application/json"
      parameters:
      - name: "workflowId"
        in: "path"
        description: "workflow ID"
        required: true
        type: "integer"
        format: "int64"
      - name: "include"
        in: "query"
        description: "Comma-delimited list of fields to include: validations, aliases"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Workflow"
      security:
      - BEARER: []
    put:
      tags:
      - "workflows"
      summary: "Update the workflow with the given workflow."
      description: "Updates descriptor type (if stub), default workflow path, default\
        \ file path, and default version"
      operationId: "updateWorkflow"
      produces:
      - "application/json"
      parameters:
      - name: "workflowId"
        in: "path"
        description: "Workflow to modify."
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Workflow with updated information"
        required: true
        schema:
          $ref: "#/definitions/Workflow"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Workflow"
      security:
      - BEARER: []
  /workflows/{workflowId}/dag/{workflowVersionId}:
    get:
      tags:
      - "workflows"
      summary: "Get the DAG for a given workflow version."
      description: "Does not require authentication for published workflows, authentication\
        \ can be provided for restricted workflows"
      operationId: "getWorkflowDag"
      produces:
      - "application/json"
      parameters:
      - name: "workflowId"
        in: "path"
        description: "workflowId"
        required: true
        type: "integer"
        format: "int64"
      - name: "workflowVersionId"
        in: "path"
        description: "workflowVersionId"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
      security:
      - BEARER: []
  /workflows/{workflowId}/defaultVersion:
    put:
      tags:
      - "workflows"
      summary: "Update the default version of a workflow."
      description: ""
      operationId: "updateWorkflowDefaultVersion"
      produces:
      - "application/json"
      parameters:
      - name: "workflowId"
        in: "path"
        description: "Workflow to modify."
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Version name to set as default"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Workflow"
      security:
      - BEARER: []
  /workflows/{workflowId}/descriptor/{relative-path}:
    get:
      tags:
      - "workflows"
      summary: "Get the corresponding descriptor file from source control."
      description: "Does not require authentication for published workflows, authentication\
        \ can be provided for restricted workflows"
      operationId: "secondaryDescriptorPath"
      produces:
      - "application/json"
      parameters:
      - name: "workflowId"
        in: "path"
        description: "Workflow id"
        required: true
        type: "integer"
        format: "int64"
      - name: "tag"
        in: "query"
        required: false
        type: "string"
      - name: "relative-path"
        in: "path"
        required: true
        type: "string"
      - name: "language"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/SourceFile"
      security:
      - BEARER: []
  /workflows/{workflowId}/labels:
    put:
      tags:
      - "workflows"
      summary: "Update the labels linked to a workflow."
      description: "Labels are alphanumerical (case-insensitive and may contain internal\
        \ hyphens), given in a comma-delimited list."
      operationId: "updateLabels"
      produces:
      - "application/json"
      parameters:
      - name: "workflowId"
        in: "path"
        description: "Tool to modify."
        required: true
        type: "integer"
        format: "int64"
      - name: "labels"
        in: "query"
        description: "Comma-delimited list of labels."
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "This is here to appease Swagger. It requires PUT methods to\
          \ have a body, even if it is empty. Please leave it empty."
        required: false
        schema:
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Workflow"
      security:
      - BEARER: []
  /workflows/{workflowId}/primaryDescriptor:
    get:
      tags:
      - "workflows"
      summary: "Get the primary descriptor file."
      description: "Does not require authentication for published workflows, authentication\
        \ can be provided for restricted workflows"
      operationId: "primaryDescriptor"
      produces:
      - "application/json"
      parameters:
      - name: "workflowId"
        in: "path"
        description: "Workflow id"
        required: true
        type: "integer"
        format: "int64"
      - name: "tag"
        in: "query"
        required: false
        type: "string"
      - name: "language"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/SourceFile"
      security:
      - BEARER: []
  /workflows/{workflowId}/publish:
    post:
      tags:
      - "workflows"
      summary: "Publish or unpublish a workflow."
      description: "Publish/publish a workflow (public or private)."
      operationId: "publish"
      produces:
      - "application/json"
      parameters:
      - name: "workflowId"
        in: "path"
        description: "Workflow id to publish/unpublish"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "PublishRequest to refresh the list of repos for a user"
        required: true
        schema:
          $ref: "#/definitions/PublishRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Workflow"
      security:
      - BEARER: []
  /workflows/{workflowId}/refresh:
    get:
      tags:
      - "workflows"
      summary: "Refresh one particular workflow."
      description: "Full refresh"
      operationId: "refresh"
      produces:
      - "application/json"
      parameters:
      - name: "workflowId"
        in: "path"
        description: "workflow ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Workflow"
      security:
      - BEARER: []
  /workflows/{workflowId}/requestDOI/{workflowVersionId}:
    put:
      tags:
      - "workflows"
      summary: "Request a DOI for this version of a workflow."
      description: ""
      operationId: "requestDOIForWorkflowVersion"
      produces:
      - "application/json"
      parameters:
      - name: "workflowId"
        in: "path"
        description: "Workflow to modify."
        required: true
        type: "integer"
        format: "int64"
      - name: "workflowVersionId"
        in: "path"
        description: "workflowVersionId"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "This is here to appease Swagger. It requires PUT methods to\
          \ have a body, even if it is empty. Please leave it empty."
        required: false
        schema:
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/WorkflowVersion"
      security:
      - BEARER: []
  /workflows/{workflowId}/resetVersionPaths:
    put:
      tags:
      - "workflows"
      summary: "Reset the workflow paths."
      description: "Resets the workflow paths of all versions to match the default\
        \ workflow path from the workflow object passed."
      operationId: "updateWorkflowPath"
      produces:
      - "application/json"
      parameters:
      - name: "workflowId"
        in: "path"
        description: "Workflow to modify."
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Workflow with updated information"
        required: true
        schema:
          $ref: "#/definitions/Workflow"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Workflow"
      security:
      - BEARER: []
  /workflows/{workflowId}/restub:
    get:
      tags:
      - "workflows"
      summary: "Restub a workflow"
      description: "Restubs a full, unpublished workflow."
      operationId: "restub"
      produces:
      - "application/json"
      parameters:
      - name: "workflowId"
        in: "path"
        description: "workflow ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Workflow"
      security:
      - BEARER: []
  /workflows/{workflowId}/secondaryDescriptors:
    get:
      tags:
      - "workflows"
      summary: "Get the corresponding descriptor documents from source control."
      description: "Does not require authentication for published workflows, authentication\
        \ can be provided for restricted workflows"
      operationId: "secondaryDescriptors"
      produces:
      - "application/json"
      parameters:
      - name: "workflowId"
        in: "path"
        description: "Workflow id"
        required: true
        type: "integer"
        format: "int64"
      - name: "tag"
        in: "query"
        required: false
        type: "string"
      - name: "language"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/SourceFile"
      security:
      - BEARER: []
  /workflows/{workflowId}/star:
    put:
      tags:
      - "workflows"
      summary: "Star a workflow."
      description: ""
      operationId: "starEntry"
      produces:
      - "application/json"
      parameters:
      - name: "workflowId"
        in: "path"
        description: "Tool to star."
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "StarRequest to star a repo for a user"
        required: true
        schema:
          $ref: "#/definitions/StarRequest"
      responses:
        default:
          description: "successful operation"
      security:
      - BEARER: []
  /workflows/{workflowId}/starredUsers:
    get:
      tags:
      - "workflows"
      summary: "Returns list of users who starred the given workflow."
      description: ""
      operationId: "getStarredUsers"
      produces:
      - "application/json"
      parameters:
      - name: "workflowId"
        in: "path"
        description: "Workflow to grab starred users for."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
  /workflows/{workflowId}/testParameterFiles:
    get:
      tags:
      - "workflows"
      summary: "Get the corresponding test parameter files."
      description: "Does not require authentication for published workflows, authentication\
        \ can be provided for restricted workflows"
      operationId: "getTestParameterFiles"
      produces:
      - "application/json"
      parameters:
      - name: "workflowId"
        in: "path"
        description: "Workflow id"
        required: true
        type: "integer"
        format: "int64"
      - name: "version"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/SourceFile"
      security:
      - BEARER: []
    put:
      tags:
      - "workflows"
      summary: "Add test parameter files for a given version."
      description: ""
      operationId: "addTestParameterFiles"
      produces:
      - "application/json"
      parameters:
      - name: "workflowId"
        in: "path"
        description: "Workflow to modify."
        required: true
        type: "integer"
        format: "int64"
      - name: "testParameterPaths"
        in: "query"
        description: "List of paths."
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - in: "body"
        name: "body"
        description: "This is here to appease Swagger. It requires PUT methods to\
          \ have a body, even if it is empty. Please leave it empty."
        required: false
        schema:
          type: "string"
      - name: "version"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/SourceFile"
            uniqueItems: true
      security:
      - BEARER: []
    delete:
      tags:
      - "workflows"
      summary: "Delete test parameter files for a given version."
      description: ""
      operationId: "deleteTestParameterFiles"
      produces:
      - "application/json"
      parameters:
      - name: "workflowId"
        in: "path"
        description: "Workflow to modify."
        required: true
        type: "integer"
        format: "int64"
      - name: "testParameterPaths"
        in: "query"
        description: "List of paths."
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "version"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/SourceFile"
            uniqueItems: true
      security:
      - BEARER: []
  /workflows/{workflowId}/tools/{workflowVersionId}:
    get:
      tags:
      - "workflows"
      summary: "Get the Tools for a given workflow version."
      description: "Does not require authentication for published workflows, authentication\
        \ can be provided for restricted workflows"
      operationId: "getTableToolContent"
      produces:
      - "application/json"
      parameters:
      - name: "workflowId"
        in: "path"
        description: "workflowId"
        required: true
        type: "integer"
        format: "int64"
      - name: "workflowVersionId"
        in: "path"
        description: "workflowVersionId"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
      security:
      - BEARER: []
  /workflows/{workflowId}/unstar:
    delete:
      tags:
      - "workflows"
      summary: "Unstar a workflow."
      description: ""
      operationId: "unstarEntry"
      produces:
      - "application/json"
      parameters:
      - name: "workflowId"
        in: "path"
        description: "Workflow to unstar."
        required: true
        type: "integer"
        format: "int64"
      responses:
        default:
          description: "successful operation"
      security:
      - BEARER: []
      deprecated: true
  /workflows/{workflowId}/users:
    get:
      tags:
      - "workflows"
      summary: "Get users of a workflow."
      description: ""
      operationId: "getUsers"
      produces:
      - "application/json"
      parameters:
      - name: "workflowId"
        in: "path"
        description: "workflow ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
      security:
      - BEARER: []
  /workflows/{workflowId}/workflowVersions:
    put:
      tags:
      - "workflows"
      summary: "Update the workflow versions linked to a workflow."
      description: "Updates workflow path, reference, and hidden attributes."
      operationId: "updateWorkflowVersion"
      produces:
      - "application/json"
      parameters:
      - name: "workflowId"
        in: "path"
        description: "Workflow to modify."
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "List of modified workflow versions"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/WorkflowVersion"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/WorkflowVersion"
      security:
      - BEARER: []
  /workflows/{workflowId}/zip/{workflowVersionId}:
    get:
      tags:
      - "workflows"
      summary: "Download a ZIP file of a workflow and all associated files."
      description: ""
      operationId: "getWorkflowZip"
      produces:
      - "application/zip"
      parameters:
      - name: "workflowId"
        in: "path"
        description: "workflowId"
        required: true
        type: "integer"
        format: "int64"
      - name: "workflowVersionId"
        in: "path"
        description: "workflowVersionId"
        required: true
        type: "integer"
        format: "int64"
      responses:
        default:
          description: "successful operation"
      security:
      - BEARER: []
securityDefinitions:
  BEARER:
    type: "apiKey"
    name: "Authorization"
    in: "header"
definitions:
  Alias:
    type: "object"
    properties:
      content:
        type: "string"
  BioWorkflow:
    allOf:
    - $ref: "#/definitions/Workflow"
    - type: "object"
      properties:
        parent_id:
          type: "integer"
          format: "int64"
          readOnly: true
        is_checker:
          type: "boolean"
          position: 23
      description: "This describes one workflow in the dockstore"
  Checksum:
    type: "object"
    properties:
      checksum:
        type: "string"
        description: "String representation of the checksum value."
      type:
        type: "string"
        description: "The type of hash algorithm, e.g., SHA256"
    description: "This describes a checksum that is a associated with a tag or workflow\
      \ version's image."
  Collection:
    type: "object"
    required:
    - "name"
    properties:
      aliases:
        type: "object"
        description: "aliases can be used as an alternate unique id for collections"
        additionalProperties:
          $ref: "#/definitions/Alias"
      dbCreateDate:
        type: "string"
        format: "date-time"
      dbUpdateDate:
        type: "string"
        format: "date-time"
      entries:
        type: "array"
        uniqueItems: true
        items:
          $ref: "#/definitions/Entry"
      id:
        type: "integer"
        format: "int64"
        description: "Implementation specific ID for the collection in this web service"
      organizationID:
        type: "integer"
        format: "int64"
      organizationName:
        type: "string"
        description: "The name of the organization the collection belongs to"
        readOnly: true
      name:
        type: "string"
        example: "Alignment"
        position: 1
        description: "Name of the collection."
        minLength: 3
        maxLength: 39
        pattern: "[a-zA-Z][a-zA-Z\\d]*"
      description:
        type: "string"
        position: 2
        description: "Description of the collection"
      displayName:
        type: "string"
        position: 3
        description: "Display name for a collection (Ex. Recommended Alignment Algorithms).\
          \ Not used for links."
        minLength: 3
        maxLength: 50
        pattern: "[\\w ,_\\-&()']*"
      topic:
        type: "string"
        position: 4
        description: "Short description of the collection"
  CollectionOrganization:
    type: "object"
    properties:
      collectionDisplayName:
        type: "string"
      collectionId:
        type: "integer"
        format: "int64"
      collectionName:
        type: "string"
      organizationDisplayName:
        type: "string"
      organizationId:
        type: "integer"
        format: "int64"
      organizationName:
        type: "string"
  Config:
    type: "object"
    properties:
      bitBucketAuthUrl:
        type: "string"
      bitBucketClientId:
        type: "string"
      cwlVisualizerUri:
        type: "string"
      discourseUrl:
        type: "string"
      dnaNexusImportUrl:
        type: "string"
      dnaStackImportUrl:
        type: "string"
      documentationUrl:
        type: "string"
      featuredContentUrl:
        type: "string"
      gitHubAppInstallationUrl:
        type: "string"
      gitHubAuthUrl:
        type: "string"
      gitHubRedirectPath:
        type: "string"
      gitHubScope:
        type: "string"
      githubClientId:
        type: "string"
      gitlabAuthUrl:
        type: "string"
      gitlabClientId:
        type: "string"
      gitlabRedirectPath:
        type: "string"
      gitlabScope:
        type: "string"
      googleClientId:
        type: "string"
      googleScope:
        type: "string"
      quayIoAuthUrl:
        type: "string"
      quayIoClientId:
        type: "string"
      quayIoRedirectPath:
        type: "string"
      quayIoScope:
        type: "string"
      tagManagerId:
        type: "string"
      terraImportUrl:
        type: "string"
      zenodoAuthUrl:
        type: "string"
      zenodoClientId:
        type: "string"
      zenodoRedirectPath:
        type: "string"
      zenodoScope:
        type: "string"
    description: "Configuration information for UI clients of the Dockstore webservice."
  DescriptorLanguageBean:
    type: "object"
    properties:
      friendlyName:
        type: "string"
      value:
        type: "string"
  DockstoreTool:
    type: "object"
    required:
    - "defaultCWLTestParameterFile"
    - "defaultWDLTestParameterFile"
    - "default_cwl_path"
    - "default_dockerfile_path"
    - "default_wdl_path"
    - "gitUrl"
    - "mode"
    - "name"
    - "namespace"
    - "private_access"
    - "registry_string"
    properties:
      aliases:
        type: "object"
        description: "aliases can be used as an alternate unique id for entries"
        additionalProperties:
          $ref: "#/definitions/Alias"
      custom_docker_registry_path:
        type: "string"
        readOnly: true
      dbCreateDate:
        type: "string"
        format: "date-time"
      dbUpdateDate:
        type: "string"
        format: "date-time"
      has_checker:
        type: "boolean"
        readOnly: true
      id:
        type: "integer"
        format: "int64"
        description: "Implementation specific ID for the container in this web service"
      input_file_formats:
        type: "array"
        readOnly: true
        uniqueItems: true
        items:
          $ref: "#/definitions/FileFormat"
      last_modified_date:
        type: "string"
        format: "date-time"
        readOnly: true
      output_file_formats:
        type: "array"
        readOnly: true
        uniqueItems: true
        items:
          $ref: "#/definitions/FileFormat"
      tags:
        type: "array"
        uniqueItems: true
        items:
          $ref: "#/definitions/Tag"
      topicId:
        type: "integer"
        format: "int64"
        description: "The Id of the corresponding topic on Dockstore Discuss"
      author:
        type: "string"
        position: 1
        description: "This is the name of the author stated in the Dockstore.cwl"
      description:
        type: "string"
        position: 2
        description: "This is a human-readable description of this container and what\
          \ it is trying to accomplish, required GA4GH"
      labels:
        type: "array"
        position: 3
        description: "Labels (i.e. meta tags) for describing the purpose and contents\
          \ of containers"
        uniqueItems: true
        items:
          $ref: "#/definitions/Label"
      users:
        type: "array"
        position: 4
        description: "This indicates the users that have control over this entry,\
          \ dockstore specific"
        uniqueItems: true
        items:
          $ref: "#/definitions/User"
      starredUsers:
        type: "array"
        position: 5
        description: "This indicates the users that have starred this entry, dockstore\
          \ specific"
        uniqueItems: true
        items:
          $ref: "#/definitions/User"
      email:
        type: "string"
        position: 6
        description: "This is the email of the git organization"
      defaultVersion:
        type: "string"
        position: 7
        description: "This is the default version of the entry"
      is_published:
        type: "boolean"
        position: 8
        description: "Implementation specific visibility in this web service"
      last_modified:
        type: "integer"
        format: "int32"
        position: 9
        description: "Implementation specific timestamp for last modified. Tools->\
          \ For automated/manual builds: N/A. For hosted: Last time a file was updated/created\
          \ (new version created). Workflows-> For remote: When refresh is hit, last\
          \ time GitHub repo was changed. Hosted: Last time a new version was made."
      lastUpdated:
        type: "string"
        format: "date-time"
        position: 10
        description: "Implementation specific timestamp for last updated on webservice.\
          \ Tools-> For automated builds: last time tool/namespace was refreshed Dockstore,\
          \ tool info (like changing dockerfile path) updated, or default version\
          \ selected. For hosted tools: when you created the tool. Workflows-> For\
          \ remote: When refresh all is hit for first time. Hosted: Seems to be time\
          \ created."
      gitUrl:
        type: "string"
        position: 11
        description: "This is a link to the associated repo with a descriptor, required\
          \ GA4GH"
      checker_id:
        type: "integer"
        format: "int64"
        position: 12
        description: "The id of the associated checker workflow"
        readOnly: true
      conceptDoi:
        type: "string"
        position: 13
        description: "The Digital Object Identifier (DOI) representing all of the\
          \ versions of your workflow"
      mode:
        type: "string"
        position: 13
        description: "This indicates what mode this is in which informs how we do\
          \ things like refresh, dockstore specific"
        enum:
        - "AUTO_DETECT_QUAY_TAGS_AUTOMATED_BUILDS"
        - "AUTO_DETECT_QUAY_TAGS_WITH_MIXED"
        - "MANUAL_IMAGE_PATH"
        - "HOSTED"
      name:
        type: "string"
        position: 14
        description: "This is the name of the container, required: GA4GH"
      default_dockerfile_path:
        type: "string"
        position: 15
        description: "This indicates for the associated git repository, the default\
          \ path to the Dockerfile, required: GA4GH"
      default_cwl_path:
        type: "string"
        position: 16
        description: "This indicates for the associated git repository, the default\
          \ path to the CWL document, required: GA4GH"
      default_wdl_path:
        type: "string"
        position: 17
        description: "This indicates for the associated git repository, the default\
          \ path to the WDL document"
      defaultCWLTestParameterFile:
        type: "string"
        position: 18
        description: "This indicates for the associated git repository, the default\
          \ path to the CWL test parameter file"
      defaultWDLTestParameterFile:
        type: "string"
        position: 19
        description: "This indicates for the associated git repository, the default\
          \ path to the WDL test parameter file"
      tool_maintainer_email:
        type: "string"
        position: 20
        description: "The email address of the tool maintainer. Required for private\
          \ repositories"
      private_access:
        type: "boolean"
        position: 21
        description: "Is the docker image private or not."
      toolname:
        type: "string"
        position: 22
        description: "This is the tool name of the container, when not-present this\
          \ will function just like 0.1 dockstorewhen present, this can be used to\
          \ distinguish between two containers based on the same image, but associated\
          \ with different CWL and Dockerfile documents. i.e. two containers with\
          \ the same registry+namespace+name but different toolnames will be two different\
          \ entries in the dockstore registry/namespace/name/tool, different options\
          \ to edit tags, and only the same insofar as they would \"docker pull\"\
          \ the same image, required: GA4GH"
      namespace:
        type: "string"
        position: 23
        description: "This is a docker namespace for the container, required: GA4GH"
      registry_string:
        type: "string"
        position: 24
        description: "This is a specific docker provider like quay.io or dockerhub\
          \ or n/a?, required: GA4GH"
      lastBuild:
        type: "string"
        format: "date-time"
        position: 25
        description: "Implementation specific timestamp for last built. For automated\
          \ builds: When refresh is hit, the last time the tool was built gets stored\
          \ here. If tool was never built on quay.io, then last build will be null.\
          \ N/A for hosted/manual path tools"
      workflowVersions:
        type: "array"
        position: 26
        description: "Implementation specific tracking of valid build tags for the\
          \ docker container"
        uniqueItems: true
        items:
          $ref: "#/definitions/Tag"
      path:
        type: "string"
        position: 27
      descriptorType:
        type: "array"
        position: 28
        readOnly: true
        items:
          type: "string"
      tool_path:
        type: "string"
        position: 29
        readOnly: true
      registry:
        type: "string"
        position: 30
        enum:
        - "QUAY_IO"
        - "DOCKER_HUB"
        - "GITLAB"
        - "AMAZON_ECR"
        - "SEVEN_BRIDGES"
    description: "This describes one entry in the dockstore. Logically, this currently\
      \ means one tuple of registry (either quay or docker hub), organization, image\
      \ name, and toolname which can be\n * associated with CWL and Dockerfile documents"
  Entry:
    type: "object"
    required:
    - "gitUrl"
    properties:
      aliases:
        type: "object"
        description: "aliases can be used as an alternate unique id for entries"
        additionalProperties:
          $ref: "#/definitions/Alias"
      dbCreateDate:
        type: "string"
        format: "date-time"
      dbUpdateDate:
        type: "string"
        format: "date-time"
      has_checker:
        type: "boolean"
        readOnly: true
      id:
        type: "integer"
        format: "int64"
        description: "Implementation specific ID for the container in this web service"
      input_file_formats:
        type: "array"
        readOnly: true
        uniqueItems: true
        items:
          $ref: "#/definitions/FileFormat"
      last_modified_date:
        type: "string"
        format: "date-time"
        readOnly: true
      output_file_formats:
        type: "array"
        readOnly: true
        uniqueItems: true
        items:
          $ref: "#/definitions/FileFormat"
      topicId:
        type: "integer"
        format: "int64"
        description: "The Id of the corresponding topic on Dockstore Discuss"
      workflowVersions:
        type: "array"
        uniqueItems: true
        items:
          $ref: "#/definitions/Version"
      author:
        type: "string"
        position: 1
        description: "This is the name of the author stated in the Dockstore.cwl"
      description:
        type: "string"
        position: 2
        description: "This is a human-readable description of this container and what\
          \ it is trying to accomplish, required GA4GH"
      labels:
        type: "array"
        position: 3
        description: "Labels (i.e. meta tags) for describing the purpose and contents\
          \ of containers"
        uniqueItems: true
        items:
          $ref: "#/definitions/Label"
      users:
        type: "array"
        position: 4
        description: "This indicates the users that have control over this entry,\
          \ dockstore specific"
        uniqueItems: true
        items:
          $ref: "#/definitions/User"
      starredUsers:
        type: "array"
        position: 5
        description: "This indicates the users that have starred this entry, dockstore\
          \ specific"
        uniqueItems: true
        items:
          $ref: "#/definitions/User"
      email:
        type: "string"
        position: 6
        description: "This is the email of the git organization"
      defaultVersion:
        type: "string"
        position: 7
        description: "This is the default version of the entry"
      is_published:
        type: "boolean"
        position: 8
        description: "Implementation specific visibility in this web service"
      last_modified:
        type: "integer"
        format: "int32"
        position: 9
        description: "Implementation specific timestamp for last modified. Tools->\
          \ For automated/manual builds: N/A. For hosted: Last time a file was updated/created\
          \ (new version created). Workflows-> For remote: When refresh is hit, last\
          \ time GitHub repo was changed. Hosted: Last time a new version was made."
      lastUpdated:
        type: "string"
        format: "date-time"
        position: 10
        description: "Implementation specific timestamp for last updated on webservice.\
          \ Tools-> For automated builds: last time tool/namespace was refreshed Dockstore,\
          \ tool info (like changing dockerfile path) updated, or default version\
          \ selected. For hosted tools: when you created the tool. Workflows-> For\
          \ remote: When refresh all is hit for first time. Hosted: Seems to be time\
          \ created."
      gitUrl:
        type: "string"
        position: 11
        description: "This is a link to the associated repo with a descriptor, required\
          \ GA4GH"
      checker_id:
        type: "integer"
        format: "int64"
        position: 12
        description: "The id of the associated checker workflow"
        readOnly: true
      conceptDoi:
        type: "string"
        position: 13
        description: "The Digital Object Identifier (DOI) representing all of the\
          \ versions of your workflow"
  EntryUpdateTime:
    type: "object"
    properties:
      entryType:
        type: "string"
        enum:
        - "TOOL"
        - "WORKFLOW"
        - "SERVICE"
      lastUpdateDate:
        type: "string"
        format: "date-time"
      path:
        type: "string"
      prettyPath:
        type: "string"
  Error:
    type: "object"
    required:
    - "code"
    properties:
      code:
        type: "integer"
        format: "int32"
      message:
        type: "string"
  Event:
    type: "object"
    required:
    - "type"
    properties:
      dbCreateDate:
        type: "string"
        format: "date-time"
      dbUpdateDate:
        type: "string"
        format: "date-time"
      id:
        type: "integer"
        format: "int64"
        description: "Implementation specific ID for the event in this web service"
      user:
        position: 1
        description: "User that the event is acting on."
        $ref: "#/definitions/User"
      organization:
        position: 2
        description: "Organization that the event is acting on."
        $ref: "#/definitions/Organization"
      tool:
        position: 3
        description: "Tool that the event is acting on."
        $ref: "#/definitions/DockstoreTool"
      workflow:
        position: 4
        description: "Workflow that the event is acting on."
        $ref: "#/definitions/Workflow"
      collection:
        position: 5
        description: "Collection that the event is acting on."
        $ref: "#/definitions/Collection"
      initiatorUser:
        position: 6
        description: "User initiating the event."
        $ref: "#/definitions/User"
      type:
        type: "string"
        position: 7
        description: "The event type."
        enum:
        - "CREATE_ORG"
        - "DELETE_ORG"
        - "MODIFY_ORG"
        - "APPROVE_ORG"
        - "REJECT_ORG"
        - "REREQUEST_ORG"
        - "ADD_USER_TO_ORG"
        - "REMOVE_USER_FROM_ORG"
        - "MODIFY_USER_ROLE_ORG"
        - "APPROVE_ORG_INVITE"
        - "REJECT_ORG_INVITE"
        - "CREATE_COLLECTION"
        - "MODIFY_COLLECTION"
        - "REMOVE_FROM_COLLECTION"
        - "ADD_TO_COLLECTION"
        - "ADD_VERSION_TO_ENTRY"
      version:
        position: 8
        description: "Version associated with the event."
        $ref: "#/definitions/Version"
    description: "This describes events that occur on the Dockstore site."
  ExtendedUserData:
    type: "object"
    properties:
      canChangeUsername:
        type: "boolean"
        description: "Whether a user can change their username"
        readOnly: true
    description: "Contains expensive data for end users for the dockstore"
  FileFormat:
    type: "object"
    required:
    - "value"
    properties:
      value:
        type: "string"
        position: 1
        description: "String representation of the file format"
    description: "This describes an input or output file format that is associated\
      \ with an entry in the dockstore"
  FileWrapper:
    type: "object"
    properties:
      content:
        type: "string"
        description: "The content of the file itself. One of url or content is required."
      url:
        type: "string"
        description: "Optional url to the underlying content, should include version\
          \ information, and can include a git hash.  Note that this URL should resolve\
          \ to the raw unwrapped content that would otherwise be available in content.\
          \ One of url or content is required."
    description: "A file provides content for one of - A tool descriptor is a metadata\
      \ document that describes one or more tools. - A tool document that describes\
      \ how to test with one or more sample test JSON. - A containerfile is a document\
      \ that describes how to build a particular container image. Examples include\
      \ Dockerfiles for creating Docker images and Singularity recipes for Singularity\
      \ images "
  Image:
    type: "object"
    properties:
      checksums:
        type: "array"
        position: 1
        description: "Checksum(s) associated with this image"
        items:
          $ref: "#/definitions/Checksum"
      repository:
        type: "string"
        position: 2
        description: "Repository image belongs to"
      tag:
        type: "string"
        position: 3
        description: "Git tag"
      imageID:
        type: "string"
        position: 4
        description: "Docker ID of the image"
    description: "Image(s) associated with tags and workflow versions"
  Label:
    type: "object"
    required:
    - "value"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "Implementation specific ID for the container in this web service"
        readOnly: true
      value:
        type: "string"
        position: 1
        description: "String representation of the tag"
    description: "This describes a descriptive label that can be placed on an entry\
      \ in the dockstore"
  Limits:
    type: "object"
    properties:
      hostedEntryCountLimit:
        type: "integer"
        format: "int32"
      hostedEntryVersionLimit:
        type: "integer"
        format: "int32"
  Metadata:
    type: "object"
    required:
    - "api_version"
    - "version"
    properties:
      api_version:
        type: "string"
        description: "The version of the GA4GH tool-registry API supported by this\
          \ registry"
      country:
        type: "string"
        description: "A country code for the registry (ISO 3166-1 alpha-3)"
      friendly_name:
        type: "string"
        description: "A friendly name that can be used in addition to the hostname\
          \ to describe a registry"
      version:
        type: "string"
        description: "The version of this registry"
    description: "Describes this registry to better allow for mirroring and indexing."
  MetadataV1:
    type: "object"
    properties:
      api-version:
        type: "string"
      country:
        type: "string"
      friendly-name:
        type: "string"
      version:
        type: "string"
    description: "Describes this registry to better allow for mirroring and indexing."
  Notification:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "ID for the notification"
      message:
        type: "string"
        position: 1
        description: "Text content of the notification to be displayed"
        minLength: 0
        maxLength: 280
      expiration:
        type: "string"
        format: "date-time"
        position: 2
        description: "Timestamp at which the notification is expired"
      type:
        type: "string"
        position: 3
        description: "Type of notification, sitewide or newsbody"
        enum:
        - "SITEWIDE"
        - "NEWSBODY"
      priority:
        type: "string"
        position: 4
        description: "Priority level of the notification"
        enum:
        - "LOW"
        - "MEDIUM"
        - "CRITICAL"
      dbCreateDate:
        type: "string"
        format: "date-time"
        position: 5
        description: "Timestamp at which the notification was created"
      dbUpdateDate:
        type: "string"
        format: "date-time"
        position: 6
        description: "Timestamp at which the notification was last updated"
  Organization:
    type: "object"
    required:
    - "name"
    - "status"
    - "users"
    properties:
      aliases:
        type: "object"
        description: "aliases can be used as an alternate unique id for organizations"
        additionalProperties:
          $ref: "#/definitions/Alias"
      dbCreateDate:
        type: "string"
        format: "date-time"
      dbUpdateDate:
        type: "string"
        format: "date-time"
      id:
        type: "integer"
        format: "int64"
        description: "Implementation specific ID for the organization in this web\
          \ service"
      name:
        type: "string"
        example: "OICR"
        position: 1
        description: "Name of the organization (ex. OICR)"
        minLength: 3
        maxLength: 39
        pattern: "[a-zA-Z][a-zA-Z\\d]*"
      description:
        type: "string"
        position: 2
        description: "Description of the organization"
      link:
        type: "string"
        position: 3
        description: "Link to the organization website"
      location:
        type: "string"
        position: 4
        description: "Location of the organization"
      email:
        type: "string"
        position: 5
        description: "Contact email for the organization"
      status:
        type: "string"
        position: 6
        description: "Is the organization approved, pending, or rejected"
        enum:
        - "PENDING"
        - "REJECTED"
        - "APPROVED"
      users:
        type: "array"
        position: 7
        description: "Set of users in the organization"
        uniqueItems: true
        items:
          $ref: "#/definitions/OrganizationUser"
      topic:
        type: "string"
        position: 8
        description: "Short description of the organization"
      avatarUrl:
        type: "string"
        position: 9
        description: "Logo URL"
        pattern: "([^\\s]+)(?i)(\\.jpg|\\.jpeg|\\.png|\\.gif)"
      displayName:
        type: "string"
        position: 9
        description: "Display name for an organization (Ex. Ontario Institute for\
          \ Cancer Research). Not used for links."
        minLength: 3
        maxLength: 50
        pattern: "[\\w ,_\\-&()']*"
      starredUsers:
        type: "array"
        position: 10
        description: "This indicates the users that have starred this organization"
        uniqueItems: true
        items:
          $ref: "#/definitions/User"
  OrganizationUpdateTime:
    type: "object"
    properties:
      displayName:
        type: "string"
      lastUpdateDate:
        type: "string"
        format: "date-time"
      name:
        type: "string"
  OrganizationUser:
    type: "object"
    required:
    - "accepted"
    - "role"
    properties:
      accepted:
        type: "boolean"
        description: "Has the user accepted their membership."
      dbCreateDate:
        type: "string"
        format: "date-time"
      dbUpdateDate:
        type: "string"
        format: "date-time"
      id:
        $ref: "#/definitions/OrganizationUserId"
      organization:
        $ref: "#/definitions/Organization"
      role:
        type: "string"
        description: "The role of the user in the organization"
        enum:
        - "MAINTAINER"
        - "MEMBER"
      user:
        $ref: "#/definitions/User"
  OrganizationUserId:
    type: "object"
    properties:
      organizationId:
        type: "integer"
        format: "int64"
      userId:
        type: "integer"
        format: "int64"
  Permission:
    type: "object"
    properties:
      email:
        type: "string"
      role:
        type: "string"
        enum:
        - "OWNER"
        - "WRITER"
        - "READER"
  Profile:
    type: "object"
    properties:
      avatarURL:
        type: "string"
      bio:
        type: "string"
      company:
        type: "string"
      email:
        type: "string"
      location:
        type: "string"
      name:
        type: "string"
      username:
        type: "string"
  PublishRequest:
    type: "object"
    properties:
      publish:
        type: "boolean"
        readOnly: true
  RegistryBean:
    type: "object"
    properties:
      customDockerPath:
        type: "string"
      dockerPath:
        type: "string"
      enum:
        type: "string"
      friendlyName:
        type: "string"
      privateOnly:
        type: "string"
      url:
        type: "string"
  Repository:
    type: "object"
    properties:
      canDelete:
        type: "boolean"
      gitRegistry:
        type: "string"
        enum:
        - "dockstore.org"
        - "github.com"
        - "bitbucket.org"
        - "gitlab.com"
      organization:
        type: "string"
      path:
        type: "string"
      present:
        type: "boolean"
      repositoryName:
        type: "string"
  Service:
    allOf:
    - $ref: "#/definitions/Workflow"
    - type: "object"
      properties: {}
      description: "This describes one service in the dockstore as a special degenerate\
        \ case of a workflow"
  SharedWorkflows:
    type: "object"
    properties:
      role:
        type: "string"
        enum:
        - "OWNER"
        - "WRITER"
        - "READER"
      workflows:
        type: "array"
        items:
          $ref: "#/definitions/Workflow"
  SourceControlBean:
    type: "object"
    properties:
      friendlyName:
        type: "string"
      value:
        type: "string"
  SourceFile:
    type: "object"
    required:
    - "absolutePath"
    - "path"
    - "type"
    properties:
      frozen:
        type: "boolean"
        description: "When true, this version cannot be affected by refreshes to the\
          \ content or updates to its metadata"
      id:
        type: "integer"
        format: "int64"
        description: "Implementation specific ID for the source file in this web service"
      verifiedBySource:
        type: "object"
        description: "maps from platform to whether an entry successfully ran on it\
          \ using this test json"
        additionalProperties:
          $ref: "#/definitions/VerificationInformation"
      type:
        type: "string"
        position: 1
        description: "Enumerates the type of file"
        enum:
        - "DOCKSTORE_CWL"
        - "DOCKSTORE_WDL"
        - "DOCKERFILE"
        - "CWL_TEST_JSON"
        - "WDL_TEST_JSON"
        - "NEXTFLOW"
        - "NEXTFLOW_CONFIG"
        - "NEXTFLOW_TEST_PARAMS"
        - "DOCKSTORE_YML"
        - "DOCKSTORE_SERVICE_YML"
        - "DOCKSTORE_SERVICE_TEST_JSON"
        - "DOCKSTORE_SERVICE_OTHER"
        - "DOCKSTORE_GXFORMAT2"
        - "GXFORMAT2_TEST_FILE"
        - "DOCKSTORE_SWL"
        - "SWL_TEST_JSON"
      content:
        type: "string"
        position: 2
        description: "Cache for the contents of the target file"
      path:
        type: "string"
        position: 3
        description: "Path to sourcefile relative to its parent"
      absolutePath:
        type: "string"
        position: 4
        description: "Absolute path of sourcefile in git repo"
  StarRequest:
    type: "object"
    properties:
      star:
        type: "boolean"
  Tag:
    type: "object"
    required:
    - "name"
    - "reference"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "Implementation specific ID for the tag in this web service"
        readOnly: true
      reference:
        type: "string"
        position: 1
        description: "git commit/tag/branch"
      name:
        type: "string"
        position: 2
        description: "Implementation specific, can be a quay.io or docker hub tag\
          \ name"
      commitID:
        type: "string"
        position: 3
        description: "This is the commit id for the source control that the files\
          \ belong to"
      frozen:
        type: "boolean"
        position: 4
        description: "When true, this version cannot be affected by refreshes to the\
          \ content or updates to its metadata"
      referenceType:
        type: "string"
        position: 5
        description: "This indicates the type of git (or other source control) reference"
        enum:
        - "COMMIT"
        - "TAG"
        - "BRANCH"
        - "NOT_APPLICABLE"
        - "UNSET"
      sourceFiles:
        type: "array"
        position: 6
        description: "Cached files for each version. Includes Dockerfile and Descriptor\
          \ files"
        uniqueItems: true
        items:
          $ref: "#/definitions/SourceFile"
      valid:
        type: "boolean"
        position: 7
        description: "Implementation specific, whether this tag has valid files from\
          \ source code repo"
      dirtyBit:
        type: "boolean"
        position: 8
        description: "True if user has altered the tag"
      versionEditor:
        position: 9
        description: "Particularly for hosted workflows, this records who edited to\
          \ create a revision"
        $ref: "#/definitions/User"
      dbUpdateDate:
        type: "string"
        format: "date-time"
        position: 11
      input_file_formats:
        type: "array"
        position: 12
        description: "File formats for describing the input file formats of versions\
          \ (tag/workflowVersion)"
        uniqueItems: true
        items:
          $ref: "#/definitions/FileFormat"
      output_file_formats:
        type: "array"
        position: 13
        description: "File formats for describing the output file formats of versions\
          \ (tag/workflowVersion)"
        uniqueItems: true
        items:
          $ref: "#/definitions/FileFormat"
      validations:
        type: "array"
        position: 14
        description: "Cached validations for each version."
        uniqueItems: true
        items:
          $ref: "#/definitions/Validation"
      images:
        type: "array"
        position: 15
        description: "The images that belong to this version"
        uniqueItems: true
        items:
          $ref: "#/definitions/Image"
      verified:
        type: "boolean"
        position: 16
        description: "Whether this version has been verified or not"
      verifiedSource:
        type: "string"
        position: 17
        description: "Verified source for the version"
      hidden:
        type: "boolean"
        position: 18
        description: "Implementation specific, whether this row is visible to other\
          \ users aside from the owner"
      verifiedSources:
        type: "array"
        position: 18
        description: "Verified source for the version"
        items:
          type: "string"
      doiURL:
        type: "string"
        position: 19
        description: "This is a URL for the DOI for the version of the entry"
      image_id:
        type: "string"
        position: 19
      doiStatus:
        type: "string"
        position: 20
        description: "This indicates the DOI status"
        enum:
        - "NOT_REQUESTED"
        - "REQUESTED"
        - "CREATED"
      author:
        type: "string"
        position: 21
      description:
        type: "string"
        position: 22
      descriptionSource:
        type: "string"
        position: 23
        enum:
        - "README"
        - "DESCRIPTOR"
      email:
        type: "string"
        position: 24
      last_built:
        type: "string"
        format: "date-time"
        position: 101
        description: "For automated tools: The last time the container backing this\
          \ tool version was built. For hosted: N/A"
      size:
        type: "integer"
        format: "int64"
        position: 103
        description: "Size of the image"
      dockerfile_path:
        type: "string"
        position: 104
        description: "Path for the Dockerfile"
      cwl_path:
        type: "string"
        position: 105
        description: "Path for the CWL document"
      wdl_path:
        type: "string"
        position: 106
        description: "Path for the WDL document"
      automated:
        type: "boolean"
        position: 107
        description: "Implementation specific, indicates whether this is an automated\
          \ build on quay.io"
      workingDirectory:
        type: "string"
        position: 108
    description: "This describes one tag associated with a container."
  Token:
    type: "object"
    properties:
      dbCreateDate:
        type: "string"
        format: "date-time"
        readOnly: true
      dbUpdateDate:
        type: "string"
        format: "date-time"
        readOnly: true
      id:
        type: "integer"
        format: "int64"
        description: "Implementation specific ID for the token in this web service"
        readOnly: true
      tokenSource:
        type: "string"
        position: 1
        description: "Source website for this token"
      content:
        type: "string"
        position: 2
        description: "Contents of the access token"
      username:
        type: "string"
        position: 3
        description: "When an integrated service is not aware of the username, we\
          \ store it"
      refreshToken:
        type: "string"
        position: 4
      userId:
        type: "integer"
        format: "int64"
        position: 5
      token:
        type: "string"
        position: 6
        description: "Contents of the access token"
        readOnly: true
    description: "Access tokens for this web service and integrated services like\
      \ quay.io and github"
  Tool:
    type: "object"
    required:
    - "author"
    - "id"
    - "organization"
    - "toolclass"
    - "url"
    - "versions"
    properties:
      aliases:
        type: "array"
        description: "OPTIONAL A list of strings that can be used to identify this\
          \ tool. This can be used to expose alternative ids (such as GUIDs) for a\
          \ tool for registries. Can be used to match tools across registries."
        items:
          type: "string"
      author:
        type: "string"
        description: "Contact information for the author of this tool entry in the\
          \ registry. (More complex authorship information is handled by the descriptor)"
      checker_url:
        type: "string"
        description: "Optional url to the checker tool that will exit successfully\
          \ if this tool produced the expected result given test data."
      contains:
        type: "array"
        example: "\"https://bio.tools/tool/mytum.de/SNAP2/1\""
        description: "An array of IDs for the applications that are stored inside\
          \ this tool"
        items:
          type: "string"
      description:
        type: "string"
        description: "The description of the tool."
      has_checker:
        type: "boolean"
        description: "Whether this tool has a checker tool associated with it"
      id:
        type: "string"
        example: "123456"
        description: "A unique identifier of the tool, scoped to this registry"
      meta_version:
        type: "string"
        description: "The version of this tool in the registry. Iterates when fields\
          \ like the description, author, etc. are updated."
      organization:
        type: "string"
        description: "The organization that published the image."
      signed:
        type: "boolean"
        description: "Reports whether this tool has been signed."
      toolclass:
        $ref: "#/definitions/ToolClass"
      toolname:
        type: "string"
        description: "The name of the tool."
      url:
        type: "string"
        example: "http://agora.broadinstitute.org/tools/123456"
        description: "The URL for this tool in this registry"
      verified:
        type: "boolean"
        description: "Reports whether this tool has been verified by a specific organization\
          \ or individual"
      verified_source:
        type: "string"
        description: "Source of metadata that can support a verified tool, such as\
          \ an email or URL"
      versions:
        type: "array"
        description: "A list of versions for this tool"
        items:
          $ref: "#/definitions/ToolVersion"
    description: "A tool (or described tool) is defined as a tuple of a descriptor\
      \ file (which potentially consists of multiple files), a set of container images,\
      \ and a set of instructions for creating those images."
  ToolClass:
    type: "object"
    properties:
      description:
        type: "string"
        description: "A longer explanation of what this class is and what it can accomplish"
      id:
        type: "string"
        description: "The unique identifier for the class"
      name:
        type: "string"
        description: "A short friendly name for the class"
    description: "Describes a class (type) of tool allowing us to categorize workflows,\
      \ tasks, and maybe even other entities (such as services) separately"
  ToolDescriptor:
    type: "object"
    required:
    - "type"
    properties:
      descriptor:
        type: "string"
        description: "The descriptor that represents this version of the tool."
      type:
        type: "string"
        enum:
        - "CWL"
        - "WDL"
        - "NFL"
        - "SERVICE"
        - "GXFORMAT2"
      url:
        type: "string"
        example: "https://raw.githubusercontent.com/ICGC-TCGA-PanCancer/pcawg_delly_workflow/ea2a5db69bd20a42976838790bc29294df3af02b/delly_docker/Delly.cwl"
        description: "Optional url to the underlying tool descriptor, should include\
          \ version information, and can include a git hash"
    description: "A tool descriptor is a metadata document that describes one or more\
      \ tools."
  ToolDockerfile:
    type: "object"
    required:
    - "dockerfile"
    properties:
      dockerfile:
        type: "string"
        description: "The dockerfile content for this tool."
      url:
        type: "string"
        description: "Optional url to the dockerfile used to build this image, should\
          \ include version information, and can include a git hash  (e.g. https://raw.githubusercontent.com/ICGC-TCGA-PanCancer/pcawg_delly_workflow/c83478829802b4d36374870843821abe1b625a71/delly_docker/Dockerfile\
          \ )"
    description: "A tool dockerfile is a document that describes how to build a particular\
      \ Docker image."
  ToolFile:
    type: "object"
    properties:
      file_type:
        type: "string"
        enum:
        - "TEST_FILE"
        - "PRIMARY_DESCRIPTOR"
        - "SECONDARY_DESCRIPTOR"
        - "CONTAINERFILE"
        - "OTHER"
      path:
        type: "string"
        description: "Relative path of the file.  A descriptor's path can be used\
          \ with the GA4GH .../{type}/descriptor/{relative_path} endpoint"
  ToolTesterLog:
    type: "object"
    properties:
      filename:
        type: "string"
      logType:
        type: "string"
        enum:
        - "FULL"
        - "SUMMARY"
      runner:
        type: "string"
      testFilename:
        type: "string"
      toolId:
        type: "string"
      toolVersionName:
        type: "string"
  ToolTestsV1:
    type: "object"
    properties:
      test:
        type: "string"
        description: "Optional test JSON content for this tool. (Note that one of\
          \ test and URL are required)"
      url:
        type: "string"
        description: "Optional url to the test JSON used to test this tool. Note that\
          \ this URL should resolve to the raw unwrapped content that would otherwise\
          \ be available in test."
    description: "A tool document that describes how to test with one or more sample\
      \ test JSON."
  ToolV1:
    type: "object"
    properties:
      author:
        type: "string"
      contains:
        type: "array"
        items:
          type: "string"
      description:
        type: "string"
      id:
        type: "string"
      meta-version:
        type: "string"
      organization:
        type: "string"
      signed:
        type: "boolean"
      toolclass:
        $ref: "#/definitions/ToolClass"
      toolname:
        type: "string"
      url:
        type: "string"
      verified:
        type: "boolean"
      verified-source:
        type: "string"
      versions:
        type: "array"
        items:
          $ref: "#/definitions/ToolVersionV1"
    description: "A tool (or described tool) describes one pairing of a tool as described\
      \ in a descriptor file (which potentially describes multiple tools) and a Docker\
      \ image."
  ToolVersion:
    type: "object"
    required:
    - "id"
    - "url"
    properties:
      containerfile:
        type: "boolean"
        description: "Reports if this tool has a containerfile available."
      descriptor_type:
        type: "array"
        description: "The type (or types) of descriptors available."
        items:
          type: "string"
          enum:
          - "CWL"
          - "WDL"
          - "NFL"
          - "SERVICE"
          - "GXFORMAT2"
      id:
        type: "string"
        example: "v1"
        description: "An identifier of the version of this tool for this particular\
          \ tool registry"
      image:
        type: "string"
        example: "quay.io/seqware/seqware_full/1.1"
        description: "The docker path to the image (and version) for this tool"
      image_name:
        type: "string"
        description: "Used in conjunction with a registry_url if provided to locate\
          \ images"
      meta_version:
        type: "string"
        description: "The version of this tool version in the registry. Iterates when\
          \ fields like the description, author, etc. are updated."
      name:
        type: "string"
        description: "The name of the version."
      registry_url:
        type: "string"
        description: "A URL to a Singularity registry is provided when a specific\
          \ type of image does not use ids in the Docker format. Used along with image_name\
          \ to locate a specific image."
      url:
        type: "string"
        example: "http://agora.broadinstitute.org/tools/123456/1"
        description: "The URL for this tool in this registry"
      verified:
        type: "boolean"
        description: "Reports whether this tool has been verified by a specific organization\
          \ or individual"
      verified_source:
        type: "string"
        description: "Source of metadata that can support a verified tool, such as\
          \ an email or URL"
    description: "A tool version describes a particular iteration of a tool as described\
      \ by a reference to a specific image and/or documents."
  ToolVersionV1:
    type: "object"
    properties:
      descriptor-type:
        type: "array"
        items:
          type: "string"
          enum:
          - "CWL"
          - "WDL"
      dockerfile:
        type: "boolean"
      id:
        type: "string"
      image:
        type: "string"
      meta-version:
        type: "string"
      name:
        type: "string"
      url:
        type: "string"
      verified:
        type: "boolean"
      verified-source:
        type: "string"
    description: "A tool version describes a particular iteration of a tool as described\
      \ by a reference to a specific image and dockerfile."
  User:
    type: "object"
    required:
    - "curator"
    - "isAdmin"
    - "setupComplete"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "Implementation specific ID for the container in this web service"
        readOnly: true
      privacyPolicyVersion:
        type: "string"
        description: "Indicates which version of the privacy policy the user has accepted"
        enum:
        - "NONE"
        - "PRIVACY_POLICY_VERSION_2_5"
      tosacceptanceDate:
        type: "string"
        format: "date-time"
        readOnly: true
      tosversion:
        type: "string"
        enum:
        - "NONE"
        - "TOS_VERSION_1"
      userProfiles:
        type: "object"
        description: "Profile information of the user retrieved from 3rd party sites\
          \ (GitHub, Google, etc)"
        additionalProperties:
          $ref: "#/definitions/Profile"
      username:
        type: "string"
        position: 1
        description: "Username on dockstore"
      isAdmin:
        type: "boolean"
        position: 2
        description: "Indicates whether this user is an admin"
      avatarUrl:
        type: "string"
        position: 7
        description: "URL of user avatar on GitHub/Google that can be selected by\
          \ the user"
      name:
        type: "string"
        position: 8
      curator:
        type: "boolean"
        position: 11
        description: "Indicates whether this user is a curator"
      setupComplete:
        type: "boolean"
        position: 12
        description: "Indicates whether this user has accepted their username"
      privacyPolicyVersionAcceptanceDate:
        type: "string"
        format: "date-time"
        position: 16
        description: "Time privacy policy was accepted"
    description: "End users for the dockstore"
  Validation:
    type: "object"
    required:
    - "id"
    - "message"
    - "type"
    - "valid"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "Implementation specific ID for the source file in this web service"
      type:
        type: "string"
        position: 1
        description: "Enumerates the type of file"
        enum:
        - "DOCKSTORE_CWL"
        - "DOCKSTORE_WDL"
        - "DOCKERFILE"
        - "CWL_TEST_JSON"
        - "WDL_TEST_JSON"
        - "NEXTFLOW"
        - "NEXTFLOW_CONFIG"
        - "NEXTFLOW_TEST_PARAMS"
        - "DOCKSTORE_YML"
        - "DOCKSTORE_SERVICE_YML"
        - "DOCKSTORE_SERVICE_TEST_JSON"
        - "DOCKSTORE_SERVICE_OTHER"
        - "DOCKSTORE_GXFORMAT2"
        - "GXFORMAT2_TEST_FILE"
        - "DOCKSTORE_SWL"
        - "SWL_TEST_JSON"
      valid:
        type: "boolean"
        position: 2
        description: "Is the file type valid"
      message:
        type: "string"
        position: 3
        description: "Mapping of filepath to validation message"
  VerificationInformation:
    type: "object"
    properties:
      metadata:
        type: "string"
      platformVersion:
        type: "string"
      verified:
        type: "boolean"
  Version:
    type: "object"
    required:
    - "name"
    - "reference"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "Implementation specific ID for the tag in this web service"
        readOnly: true
      workingDirectory:
        type: "string"
      reference:
        type: "string"
        position: 1
        description: "git commit/tag/branch"
      name:
        type: "string"
        position: 2
        description: "Implementation specific, can be a quay.io or docker hub tag\
          \ name"
      commitID:
        type: "string"
        position: 3
        description: "This is the commit id for the source control that the files\
          \ belong to"
      frozen:
        type: "boolean"
        position: 4
        description: "When true, this version cannot be affected by refreshes to the\
          \ content or updates to its metadata"
      referenceType:
        type: "string"
        position: 5
        description: "This indicates the type of git (or other source control) reference"
        enum:
        - "COMMIT"
        - "TAG"
        - "BRANCH"
        - "NOT_APPLICABLE"
        - "UNSET"
      sourceFiles:
        type: "array"
        position: 6
        description: "Cached files for each version. Includes Dockerfile and Descriptor\
          \ files"
        uniqueItems: true
        items:
          $ref: "#/definitions/SourceFile"
      valid:
        type: "boolean"
        position: 7
        description: "Implementation specific, whether this tag has valid files from\
          \ source code repo"
      dirtyBit:
        type: "boolean"
        position: 8
        description: "True if user has altered the tag"
      versionEditor:
        position: 9
        description: "Particularly for hosted workflows, this records who edited to\
          \ create a revision"
        $ref: "#/definitions/User"
      dbUpdateDate:
        type: "string"
        format: "date-time"
        position: 11
      input_file_formats:
        type: "array"
        position: 12
        description: "File formats for describing the input file formats of versions\
          \ (tag/workflowVersion)"
        uniqueItems: true
        items:
          $ref: "#/definitions/FileFormat"
      output_file_formats:
        type: "array"
        position: 13
        description: "File formats for describing the output file formats of versions\
          \ (tag/workflowVersion)"
        uniqueItems: true
        items:
          $ref: "#/definitions/FileFormat"
      validations:
        type: "array"
        position: 14
        description: "Cached validations for each version."
        uniqueItems: true
        items:
          $ref: "#/definitions/Validation"
      images:
        type: "array"
        position: 15
        description: "The images that belong to this version"
        uniqueItems: true
        items:
          $ref: "#/definitions/Image"
      verified:
        type: "boolean"
        position: 16
        description: "Whether this version has been verified or not"
      verifiedSource:
        type: "string"
        position: 17
        description: "Verified source for the version"
      hidden:
        type: "boolean"
        position: 18
        description: "Implementation specific, whether this row is visible to other\
          \ users aside from the owner"
      verifiedSources:
        type: "array"
        position: 18
        description: "Verified source for the version"
        items:
          type: "string"
      doiURL:
        type: "string"
        position: 19
        description: "This is a URL for the DOI for the version of the entry"
      doiStatus:
        type: "string"
        position: 20
        description: "This indicates the DOI status"
        enum:
        - "NOT_REQUESTED"
        - "REQUESTED"
        - "CREATED"
      author:
        type: "string"
        position: 21
      description:
        type: "string"
        position: 22
      descriptionSource:
        type: "string"
        position: 23
        enum:
        - "README"
        - "DESCRIPTOR"
      email:
        type: "string"
        position: 24
    description: "Base class for versions of entries in the Dockstore"
  Workflow:
    type: "object"
    required:
    - "defaultTestParameterFilePath"
    - "descriptorType"
    - "gitUrl"
    - "mode"
    - "organization"
    - "repository"
    - "sourceControl"
    - "workflow_path"
    discriminator: "type"
    properties:
      aliases:
        type: "object"
        description: "aliases can be used as an alternate unique id for entries"
        additionalProperties:
          $ref: "#/definitions/Alias"
      dbCreateDate:
        type: "string"
        format: "date-time"
      dbUpdateDate:
        type: "string"
        format: "date-time"
      has_checker:
        type: "boolean"
        readOnly: true
      id:
        type: "integer"
        format: "int64"
        description: "Implementation specific ID for the container in this web service"
      input_file_formats:
        type: "array"
        readOnly: true
        uniqueItems: true
        items:
          $ref: "#/definitions/FileFormat"
      isChecker:
        type: "boolean"
      last_modified_date:
        type: "string"
        format: "date-time"
        readOnly: true
      output_file_formats:
        type: "array"
        readOnly: true
        uniqueItems: true
        items:
          $ref: "#/definitions/FileFormat"
      parentEntry:
        $ref: "#/definitions/Entry"
      topicId:
        type: "integer"
        format: "int64"
        description: "The Id of the corresponding topic on Dockstore Discuss"
      author:
        type: "string"
        position: 1
        description: "This is the name of the author stated in the Dockstore.cwl"
      description:
        type: "string"
        position: 2
        description: "This is a human-readable description of this container and what\
          \ it is trying to accomplish, required GA4GH"
      labels:
        type: "array"
        position: 3
        description: "Labels (i.e. meta tags) for describing the purpose and contents\
          \ of containers"
        uniqueItems: true
        items:
          $ref: "#/definitions/Label"
      users:
        type: "array"
        position: 4
        description: "This indicates the users that have control over this entry,\
          \ dockstore specific"
        uniqueItems: true
        items:
          $ref: "#/definitions/User"
      starredUsers:
        type: "array"
        position: 5
        description: "This indicates the users that have starred this entry, dockstore\
          \ specific"
        uniqueItems: true
        items:
          $ref: "#/definitions/User"
      email:
        type: "string"
        position: 6
        description: "This is the email of the git organization"
      defaultVersion:
        type: "string"
        position: 7
        description: "This is the default version of the entry"
      is_published:
        type: "boolean"
        position: 8
        description: "Implementation specific visibility in this web service"
      last_modified:
        type: "integer"
        format: "int32"
        position: 9
        description: "Implementation specific timestamp for last modified. Tools->\
          \ For automated/manual builds: N/A. For hosted: Last time a file was updated/created\
          \ (new version created). Workflows-> For remote: When refresh is hit, last\
          \ time GitHub repo was changed. Hosted: Last time a new version was made."
      lastUpdated:
        type: "string"
        format: "date-time"
        position: 10
        description: "Implementation specific timestamp for last updated on webservice.\
          \ Tools-> For automated builds: last time tool/namespace was refreshed Dockstore,\
          \ tool info (like changing dockerfile path) updated, or default version\
          \ selected. For hosted tools: when you created the tool. Workflows-> For\
          \ remote: When refresh all is hit for first time. Hosted: Seems to be time\
          \ created."
      gitUrl:
        type: "string"
        position: 11
        description: "This is a link to the associated repo with a descriptor, required\
          \ GA4GH"
      checker_id:
        type: "integer"
        format: "int64"
        position: 12
        description: "The id of the associated checker workflow"
        readOnly: true
      conceptDoi:
        type: "string"
        position: 13
        description: "The Digital Object Identifier (DOI) representing all of the\
          \ versions of your workflow"
      mode:
        type: "string"
        position: 13
        description: "This indicates what mode this is in which informs how we do\
          \ things like refresh, dockstore specific"
        enum:
        - "FULL"
        - "STUB"
        - "HOSTED"
        - "SERVICE"
      workflowName:
        type: "string"
        position: 14
        description: "This is the name of the workflow, not needed when only one workflow\
          \ in a repo"
      organization:
        type: "string"
        position: 15
        description: "This is a git organization for the workflow"
      repository:
        type: "string"
        position: 16
        description: "This is a git repository name"
      sourceControl:
        type: "string"
        position: 17
        description: "This is a specific source control provider like github or bitbucket\
          \ or n/a?, required: GA4GH"
      descriptorType:
        type: "string"
        position: 18
        description: "This is a descriptor type for the workflow, by default either\
          \ CWL, WDL, NFL, or gxformat2 (Defaults to CWL)."
        enum:
        - "CWL"
        - "WDL"
        - "NFL"
        - "gxformat2"
        - "service"
      workflow_path:
        type: "string"
        position: 19
        description: "This indicates for the associated git repository, the default\
          \ path to the primary descriptor document"
      defaultTestParameterFilePath:
        type: "string"
        position: 20
        description: "This indicates for the associated git repository, the default\
          \ path to the test parameter file"
      workflowVersions:
        type: "array"
        position: 21
        description: "Implementation specific tracking of valid build workflowVersions\
          \ for the docker container"
        uniqueItems: true
        items:
          $ref: "#/definitions/WorkflowVersion"
      full_workflow_path:
        type: "string"
        position: 24
        readOnly: true
      path:
        type: "string"
        position: 25
      source_control_provider:
        type: "string"
        position: 26
        readOnly: true
    description: "This describes one workflow in the dockstore"
  WorkflowVersion:
    type: "object"
    required:
    - "name"
    - "reference"
    properties:
      aliases:
        type: "object"
        description: "aliases can be used as an alternate unique id for workflow versions"
        additionalProperties:
          $ref: "#/definitions/Alias"
      id:
        type: "integer"
        format: "int64"
        description: "Implementation specific ID for the tag in this web service"
        readOnly: true
      workingDirectory:
        type: "string"
      reference:
        type: "string"
        position: 1
        description: "git commit/tag/branch"
      name:
        type: "string"
        position: 2
        description: "Implementation specific, can be a quay.io or docker hub tag\
          \ name"
      commitID:
        type: "string"
        position: 3
        description: "This is the commit id for the source control that the files\
          \ belong to"
      frozen:
        type: "boolean"
        position: 4
        description: "When true, this version cannot be affected by refreshes to the\
          \ content or updates to its metadata"
      referenceType:
        type: "string"
        position: 5
        description: "This indicates the type of git (or other source control) reference"
        enum:
        - "COMMIT"
        - "TAG"
        - "BRANCH"
        - "NOT_APPLICABLE"
        - "UNSET"
      sourceFiles:
        type: "array"
        position: 6
        description: "Cached files for each version. Includes Dockerfile and Descriptor\
          \ files"
        uniqueItems: true
        items:
          $ref: "#/definitions/SourceFile"
      valid:
        type: "boolean"
        position: 7
        description: "Implementation specific, whether this tag has valid files from\
          \ source code repo"
      dirtyBit:
        type: "boolean"
        position: 8
        description: "True if user has altered the tag"
      versionEditor:
        position: 9
        description: "Particularly for hosted workflows, this records who edited to\
          \ create a revision"
        $ref: "#/definitions/User"
      dbUpdateDate:
        type: "string"
        format: "date-time"
        position: 11
      input_file_formats:
        type: "array"
        position: 12
        description: "File formats for describing the input file formats of versions\
          \ (tag/workflowVersion)"
        uniqueItems: true
        items:
          $ref: "#/definitions/FileFormat"
      output_file_formats:
        type: "array"
        position: 13
        description: "File formats for describing the output file formats of versions\
          \ (tag/workflowVersion)"
        uniqueItems: true
        items:
          $ref: "#/definitions/FileFormat"
      validations:
        type: "array"
        position: 14
        description: "Cached validations for each version."
        uniqueItems: true
        items:
          $ref: "#/definitions/Validation"
      images:
        type: "array"
        position: 15
        description: "The images that belong to this version"
        uniqueItems: true
        items:
          $ref: "#/definitions/Image"
      verified:
        type: "boolean"
        position: 16
        description: "Whether this version has been verified or not"
      verifiedSource:
        type: "string"
        position: 17
        description: "Verified source for the version"
      hidden:
        type: "boolean"
        position: 18
        description: "Implementation specific, whether this row is visible to other\
          \ users aside from the owner"
      verifiedSources:
        type: "array"
        position: 18
        description: "Verified source for the version"
        items:
          type: "string"
      doiURL:
        type: "string"
        position: 19
        description: "This is a URL for the DOI for the version of the entry"
      doiStatus:
        type: "string"
        position: 20
        description: "This indicates the DOI status"
        enum:
        - "NOT_REQUESTED"
        - "REQUESTED"
        - "CREATED"
      author:
        type: "string"
        position: 21
      description:
        type: "string"
        position: 22
      descriptionSource:
        type: "string"
        position: 23
        enum:
        - "README"
        - "DESCRIPTOR"
      email:
        type: "string"
        position: 24
      workflow_path:
        type: "string"
        position: 101
        description: "Path for the workflow"
      last_modified:
        type: "string"
        format: "date-time"
        position: 102
        description: "Remote: Last time version on GitHub repo was changed. Hosted:\
          \ time version created."
      subClass:
        type: "string"
        position: 103
        description: "The subclass of this for services."
        enum:
        - "DOCKER_COMPOSE"
        - "SWARM"
        - "KUBERNETES"
        - "HELM"
    description: "This describes one workflow version associated with a workflow."
  WorkflowVersionPathInfo:
    type: "object"
    properties:
      fullWorkflowPath:
        type: "string"
        description: "Dockstore path to workflow."
      tagName:
        type: "string"
        description: "Name of workflow version tag"
    description: "Object that contains the Dockstore path to the workflow and the\
      \ version tag name."
externalDocs:
  description: "Dockstore documentation"
  url: "https://www.dockstore.org/docs/getting-started"
