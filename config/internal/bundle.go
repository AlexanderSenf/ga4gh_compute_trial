// Code generated by go-bindata.
// sources:
// config/gridengine-template.txt
// config/pbs-template.txt
// config/slurm-template.txt
// config/default-config.yaml
// config/htcondor-template.txt
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configGridengineTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xcd\x4a\xc4\x30\x14\x85\xf7\x79\x8a\x6b\xc7\x59\x26\xed\x0b\xb8\xb2\x30\xb8\x71\x21\x82\x4b\x69\xc9\x0d\x13\x32\xf9\xe1\x26\x51\x30\xe4\xdd\xa5\x69\x11\x0a\x75\x76\x97\xc3\x77\x3e\xb8\xe7\xf4\xd0\xcf\xda\xf5\xf3\x14\xaf\xec\xf4\x08\xfc\x15\x4a\x11\xef\x53\x34\x2f\xb2\xd6\x96\xf8\x25\xf9\xf0\x64\x46\x4d\xb5\xf6\x2a\x3b\x87\x37\x1e\x93\xf4\x39\x35\x00\xff\x03\x90\x88\x95\xa2\x15\x38\x04\xf1\x1c\x72\x84\x01\x78\xad\xac\x94\x40\xda\x25\x05\xdd\x52\x0f\x08\x36\x68\x38\xcb\x6e\x85\x1a\xc0\x01\x9d\x6c\xd7\x56\x7f\x9b\xec\x65\x86\x41\x1c\x19\x6e\x70\xfd\xfc\xb2\x68\x9f\xce\x62\x50\x97\x6e\x83\x8f\x3d\xa3\x8e\xe6\xae\x48\x45\xfd\x83\x7f\xa6\x15\xdf\xa9\xd8\xfa\x20\x7c\x7b\x32\x48\x40\xd9\x01\xe7\x69\x59\x6c\xdc\x6d\xf7\x1b\x00\x00\xff\xff\xcf\x92\x30\x7f\x5a\x01\x00\x00")

func configGridengineTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configGridengineTemplateTxt,
		"config/gridengine-template.txt",
	)
}

func configGridengineTemplateTxt() (*asset, error) {
	bytes, err := configGridengineTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/gridengine-template.txt", size: 346, mode: os.FileMode(420), modTime: time.Unix(1527612071, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configPbsTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xd0\xc1\x4a\xc4\x30\x10\xc6\xf1\x7b\x9f\x62\xec\xb2\xc7\xb4\xf5\x2a\xf4\xa2\x05\xf1\x22\xa2\x82\xe7\x86\x4c\x34\xa4\x9d\x84\x49\x82\x87\x90\x77\x97\xdd\x04\x64\xc1\xf5\x16\x86\x3f\x3f\xc8\x77\xb8\x19\xa5\xa1\x51\xae\xe1\xab\x3b\xbc\xdc\xbf\x81\x78\x86\x9c\x87\xf7\x35\xd8\x27\x55\x4a\xbb\xb9\xd3\xed\xc3\xb1\x5d\x0c\x97\x32\xea\x44\x84\x9b\x08\x51\xb9\x14\x5b\x82\xd7\x12\x64\xee\x72\x36\x1a\x08\x61\x78\xf0\x29\xc0\x04\xa2\x94\x2e\x67\xcf\x86\xa2\x86\xbe\x02\x1b\x90\x53\x18\xe6\xdb\x3b\xef\x69\x3e\xaa\xbe\xd6\xe7\x52\x00\x92\x3a\xbf\x9a\xf3\xba\xee\x8f\x12\xa6\xe1\x1a\xb5\xe3\x3e\x1f\x87\x49\x7f\xca\xbe\xc5\x7f\x3b\x8b\x09\xf6\x5f\x48\x9b\x0d\x7f\xa5\x9a\x5f\x50\x5d\xfd\x29\x7c\x3b\xb6\xc8\xc0\x89\x40\x88\x78\x9a\x6f\xb9\x18\xf2\x27\x00\x00\xff\xff\x94\x91\x42\x0b\x69\x01\x00\x00")

func configPbsTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configPbsTemplateTxt,
		"config/pbs-template.txt",
	)
}

func configPbsTemplateTxt() (*asset, error) {
	bytes, err := configPbsTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/pbs-template.txt", size: 361, mode: os.FileMode(420), modTime: time.Unix(1527612071, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configSlurmTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xc1\x6a\xc3\x30\x0c\x86\xef\x79\x0a\x2d\xa5\x47\x27\xd9\x23\xac\x0d\x74\xbb\x6e\x85\x9d\x9d\x45\x61\x9e\x67\xd9\x48\x36\x3b\x18\xbf\xfb\x48\x53\x68\x0a\x0b\xbb\x19\xeb\xfb\x3f\xa4\x7f\xf7\xd0\x0e\x86\xda\x41\xcb\x67\xb5\x7b\x3b\x3c\x9d\x8f\xcf\xa0\xd4\x97\x1f\x14\x69\x87\x90\x73\x73\xd6\x62\x5f\xc6\x52\x56\x63\x8a\x5a\xac\xc0\xe3\xea\x0b\x99\x3d\xcf\xf8\xbb\x67\xdb\x1b\x2e\xa5\x9d\x12\x11\x7e\x2b\x89\x23\x32\xaf\x50\x9f\x62\x48\x71\x8b\xf5\x29\x56\x39\x9b\x09\x08\xa1\x39\x86\x24\xd0\x81\x2a\xa5\xca\x39\xb0\xa1\x38\x41\x7d\x33\x7d\x84\x24\x2a\x20\xab\x79\x1f\xd8\x8f\xf5\x92\xb8\xd0\x0a\x90\xc6\xcb\xeb\xea\x7a\xd5\xee\x34\x40\xd7\x6c\xeb\x1c\x3a\xd8\x37\xdd\x74\x3a\xd4\x57\xfc\x6f\x53\x6f\xc4\xfe\xa3\x8a\x2e\xdc\x54\x0b\x7f\xe7\xaa\x96\x83\xe1\xc7\xb3\x45\x06\x4e\x34\x87\xe6\xa6\xfb\xbb\xce\x7f\x03\x00\x00\xff\xff\x71\x9e\x5b\xbd\x9f\x01\x00\x00")

func configSlurmTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configSlurmTemplateTxt,
		"config/slurm-template.txt",
	)
}

func configSlurmTemplateTxt() (*asset, error) {
	bytes, err := configSlurmTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/slurm-template.txt", size: 415, mode: os.FileMode(420), modTime: time.Unix(1527612071, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configDefaultConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xdd\x6e\x1b\xb9\x92\xbe\xef\xa7\xa8\xb5\x32\xd8\x04\x90\x64\x79\x82\x0c\x76\x04\xf8\xc2\x96\x3d\x8e\x37\x8e\xa3\xb5\x94\xcd\xee\x95\xc1\x6e\x56\xab\x39\xea\x26\x7b\x48\xb6\x65\xc5\x27\xef\x7e\x50\x45\x76\x4b\xb2\x9d\x9f\x39\xe3\x00\x39\xc0\xf8\x4a\x4d\x16\x8b\xc5\xfa\xe3\x57\x45\xf7\x60\x5e\x20\x68\x51\x21\x98\x1c\x7c\x81\x20\x32\xaf\x6e\x10\x1c\xda\x1b\xb4\x20\x85\x17\xa9\x70\x08\xa9\xc8\x96\xa8\x65\xd2\x83\xa3\x1b\xa1\x4a\x91\x96\xdd\x98\x1b\x43\x6a\x4a\x2f\xd3\x3e\xa4\x42\x2e\xd0\xf6\x79\x99\xf3\xc6\x62\x1f\xe4\x5a\x8b\xca\xd0\x24\x96\xc2\x79\x95\xf5\xa1\x32\x7a\x61\x64\x9a\x9c\x44\xe6\xed\xfa\x24\xf9\xac\x38\x99\xa9\xea\xc6\x7f\x4d\x8c\xd2\x64\xa2\xec\x43\xe1\x33\xa3\xa5\xb1\x7d\x70\x65\x63\xab\x3e\xd4\xa9\xeb\xc3\xc2\x2a\x89\x7a\xa1\x34\xf6\xa1\x12\xba\x21\x4a\xb1\x72\x83\x54\xf8\xac\x48\x26\x61\x83\xc8\xe3\x0b\x92\xe0\x0d\x6a\x0f\x2b\xab\x3c\xda\x76\xeb\xe7\xee\xc5\xf0\xb3\x22\x2d\xfa\xff\x9a\x7a\xfa\xb0\x14\xf9\x52\x24\xa7\xb4\xe1\x07\xde\xcf\x8d\x21\x01\x18\xb4\xea\xa2\x9f\xa5\x59\x24\xc9\x85\x59\x2c\xd0\x8e\x13\x80\x1e\xd0\x6f\xa5\x17\x50\xe2\x0d\x96\x6e\x0c\x12\xd3\x66\xd1\x07\xa5\x73\xd3\x07\xb4\xd6\xd8\x04\xe0\x82\x26\xc7\x3c\xc8\x8b\x98\x3d\xf1\x72\xe0\x0d\xf8\x42\x39\xa8\x85\x2f\x86\x70\x9e\x03\x56\xb5\x5f\xf7\xc3\xa4\xb0\xc8\x47\xf7\xa8\x89\xd0\x79\x89\xd6\x0e\x13\x80\x77\x8d\xaf\x1b\xff\x9b\x2a\x71\x0c\x7b\x7b\x49\x32\x63\xf7\x09\x12\xbd\x36\xce\x6f\x2b\xf2\xb7\x46\x6b\x2c\xa3\x87\xd1\x62\x22\xb8\x14\x55\xab\xfc\xc2\x38\x9f\xf0\xca\xa9\xb1\x1e\x1a\x87\x12\x72\x63\xe1\xf5\x7c\x3e\x25\x47\xa8\x1a\xad\x32\xe1\x95\xd1\x20\xb4\x64\x96\x2b\x4c\x41\x0a\x57\xa4\x46\x58\xc9\x2c\xe7\xf3\x29\xad\x1e\xc3\x7f\x8d\x46\xa3\xc7\xb8\x5d\x4d\x27\xbb\xcc\x68\xd9\xd5\x74\x12\x56\xfd\x3a\xfa\x35\xae\xba\xc2\x3f\x1a\x65\xc9\xa4\x4e\x65\x20\x1a\x5f\xa0\xf6\xed\xfe\xc4\x88\xf6\x8f\xd1\x72\x34\x3d\x77\xd0\x38\x52\xbf\x80\x5a\x38\xb7\x32\x41\x9c\x1e\x29\x92\xb6\x26\xd7\x5b\x22\xb8\xc6\x22\x29\xb0\xb6\xa6\x46\x5b\xae\xc1\xa2\xf3\x56\x65\x1e\x44\x96\xa1\x8b\x56\x20\xb7\xd7\xb9\x5a\x40\xae\x4a\x64\x2e\xcf\x71\xb8\x18\x42\x56\x54\x46\xc2\x2f\xa3\x11\xe4\xac\xca\x61\x20\x1b\xae\xab\xf2\x05\x93\x1d\x93\xac\x47\x8d\x2f\x82\x01\xc8\x4f\xde\x3b\xb4\x63\x12\xc1\x1e\xc4\x31\x80\x69\x94\x70\x0c\x22\xcd\x0e\x7e\x7e\xf9\x08\xf1\xcf\x8f\x10\xe7\xc6\xa4\xc2\x06\xed\x9c\xeb\xac\x6c\x24\x82\x80\xbd\x89\xc8\x0a\x1c\x4c\x8c\xf6\xd6\x94\x63\xd0\x66\xc0\x2e\xbe\x17\xec\x56\xa0\x90\x68\x41\x69\x38\x43\xbf\x7f\xa1\x9c\xa7\x33\xd7\x46\x3b\x74\xcc\x89\xb5\x11\x82\x2b\x13\x59\x41\x3a\x4c\xd7\xa0\xb4\x47\x5b\xa1\x54\xc2\xae\x59\xcb\x2a\x43\x47\x1a\x3d\x51\x8e\x22\x8d\x78\xf3\xc6\x63\xf0\xb6\xc1\x24\xb9\x9a\x4e\x26\xa5\x42\xed\xc3\xd1\xc9\xca\xd1\x38\x42\x4a\x4b\xaa\x4d\x00\x82\x77\x1e\x85\x81\x2d\xaf\x1b\x6f\xcc\x3e\xb1\x28\xc9\xd0\xa2\x74\x6c\xe5\xe3\x7f\x23\xf3\x07\xf3\x85\xc9\xe0\xf9\xf7\x0d\xcd\xa3\x99\xd1\x1a\x33\x3e\x88\x57\x15\x9a\xc6\x93\xac\xf3\xf0\x73\x0c\xbf\x8c\x5c\xa0\xa3\x44\x58\x89\x5b\x55\x35\x15\xe8\xa6\x4a\xd1\x72\x24\xab\x0a\x1d\xf8\x42\x78\x10\x60\xf1\x8f\x06\x9d\x87\x95\x2a\x4b\x48\x11\x2c\x7a\xab\x62\xa0\xe5\x42\x95\x8d\x0d\x56\xeb\x31\x7b\x48\xd1\xaf\x10\x75\x24\x23\x05\x97\xa5\x59\x39\x10\x1a\xf0\xb6\x36\x3a\x28\x9e\xb3\xa8\xc9\x73\x70\x5e\x58\xcf\x5a\xf5\xf0\x0a\x1c\x52\x76\x0f\x4e\xd3\xd4\xa4\xaa\x03\xa8\x94\x6e\x3c\xe9\xe8\xad\xb8\xbd\x0a\x4c\xc7\x70\x30\x6a\xd3\xb8\xcb\x0a\x94\x4d\x49\xfe\xe7\x36\x19\x80\x34\xfc\x96\x2f\x82\xfb\xd7\xcb\x10\x92\x59\xbb\xa4\xcd\x61\x2b\x30\x79\x4c\x7b\xb6\xd1\x20\xb6\x99\x7a\xb4\x5d\x0a\x69\x17\x5e\x09\xba\x4d\x0e\x5c\xb7\xbc\x12\x7a\x0d\x5e\xb8\x25\x9b\xb7\x5d\x4d\x11\x61\x34\x3e\xce\x63\x52\x34\x7a\xc9\x07\x69\x99\x94\x46\x2f\x68\xf9\x4a\x28\xdf\xa9\xb1\xa9\xa5\xf0\xe8\x20\xc5\xdc\x58\xb2\x95\x5d\x06\x1f\xd4\x46\x22\x48\x14\xec\x84\x97\x46\xe2\x54\xe9\x45\x67\xe0\x83\xea\x71\xb6\xa4\x9b\xb8\x96\x73\xbc\xb0\xbe\x7f\x9f\x37\xe9\xee\x01\xf7\x73\xad\x7c\xc7\xfd\x55\x95\x24\x34\x38\x6e\xfd\x3f\xde\x23\x91\xf3\xf9\x49\xe7\x2c\xa2\xf1\xa6\x12\x14\x54\x65\xb9\x86\x05\x6a\xd2\x04\x32\xd7\xf3\x93\x70\x9d\x44\x16\xdd\xae\x85\xa0\xd3\xa2\x06\x25\x4b\x64\x81\xe9\x04\x48\x36\x15\x9a\xc9\xa2\x47\xf7\x41\x45\xaf\x74\x45\xe3\x41\x9a\x95\x0e\x7e\x38\x38\x80\x0a\x85\x26\x0f\x46\x8b\xe4\x17\xda\x74\x61\x00\xa3\x76\x32\x0c\x80\xaa\x38\x07\x79\x2c\xd7\x20\x72\x8f\xc1\x79\x72\x65\x9d\x67\x93\xee\x04\xce\xe0\x20\x06\xce\x11\x6b\x25\x6c\xbf\x7b\x48\x6f\xd7\xa4\x5b\x89\x1e\x33\x0f\x2b\x0a\x22\x8b\xce\x34\x36\xc3\x70\xc9\x8a\x0e\x4a\x78\x03\xca\x0f\x81\x19\x9e\x60\xae\x34\xa9\xff\xaa\x23\x56\xe1\xb8\xbc\x51\xc8\x03\x4d\xf0\x23\x30\x37\x68\x09\xf2\xb8\x70\x9f\xa7\x58\x88\x1b\x65\xf8\xc2\xed\x96\x93\x71\x38\xdb\x4d\xdf\xbb\xcd\x9e\xc3\x76\xb4\x6e\xdc\x18\x38\x21\x72\x2e\x3d\x7a\xbb\xa1\xe9\x73\x2a\x3f\x6e\x49\xaf\x44\x75\x96\x8e\x61\x34\xec\xa8\x4f\x94\x5b\x82\xab\x45\x86\x9f\x5d\x44\x24\x5b\xab\x7a\xf0\x1b\x1b\x72\x35\x60\xec\x02\xbe\xa1\xb3\x0e\x1f\xc6\x9f\x5b\xeb\x0c\x56\xca\x17\x8f\xc3\x89\xf7\x1c\x0e\x21\xfe\x5e\xb9\x24\xf9\x60\xec\xb2\x8d\x63\x42\x28\x0e\x32\x8b\xe4\x61\x20\x1b\x4b\xda\xac\xad\xa1\xac\x4b\x3f\x5b\x9f\x6c\x41\x0e\xab\x57\x39\x90\xca\x62\xe6\x8d\x5d\xd3\x06\xc4\xf0\x44\xd9\x31\x0c\xf7\x43\x92\x1d\xac\x8c\x5d\x0e\xa4\xb2\x7f\xea\x18\xb5\x29\x4b\xf6\xdd\x4c\xe8\x8c\x4e\xa0\x16\x5a\x94\x94\x30\xa6\xa6\x2c\x95\x5e\x6c\x8e\xf0\x67\x94\x83\x5a\x12\x30\x33\x8d\xdf\x47\x6b\xd9\x3d\x09\xbc\x75\x59\x22\xde\x2d\x0f\xd4\xd6\x83\x19\x7a\x1f\x82\x5b\x31\xd9\x28\xa8\xc3\xa2\x6b\x4a\x1f\x3d\xcd\x91\xdb\x63\x29\xc9\xa1\x88\x36\x70\x95\x94\x0f\x95\x5e\x94\x21\xf0\x98\xdb\x26\x4e\xf0\x16\xb3\xc6\x1b\x0b\x78\xab\x3c\xdf\x03\x17\x66\x71\xdf\x4a\xb4\xe4\xad\xb8\x85\x74\x1d\x85\x64\xf4\xc0\xfa\xd9\x3a\x4d\x74\xf7\xf6\x50\x91\xd7\x5c\xa8\x72\xa6\x3e\x52\xbe\x1d\x8d\x46\x23\xe8\xc1\xc1\x08\xde\x1c\x07\xa6\x97\xc6\x56\x21\xe8\x08\x28\xb2\x2f\x80\xc4\x12\x69\x1b\xe5\x1d\x0f\xd1\x49\x3a\x13\x47\xc9\x83\xd4\x9d\x92\xe7\xa4\x14\x53\x73\x68\xc9\x00\x3e\xe2\xf5\xb7\x1d\x59\x17\x28\x6e\xb0\xf3\x8f\x5c\x94\x0e\x93\xa4\x37\x78\xda\xbf\xa4\x07\x6d\xe9\x44\x77\xa6\xdc\x37\x16\xb8\x4a\x80\x58\x26\xec\xbf\x16\x5a\x96\x68\xdd\xd3\x6f\x9d\x1c\x9b\xd2\x9f\x1c\x8f\x23\xae\xa0\x18\x0c\xfe\xd4\x55\x8a\x11\xad\xd0\xdc\x23\x11\x12\xbf\x87\x54\xed\x9d\x70\xed\xd3\x32\x3b\x16\x0e\xb9\x4c\xf0\x86\xee\x68\xb6\x7c\x5b\x1d\x81\x67\x7d\x53\x96\xa5\x1f\x2d\xe9\x0e\xc8\x39\xfa\x30\x03\x8b\x0b\x65\x34\x67\x38\xfa\xc1\x97\x47\x3b\x77\x14\xa0\xd5\x12\xd7\x70\x7e\x92\x00\xbc\xc1\xf5\xce\xfc\x0c\x33\x8b\xbe\x25\x7b\x83\x6b\x06\x8a\x34\x16\xee\xa0\xd3\x50\x9f\xc5\x93\x5b\xcc\xd5\xed\xb6\xa8\x4a\x4b\xbc\x45\x07\xcf\xc9\x37\xfb\xa1\x4c\x74\x7d\xbe\xae\x1c\xc1\xb2\x73\x9a\x0f\xcb\x76\xc4\x7e\x7f\x75\xd1\x16\x46\xb1\x02\x74\x28\x6c\x56\x6c\x27\xb4\xab\x8b\x31\x14\xde\xd7\xe3\xfd\xfd\x2d\xac\xfa\xf3\x88\x01\xce\x99\x31\x14\x77\x93\xd2\x34\x92\xfd\x22\x04\x0e\x87\x48\x6b\x94\x61\xd2\x4d\x90\xfc\x53\x6b\x7e\xc7\xcc\x77\xc7\x6f\xed\x28\xb2\xcc\x34\x04\xc0\xb7\xc1\xaf\x0a\x17\x42\x0f\xde\xb1\xf3\x8b\x92\xab\xc2\xda\x38\xa7\x38\xa5\x6f\x13\x3f\x7e\xa5\x4b\xe5\x32\xba\x8d\x50\x32\x9f\xdc\x9a\x2a\x9c\x57\xdf\x28\x6b\x74\x85\x9a\x91\xe7\x16\xe4\xee\x0a\x49\x80\xe4\x2d\x95\xc3\xad\x93\x10\x66\x77\x50\x18\x4a\x40\x5c\x94\x07\x0c\x8f\x6e\x0b\x8b\xa3\x8c\xba\xe3\x54\xc3\x2b\xc2\x3d\x37\xd8\xaa\x2f\xf9\xfe\x69\x5d\x56\xb9\x5d\x17\x66\x37\x64\x9c\x48\xb7\x8c\xd2\x10\x65\xd8\x4a\x4b\x21\x7b\xd2\x0a\xae\x46\xba\x4e\xc6\x96\x65\xe7\x2d\x78\x88\xa2\x56\xac\xdb\x08\x9d\xef\xa1\xad\x58\x41\x10\xb8\xe4\xaa\x48\xc2\xaa\x40\x1d\xd4\xc5\x28\xa3\x05\xeb\x84\xeb\xb4\x04\x2e\x3e\x08\x34\x13\x04\xa6\x22\x82\xef\xfc\x0e\x0e\x38\xba\xce\x8c\x26\x4b\x85\xe2\x6a\x23\xca\x47\xb4\xa6\x1f\xaa\x0b\x51\x96\x50\x89\x35\xa4\xa5\xc9\x96\x24\x08\x92\x0c\x24\x15\x6d\x13\x04\xdb\x14\x09\x6d\x95\x96\x22\xa0\xa3\x78\x54\xae\x08\x28\x6d\x1b\xf3\xb5\xf5\x07\xab\x90\x24\x6d\x6b\x0f\x6e\x36\xd8\x60\xf8\xec\x5e\x71\x45\x63\x4a\x2b\x06\xfd\xbb\x25\x16\xf3\x93\x04\x90\x8d\xde\xb5\x91\x24\x2c\x84\x92\x8a\x44\x1a\x3f\xd9\xa4\x1f\x2c\x59\xaa\x56\x8a\xe8\x47\x9b\x1a\x88\x82\xf9\x8d\xc8\x97\x62\xdc\x95\x82\x9d\x83\x30\xe9\xdc\xd4\x2a\xeb\x4c\xf9\x3d\xd2\x77\xec\x36\xc1\x71\xec\x13\x7d\x87\x3c\xfd\x7a\x3e\xe1\x26\x58\x88\x9b\x79\x63\x35\x50\x2d\xc5\x69\xc1\x79\xe1\xa9\x48\xcb\x8c\xce\x54\x89\x76\x08\x1f\x0a\xd4\x80\x9a\x92\xab\xec\xb7\xd8\x60\xd3\x1e\x41\xb7\xc1\x5b\xaf\xa7\x13\x66\xb9\xa9\x7f\xbc\x81\x5c\x69\xd9\x16\x37\x5c\x12\x5a\x04\xe7\x9b\x6c\x49\x1e\x29\xe0\x8f\x06\x1b\x0a\x4b\xde\x97\x80\x80\xb5\xc6\x12\x6a\xd0\x32\xd6\x71\x11\x9b\xb4\x77\x7b\xa0\xa4\x7c\x64\x25\xe1\x8a\xf5\x56\xcd\x7f\xd5\xc9\x1d\x8b\xfe\xd0\xa6\x89\x83\x84\x28\xc8\xcf\x8b\x0d\x28\x2a\x1e\xf4\x0f\xf9\x5b\x58\x74\x61\x23\x8e\x9b\x70\xe8\xff\x74\x5d\x8f\x31\xfa\xbb\x2f\x8c\x23\x65\xd5\xc6\xfa\x8d\xbf\x6d\x88\x76\x76\x1e\xc3\xcb\x11\x05\xc1\x1c\xab\xba\xe4\xef\x7f\xb0\x67\x35\x5a\x91\x9b\x21\x1c\xc2\x8d\xd0\xaa\x2c\x05\x0f\x2f\xd0\xa3\xbe\x81\x43\x98\x87\x73\x40\x44\x1d\x8c\xfc\x0f\xe1\xee\x6e\x78\xda\x7d\x7f\xfa\xc4\x04\xc2\x2e\x1a\xca\x98\x0e\x0e\x5b\x34\x43\xf5\xe8\x60\x10\x9b\x05\x77\x77\xc3\x09\xff\xfa\xf4\x09\x06\x03\x52\xe6\x40\x49\x1a\x9d\x0b\xb7\x3c\x97\x91\x0b\x01\x42\xe6\x1f\xb1\xca\xa7\x4f\xfb\xa1\x67\x3a\xe0\x8b\x6b\x50\x9a\x45\x10\x87\x0c\x75\x9f\x32\x5e\xe9\xa1\xfb\xc7\x64\x86\xdb\x7f\x9f\xa7\x33\x8d\x67\x3a\x57\x98\xa6\x94\xd7\xde\x0a\xed\x72\xb4\xd7\x39\xc3\xf1\x43\xf8\xff\xd3\x19\xcf\x53\xd2\xbb\xf6\x66\x43\xd0\x31\x7e\x77\x79\x7d\xfa\x7f\xe7\xf3\xeb\x77\x57\xd7\xa7\xff\x7b\x3e\x99\x33\xf9\xdd\x9d\xca\x41\x23\x0c\xa9\x52\x81\x11\x0c\xe2\xe9\xee\xee\x6a\xab\xb4\xcf\x61\x2f\x36\x26\xae\x33\x22\x38\x84\x9f\xe4\x5e\x20\xee\x08\x07\x80\x5a\x76\x5f\x91\x1d\x57\x33\x54\x96\x7c\x81\x63\x85\x15\x61\xc5\x43\xf8\x69\x38\xca\xe1\xec\x78\x2f\x2e\xfb\x32\xe7\x50\xf2\x7c\x85\xb5\xa4\xd2\x69\x9b\x71\x58\xf5\x80\x33\x7f\x72\x68\x25\xc9\xf4\x78\xf6\x77\xa4\xff\x08\x91\xde\xfb\x8f\x54\xe9\xfd\x54\xb8\x22\x7c\x4e\x8f\x67\x30\xb8\x7c\x10\x80\x61\xdc\x7c\x2d\x60\x02\x19\x7e\x2d\xfe\xbe\x1e\x08\x81\x51\x19\xf0\xe8\xe1\xc1\xb8\xae\xf5\xe1\x13\x44\x43\xcb\xb6\xc2\xea\x90\xfc\x75\x91\x3e\x41\x1c\xb4\x4c\x29\x3b\x6c\xb8\x7e\x29\x08\xee\x25\xca\x6f\x4c\x8c\xe7\x27\x3b\x66\x49\xce\xac\x92\xa7\xfc\x42\x34\xfe\x06\xc3\x3e\x7b\xd4\xac\xcf\xbe\xc5\xa8\xcf\xbe\xc1\xa4\x44\xd4\x99\xeb\x5b\x8d\xfc\x0c\x06\x35\x42\x55\xab\xa7\xc8\x74\x41\x82\xe2\xfa\xa6\x35\xee\xd9\x53\xd8\x36\x32\xcd\x9d\xfa\x88\x1d\xd7\xef\x6f\xdb\x59\xd9\xd8\xea\xef\x0c\xf9\x63\x64\xc8\xfd\xdd\x48\x9a\x1d\x1f\xcd\x27\xaf\x61\x30\xf8\xdd\xa4\x03\x2e\x1c\x1e\x84\x55\x47\xa2\x83\x62\x0f\xee\x0d\x07\x9c\xf2\xb5\x90\xea\xc8\x23\xac\xf8\x4a\x9c\x7e\x43\xc0\x75\x1c\x09\x60\x0c\x6a\xb4\xec\x7c\x4f\x12\x7d\x1d\xeb\x0a\x2b\xc6\x02\x4f\x82\x31\x36\x6c\x7d\x55\x6f\xd8\x7e\xff\x00\xe4\x26\xcb\xb1\xf0\x59\x01\x12\x5d\x66\x55\x1a\x7d\x7c\xb7\x6b\xdd\x96\x83\x47\x1f\x66\x10\xa8\xef\xbf\xcd\x24\x2d\x9f\x27\x8d\xe6\x6e\xbf\xd6\xd5\xef\x47\xb1\xe6\xe2\x98\x5f\x43\x42\xb0\x6e\x02\xf5\x87\x0f\xd2\xed\xc3\x3d\x1a\xa2\x3d\xf8\x6f\x93\x86\xd7\x05\xb6\x42\x26\x34\xd7\xf9\xca\x17\xc8\x8f\x41\xfc\x7c\x1f\x2d\x53\x89\x8f\x46\x77\x6f\x08\x70\x49\x73\xcf\x8f\xae\x2e\x5f\xd0\x91\x77\xf8\x8c\x61\x2f\x46\x15\x45\xb6\xc4\x7c\xaf\xdd\xeb\x7f\x28\x09\xfe\xb5\x6d\x98\xc5\xee\x0e\x9c\x5a\xf7\xee\x75\x03\xdb\xee\x9a\xab\x31\x53\xb9\x42\x09\xbf\x9b\x34\x64\xe1\xf0\xff\x03\x26\xbe\x07\x30\x15\xcd\xc9\x8d\x22\xd4\x83\x66\xe2\xa6\x6d\xb8\xdd\x1c\xfc\x0e\x3d\x82\x99\x37\x56\x2c\xf0\x3b\xb4\x06\x7a\x7f\xa1\x81\xf7\xb9\xf6\x5d\xd2\x83\x0b\x93\x89\x00\xda\xc0\xad\x9d\xc7\x6a\x98\xf0\x50\x3c\x48\x08\xd7\x0f\x85\xf2\x58\x2a\xc7\x8d\x30\x6e\xc7\x6d\x35\xde\x6b\xe1\x0b\x07\xab\x42\x65\x45\x1b\xa9\xca\x81\x28\x4b\xb3\x42\x19\x1b\x94\xe8\x42\x5b\x2f\x0c\x9e\xa8\x4d\xef\x66\xb8\x4f\x52\xbc\x9e\xcf\xa7\x71\xc7\xee\xb5\xd7\x1b\x7e\xf9\x2b\x8d\x90\x50\x37\x69\xa9\x32\x08\x95\x67\x6c\x2a\xad\x30\x85\x1b\x25\x40\xc0\xd9\xe9\xbc\x7d\xcc\x1e\x26\x5b\xac\xc6\x3b\x1d\x3d\x4a\x52\x85\xf7\xf5\x73\xf7\x62\x7b\x85\xdb\x69\x86\xbd\x1c\xb9\x24\x09\x5e\x3c\x7b\x39\xde\x64\x03\xd9\xbe\x0b\x3c\xf1\xdb\xfa\xbd\xa7\xef\xa7\x6a\x7b\xf7\x60\x12\x13\x34\x72\xef\x93\xf4\xda\xfe\x7b\x13\xcb\x30\x7b\x09\xb5\x35\x37\x4a\xa2\x75\xe0\x9a\xac\x00\xe1\xe0\xad\xd2\xca\xb4\x6f\x13\x13\xac\x8b\xa4\x07\x67\xa8\xd1\xaa\x8c\x94\x11\xfe\xcd\x64\xa3\x10\xce\x8a\xe1\xff\x4c\x4e\xb5\xac\x8d\xd2\x61\xf7\x30\xd4\x8a\x1c\xbe\xb6\x85\x0b\xbd\xef\x2d\x1b\x3d\xa6\xe3\x1f\xb7\xbb\x9d\xcc\x56\x2a\xf7\x8f\xcb\xfd\xde\xa1\xbd\xfc\x4c\xfb\x12\xe0\xa8\xf1\x05\x3f\x0b\x84\x86\x25\x6a\xa1\xfd\x16\x75\x18\x88\xaf\xe7\x6d\x02\xdb\x9a\xef\xc1\xab\xd1\x08\xde\x1e\x93\x5c\x45\xa3\x97\x33\xf5\x11\x8f\xd7\x9e\x5c\xe7\xd5\x28\xfe\x25\xff\x0c\x00\x00\xff\xff\x87\x1e\x8e\xa3\x1c\x28\x00\x00")

func configDefaultConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_configDefaultConfigYaml,
		"config/default-config.yaml",
	)
}

func configDefaultConfigYaml() (*asset, error) {
	bytes, err := configDefaultConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/default-config.yaml", size: 10268, mode: os.FileMode(420), modTime: time.Unix(1527896032, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configHtcondorTemplateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xcd\x6e\xea\x30\x10\x85\xf7\x7e\x8a\x11\xd2\x5d\x26\x97\x17\xc8\xa6\x80\x10\x9b\x22\xd1\xa8\x3f\x2b\xcb\xe0\x49\xb0\xe2\x8c\x61\xec\x09\xad\xa2\xbc\x7b\x15\x40\xad\xa8\x4a\x77\x47\x3e\xdf\xf9\x3c\x42\xae\x43\x8e\x08\x05\x74\x86\x9c\xf7\x46\xd5\x98\x90\x3a\x28\xa0\x64\x41\x85\xef\xb8\x93\x64\xb6\x7e\x44\x2a\x21\x42\xaf\x0c\xd7\xd2\x22\xa5\x08\x05\x9c\x02\x37\xc8\xc0\x42\x90\x65\xc9\xc4\x66\x35\x87\xbe\xcf\xcb\x31\xd9\x61\x50\x3e\xd4\x50\x8c\x2f\x2f\x81\x9b\xb9\xe3\x61\xf8\xbf\x0b\x64\x03\x67\xd8\x21\xa5\xcc\x87\x5a\x21\x73\xe0\x9f\xd4\xe5\xaf\x2c\x26\x8b\xcc\x2a\x48\x3a\x48\xba\xcf\x04\x49\x2a\xee\x83\x78\xab\x13\x1b\x8a\x15\xb2\xae\x9c\xc7\xf1\xc4\xb7\xc5\x93\x3a\xed\x91\x74\x0a\xdf\xe5\x97\x70\xfd\xa8\x17\xaf\xab\x52\xaf\x37\x7a\xf1\xbc\x9a\x95\xaa\xef\x5d\x05\x84\x90\xcf\x0e\x12\x61\x0a\xd9\x30\xa8\xbe\x3f\xb0\xa3\x54\xc1\x84\xf1\x28\x18\x93\xde\x8d\x65\x01\xff\xec\xe4\x02\x9e\xa1\x0c\x90\xec\x39\x5d\x15\x1b\xd3\x2e\xb7\x30\xcd\xef\x59\x5a\x6c\x03\x7f\x8c\x9e\x7c\x5a\xc1\xf2\x61\x72\x9d\xfc\x6e\x9b\xbb\xd8\xfc\xa9\xb3\x2e\x36\x37\xb2\xcb\xe2\xc6\xa6\x8e\x82\x82\xea\x33\x00\x00\xff\xff\x61\xe0\x01\xde\xf9\x01\x00\x00")

func configHtcondorTemplateTxtBytes() ([]byte, error) {
	return bindataRead(
		_configHtcondorTemplateTxt,
		"config/htcondor-template.txt",
	)
}

func configHtcondorTemplateTxt() (*asset, error) {
	bytes, err := configHtcondorTemplateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/htcondor-template.txt", size: 505, mode: os.FileMode(420), modTime: time.Unix(1527612071, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/gridengine-template.txt": configGridengineTemplateTxt,
	"config/pbs-template.txt":        configPbsTemplateTxt,
	"config/slurm-template.txt":      configSlurmTemplateTxt,
	"config/default-config.yaml":     configDefaultConfigYaml,
	"config/htcondor-template.txt":   configHtcondorTemplateTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config": {nil, map[string]*bintree{
		"default-config.yaml":     {configDefaultConfigYaml, map[string]*bintree{}},
		"gridengine-template.txt": {configGridengineTemplateTxt, map[string]*bintree{}},
		"htcondor-template.txt":   {configHtcondorTemplateTxt, map[string]*bintree{}},
		"pbs-template.txt":        {configPbsTemplateTxt, map[string]*bintree{}},
		"slurm-template.txt":      {configSlurmTemplateTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
