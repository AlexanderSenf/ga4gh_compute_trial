openapi: 3.0.1
info:
  title: Dockstore API
  description: This describes the dockstore API, a webservice that manages pairs of
    Docker images and associated metadata such as CWL documents and Dockerfiles used
    to build those images. Explore swagger.json for a Swagger 2.0 description of our
    API and explore openapi.yaml for OpenAPI 3.0 descriptions.
  termsOfService: TBD
  contact:
    name: Dockstore@ga4gh
    url: https://discuss.dockstore.org/t/opening-helpdesk-tickets/1506
    email: theglobalalliance@genomicsandhealth.org
  license:
    name: Apache License Version 2.0
    url: https://github.com/dockstore/dockstore/blob/develop/LICENSE
  version: 1.9.0-alpha.1-SNAPSHOT
servers:
- url: /api
  description: Current server when hosted on AWS
  variables: {}
- url: /
  description: When working locally
  variables: {}
- url: https://dockstore.org/api
  description: Production server
  variables: {}
- url: https://staging.dockstore.org/api
  description: Staging server
  variables: {}
- url: https://dev.dockstore.net/api
  description: Nightly build server
  variables: {}
tags:
- name: aliases
  description: Create, update list aliases for accessing entries
- name: organizations
  description: Operations on Dockstore organizations
- name: NIHdatacommons
  description: Needed for SmartAPI compatibility apparantly, might be cargo cult behaviour
- name: containers
  description: List and register entries in the dockstore (pairs of images + metadata
    (CWL and Dockerfile))
- name: containertags
  description: List and modify tags for containers
- name: entries
  description: Interact with entries in Dockstore regardless of whether they are containers
    or workflows
- name: hosted
  description: Created and modify hosted entries in the dockstore
- name: metadata
  description: Information about Dockstore like RSS, sitemap, lists of dependencies,
    etc.
- name: curation
  description: List and modify notifications for users of Dockstore
- name: workflows
  description: List and register workflows in the dockstore (CWL, Nextflow, WDL)
- name: tokens
  description: List, modify, refresh, and delete tokens for external services
- name: toolTester
  description: Interactions with the Dockstore-support's ToolTester application
- name: users
  description: List, modify, and manage end users of the dockstore
- name: extendedGA4GH
  description: Optional experimental extensions of the GA4GH API
- name: GA4GHV20
  description: A curated subset of resources proposed as a common standard for tool
    repositories. Implements TRS [2.0.0](https://github.com/ga4gh/tool-registry-service-schemas/releases/tag/2.0.0).
- name: GA4GH
  description: A curated subset of resources proposed as a common standard for tool
    repositories. Implements TRS [2.0.0-beta.2](https://github.com/ga4gh/tool-registry-service-schemas/releases/tag/2.0.0-beta.2)
    . Integrators are welcome to use these endpoints but they are subject to change
    based on community input.
- name: GA4GHV1
  description: A curated subset of resources proposed as a common standard for tool
    repositories. Implements TRS [1.0.0](https://github.com/ga4gh/tool-registry-service-schemas/releases/tag/1.0.0)
    and is considered final (not subject to change)
paths:
  /organizations/collections/{collectionId}/aliases:
    post:
      tags:
      - organizations
      summary: Add aliases linked to a collection in Dockstore.
      description: Aliases are alphanumerical (case-insensitive and may contain internal
        hyphens), given in a comma-delimited list.
      operationId: addCollectionAliases_1
      parameters:
      - name: collectionId
        in: path
        description: Collection to modify.
        required: true
        schema:
          type: integer
          format: int64
      - name: aliases
        in: query
        description: Comma-delimited list of aliases.
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Aliasable'
      security:
      - bearer: []
  /organizations/collections/{alias}/aliases:
    get:
      tags:
      - organizations
      summary: Retrieve a collection by alias.
      description: Retrieve a collection by alias.
      operationId: getCollectionByAlias
      parameters:
      - name: alias
        in: path
        description: Alias of the collection.
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
  /organizations/{organizationId}/collections/{collectionId}:
    get:
      tags:
      - organizations
      summary: Retrieve a collection by ID.
      description: Retrieve a collection by ID. Supports optional authentication.
      operationId: getCollectionById
      parameters:
      - name: organizationId
        in: path
        description: Organization ID.
        required: true
        schema:
          type: integer
          format: int64
      - name: collectionId
        in: path
        description: Collection ID.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
      security:
      - bearer: []
    put:
      tags:
      - organizations
      summary: Update a collection.
      description: Update a collection. Currently only name, display name, description,
        and topic can be updated.
      operationId: updateCollection
      parameters:
      - name: organizationId
        in: path
        description: Organization ID.
        required: true
        schema:
          type: integer
          format: int64
      - name: collectionId
        in: path
        description: Collection ID.
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: Collection to register.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Collection'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
      security:
      - bearer: []
  /organizations/{organizationName}/collections/{collectionName}/name:
    get:
      tags:
      - organizations
      summary: Retrieve a collection by name.
      description: Retrieve a collection by name. Supports optional authentication.
      operationId: getCollectionById_1
      parameters:
      - name: organizationName
        in: path
        description: Organization name.
        required: true
        schema:
          type: string
      - name: collectionName
        in: path
        description: Collection name.
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
      security:
      - bearer: []
  /organizations/{organizationId}/collections/{collectionId}/entry:
    post:
      tags:
      - organizations
      summary: Add an entry to a collection.
      description: Add an entry to a collection.
      operationId: addEntryToCollection
      parameters:
      - name: organizationId
        in: path
        description: Organization ID.
        required: true
        schema:
          type: integer
          format: int64
      - name: collectionId
        in: path
        description: Collection ID.
        required: true
        schema:
          type: integer
          format: int64
      - name: entryId
        in: query
        description: Entry ID.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
      security:
      - bearer: []
    delete:
      tags:
      - organizations
      summary: Delete an entry to a collection.
      description: Delete an entry to a collection.
      operationId: deleteEntryFromCollection
      parameters:
      - name: organizationId
        in: path
        description: Organization ID.
        required: true
        schema:
          type: integer
          format: int64
      - name: collectionId
        in: path
        description: Collection ID.
        required: true
        schema:
          type: integer
          format: int64
      - name: entryId
        in: query
        description: Entry ID.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
      security:
      - bearer: []
  /organizations/{organizationId}/collections:
    get:
      tags:
      - organizations
      summary: Retrieve all collections for an organization.
      description: Retrieve all collections for an organization. Supports optional
        authentication.
      operationId: getCollectionsFromOrganization
      parameters:
      - name: organizationId
        in: path
        description: Organization ID.
        required: true
        schema:
          type: integer
          format: int64
      - name: include
        in: query
        description: Included fields.
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Collection'
      security:
      - bearer: []
    post:
      tags:
      - organizations
      summary: Create a collection in the given organization.
      description: Create a collection in the given organization.
      operationId: createCollection
      parameters:
      - name: organizationId
        in: path
        description: Organization ID.
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: Collection to register.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Collection'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
      security:
      - bearer: []
  /organizations/{organizationId}/collections/{collectionId}/description:
    get:
      tags:
      - organizations
      summary: Retrieve a collection description by organization ID and collection
        ID.
      description: Retrieve a collection description by organization ID and collection
        ID. Supports optional authentication.
      operationId: getCollectionDescription
      parameters:
      - name: organizationId
        in: path
        description: Organization ID.
        required: true
        schema:
          type: integer
          format: int64
      - name: collectionId
        in: path
        description: Collection ID.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: string
      security:
      - bearer: []
    put:
      tags:
      - organizations
      summary: Update a collection's description.
      description: Update a collection's description. Description in markdown.
      operationId: updateCollectionDescription
      parameters:
      - name: organizationId
        in: path
        description: Organization ID.
        required: true
        schema:
          type: integer
          format: int64
      - name: collectionId
        in: path
        description: Collection ID.
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: Collections's description in markdown.
        content:
          '*/*':
            schema:
              type: string
        required: true
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
      security:
      - bearer: []
  /entries/{id}/topic:
    post:
      tags:
      - entries
      description: Create a discourse topic for an entry.
      operationId: setDiscourseTopic
      parameters:
      - name: id
        in: path
        description: The id of the entry to add a topic to.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entry'
      security:
      - bearer: []
  /events:
    get:
      tags:
      - events
      summary: Get events based on filters.
      description: Optional authentication.
      operationId: getEvents
      parameters:
      - name: event_search_type
        in: query
        schema:
          type: string
          enum:
          - STARRED_ENTRIES
          - STARRED_ORGANIZATION
          - ALL_STARRED
      - name: limit
        in: query
        schema:
          maximum: 100
          minimum: 1
          type: integer
          format: int32
          default: 10
      - name: offset
        in: query
        schema:
          type: integer
          format: int32
          default: 0
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
      security:
      - bearer: []
  /metadata/dockerRegistryList:
    get:
      tags:
      - metadata
      summary: Get the list of docker registries supported on Dockstore
      description: Get the list of docker registries supported on Dockstore, NO authentication
      operationId: getDockerRegistries
      responses:
        default:
          description: List of Docker registries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RegistryBean'
  /metadata/sitemap:
    get:
      tags:
      - metadata
      summary: List all available workflow, tool, organization, and collection paths.
      description: List all available workflow, tool, organization, and collection
        paths. Available means published for tools/workflows, and approved for organizations
        and their respective collections. NO authentication
      operationId: sitemap
      responses:
        default:
          description: default response
          content:
            text/html:
              schema:
                type: string
            text/xml:
              schema:
                type: string
  /metadata/rss:
    get:
      tags:
      - metadata
      summary: List all published tools and workflows in creation order
      description: List all published tools and workflows in creation order, NO authentication
      operationId: rssFeed
      responses:
        default:
          description: default response
          content:
            text/xml:
              schema:
                type: string
  /metadata/runner_dependencies:
    get:
      tags:
      - metadata
      summary: Returns the file containing runner dependencies
      description: Returns the file containing runner dependencies, NO authentication
      operationId: getRunnerDependencies
      parameters:
      - name: client_version
        in: query
        description: The Dockstore client version
        schema:
          type: string
      - name: python_version
        in: query
        description: Python version, only relevant for the cwltool runner
        schema:
          type: string
          default: "3"
      - name: runner
        in: query
        description: The tool runner
        schema:
          type: string
          default: cwltool
          enum:
          - cwltool
      - name: output
        in: query
        description: Response type
        schema:
          type: string
          default: text
          enum:
          - json
          - text
      responses:
        default:
          description: The requirements.txt file
          content:
            application/json:
              schema:
                type: string
  /metadata/sourceControlList:
    get:
      tags:
      - metadata
      summary: Get the list of source controls supported on Dockstore
      description: Get the list of source controls supported on Dockstore, NO authentication
      operationId: getSourceControlList
      responses:
        default:
          description: List of source control repositories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SourceControlBean'
  /metadata/descriptorLanguageList:
    get:
      tags:
      - metadata
      summary: Get the list of descriptor languages supported on Dockstore
      description: Get the list of descriptor languages supported on Dockstore, NO
        authentication
      operationId: getDescriptorLanguages
      responses:
        default:
          description: List of descriptor languages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DescriptorLanguageBean'
  /metadata/okHttpCachePerformance:
    get:
      tags:
      - metadata
      summary: Get measures of cache performance
      description: Get measures of cache performance, NO authentication
      operationId: getCachePerformance
      responses:
        default:
          description: Cache performance information
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
  /metadata/elasticSearch:
    get:
      tags:
      - metadata
      summary: Successful response if elastic search is up and running
      description: Successful response if elastic search is up and running, NO authentication
      operationId: checkElasticSearch
      responses:
        default:
          description: default response
          content:
            text/html: {}
            text/xml: {}
  /metadata/config.json:
    get:
      tags:
      - metadata
      summary: Configuration for UI clients of the API
      description: Configuration, NO authentication
      operationId: getConfig
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config'
  /organizations:
    get:
      tags:
      - organizations
      summary: List all available organizations.
      description: List all organizations that have been approved by a curator or
        admin, sorted by number of stars.
      operationId: getApprovedOrganizations
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organization'
    post:
      tags:
      - organizations
      summary: Create an organization.
      description: Create an organization. Organization requires approval by an admin
        before being made public.
      operationId: createOrganization
      requestBody:
        description: Organization to register.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Organization'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
      security:
      - bearer: []
  /organizations/{organizationId}/approve:
    post:
      tags:
      - organizations
      summary: Approve an organization.
      description: Approve the organization with the given id. Admin/curator only.
      operationId: approveOrganization
      parameters:
      - name: organizationId
        in: path
        description: Organization ID.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
      security:
      - bearer: []
  /organizations/{organizationId}/reject:
    post:
      tags:
      - organizations
      summary: Reject an organization.
      description: Reject the organization with the given id. Admin/curator only.
      operationId: rejectOrganization
      parameters:
      - name: organizationId
        in: path
        description: Organization ID.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
      security:
      - bearer: []
  /organizations/{organizationId}/request:
    post:
      tags:
      - organizations
      summary: Re-request an organization review.
      description: Re-request a review of the given organization. Requires the organization
        to be rejected.
      operationId: requestOrganizationReview
      parameters:
      - name: organizationId
        in: path
        description: Organization ID.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
      security:
      - bearer: []
  /organizations/name/{name}:
    get:
      tags:
      - organizations
      summary: Retrieve an organization by name.
      description: Retrieve an organization by name. Supports optional authentication.
      operationId: getOrganizationByName
      parameters:
      - name: name
        in: path
        description: Organization name.
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
      security:
      - bearer: []
  /organizations/{organizationId}:
    get:
      tags:
      - organizations
      summary: Retrieve an organization by ID.
      description: Retrieve an organization by ID. Supports optional authentication.
      operationId: getOrganizationById
      parameters:
      - name: organizationId
        in: path
        description: Organization ID.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
      security:
      - bearer: []
    put:
      tags:
      - organizations
      summary: Update an organization.
      description: Update an organization. Currently only name, display name, description,
        topic, email, link, avatarUrl, and location can be updated.
      operationId: updateOrganization
      parameters:
      - name: organizationId
        in: path
        description: Organization ID.
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: Organization to register.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Organization'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
      security:
      - bearer: []
  /organizations/{organizationId}/description:
    get:
      tags:
      - organizations
      summary: Retrieve an organization description by organization ID.
      description: Retrieve an organization description by organization ID. Supports
        optional authentication.
      operationId: getOrganizationDescription
      parameters:
      - name: organizationId
        in: path
        description: Organization ID.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: string
      security:
      - bearer: []
    put:
      tags:
      - organizations
      summary: Update an organization's description.
      description: Update an organization's description. Expects description in markdown
        format.
      operationId: updateOrganizationDescription
      parameters:
      - name: organizationId
        in: path
        description: Organization ID.
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: Organization's description in markdown.
        content:
          '*/*':
            schema:
              type: string
        required: true
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
      security:
      - bearer: []
  /organizations/{organizationId}/members:
    get:
      tags:
      - organizations
      summary: Retrieve all members for an organization.
      description: Retrieve all members for an organization. Supports optional authentication.
      operationId: getOrganizationMembers
      parameters:
      - name: organizationId
        in: path
        description: Organization ID.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  $ref: '#/components/schemas/OrganizationUser'
      security:
      - bearer: []
  /organizations/{organizationId}/events:
    get:
      tags:
      - organizations
      summary: Retrieve all events for an organization.
      description: Retrieve all events for an organization. Supports optional authentication.
      operationId: getOrganizationEvents
      parameters:
      - name: organizationId
        in: path
        description: Organization ID.
        required: true
        schema:
          type: integer
          format: int64
      - name: offset
        in: query
        description: Start index of paging.  If this exceeds the current result set
          return an empty set.  If not specified in the request, this will start at
          the beginning of the results.
        required: true
        schema:
          type: integer
          format: int32
          default: 0
      - name: limit
        in: query
        description: Amount of records to return in a given page, limited to 100
        required: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          format: int32
          default: 100
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
      security:
      - bearer: []
  /organizations/{organizationId}/star:
    put:
      tags:
      - organizations
      summary: Star an organization.
      description: Star an organization.
      operationId: starOrganization
      parameters:
      - name: organizationId
        in: path
        description: Organization ID.
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: StarRequest to star an organization for a user.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/StarRequest'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
      security:
      - bearer: []
  /organizations/{organizationId}/unstar:
    delete:
      tags:
      - organizations
      summary: Unstar an organization.
      description: Unstar an organization.
      operationId: unstarOrganization
      parameters:
      - name: organizationId
        in: path
        description: Organization ID.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json: {}
      security:
      - bearer: []
  /organizations/{organizationId}/starredUsers:
    get:
      tags:
      - organizations
      summary: Return list of users who starred the given approved organization.
      description: Return list of users who starred the given approved organization.
      operationId: getStarredUsersForApprovedOrganization
      parameters:
      - name: organizationId
        in: path
        description: Organization ID.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /organizations/all:
    get:
      tags:
      - organizations
      summary: List all organizations.
      description: List all organizations, regardless of organization status. Admin/curator
        only.
      operationId: getAllOrganizations
      parameters:
      - name: type
        in: query
        description: Filter to apply to organizations.
        required: true
        schema:
          type: string
          enum:
          - all
          - pending
          - rejected
          - approved
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organization'
      security:
      - bearer: []
  /organizations/{organizationId}/users/{username}:
    put:
      tags:
      - organizations
      summary: Add a user role to an organization.
      description: Add a user role to an organization.
      operationId: addUserToOrgByUsername
      parameters:
      - name: username
        in: path
        description: User to add to org.
        required: true
        schema:
          type: string
      - name: organizationId
        in: path
        description: Organization ID.
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: Role of user.
        content:
          '*/*':
            schema:
              type: string
              enum:
              - MAINTAINER
              - MEMBER
        required: true
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationUser'
      security:
      - bearer: []
  /organizations/{organizationId}/user:
    put:
      tags:
      - organizations
      summary: Add a user role to an organization.
      description: Add a user role to an organization.
      operationId: addUserToOrg
      parameters:
      - name: role
        in: query
        description: Role of user.
        required: true
        schema:
          type: string
          enum:
          - MAINTAINER
          - MEMBER
      - name: userId
        in: query
        description: User ID of user to add to organization.
        required: true
        schema:
          type: integer
          format: int64
      - name: organizationId
        in: path
        description: Organization ID.
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: This is here to appease Swagger. It requires PUT methods to have
          a body, even if it is empty. Please leave it empty.
        content:
          '*/*':
            schema:
              type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationUser'
      security:
      - bearer: []
    post:
      tags:
      - organizations
      summary: Update a user role in an organization.
      description: Update a user role in an organization.
      operationId: updateUserRole
      parameters:
      - name: role
        in: query
        description: Role of user.
        required: true
        schema:
          type: string
          enum:
          - MAINTAINER
          - MEMBER
      - name: userId
        in: query
        description: User ID of user to add to organization.
        required: true
        schema:
          type: integer
          format: int64
      - name: organizationId
        in: path
        description: Organization ID.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationUser'
      security:
      - bearer: []
    delete:
      tags:
      - organizations
      summary: Remove a user from an organization.
      description: Remove a user from an organization.
      operationId: deleteUserRole
      parameters:
      - name: userId
        in: query
        description: User ID of user to add to organization.
        required: true
        schema:
          type: integer
          format: int64
      - name: organizationId
        in: path
        description: Organization ID.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json: {}
      security:
      - bearer: []
  /organizations/{organizationId}/invitation:
    post:
      tags:
      - organizations
      summary: Accept or reject an organization invitation.
      description: Accept or reject an organization invitation. True accepts the invitation,
        false rejects the invitation.
      operationId: acceptOrRejectInvitation
      parameters:
      - name: organizationId
        in: path
        description: Organization ID.
        required: true
        schema:
          type: integer
          format: int64
      - name: accept
        in: query
        description: Accept or reject.
        required: true
        schema:
          type: boolean
      responses:
        default:
          description: default response
          content:
            application/json: {}
      security:
      - bearer: []
  /organizations/{organizationId}/aliases:
    post:
      tags:
      - organizations
      summary: Add aliases linked to a listing in Dockstore.
      description: Add aliases linked to a listing in Dockstore. Aliases are alphanumerical
        (case-insensitive and may contain internal hyphens), given in a comma-delimited
        list.
      operationId: addOrganizationAliases_1
      parameters:
      - name: organizationId
        in: path
        description: Organization to modify.
        required: true
        schema:
          type: integer
          format: int64
      - name: aliases
        in: query
        description: Comma-delimited list of aliases.
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Aliasable'
      security:
      - bearer: []
  /organizations/{alias}/aliases:
    get:
      tags:
      - organizations
      summary: Retrieve an organization by alias.
      description: Retrieve an organization by alias.
      operationId: getOrganizationByAlias
      parameters:
      - name: alias
        in: path
        description: Alias.
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
  /toolTester/logs/search:
    get:
      tags:
      - toolTester
      summary: Search for ToolTester log files
      operationId: search
      parameters:
      - name: tool_id
        in: query
        description: TRS Tool Id
        required: true
        schema:
          type: string
        example: '#workflow/github.com/dockstore/hello_world'
      - name: tool_version_name
        in: query
        required: true
        schema:
          type: string
        example: v1.0.0
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ToolTesterLog'
  /toolTester/logs:
    get:
      tags:
      - toolTester
      summary: Get ToolTester log file
      operationId: getToolTesterLog
      parameters:
      - name: tool_id
        in: query
        description: TRS Tool Id
        required: true
        schema:
          type: string
        example: '#workflow/github.com/dockstore/hello_world'
      - name: tool_version_name
        in: query
        required: true
        schema:
          type: string
        example: v1.0.0
      - name: test_filename
        in: query
        required: true
        schema:
          type: string
        example: hello_world.cwl.json
      - name: runner
        in: query
        required: true
        schema:
          type: string
        example: cwltool
      - name: log_type
        in: query
        required: true
        schema:
          type: string
          enum:
          - FULL
          - SUMMARY
      - name: filename
        in: query
        required: true
        schema:
          type: string
        example: 1554477737092.log
      responses:
        default:
          description: default response
          content:
            text/plain:
              schema:
                type: string
  /users/{userId}:
    get:
      tags:
      - users
      operationId: getSpecificUser
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/user:
    get:
      tags:
      - users
      operationId: getUser
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/users/organizations:
    get:
      tags:
      - users
      description: Get all of the Dockstore organizations for a user, sorted by most
        recently updated.
      operationId: getUserDockstoreOrganizations
      parameters:
      - name: count
        in: query
        description: Maximum number of organizations to return
        schema:
          type: integer
          format: int32
      - name: filter
        in: query
        description: Filter paths with matching text
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrganizationUpdateTime'
      security:
      - bearer: []
  /users/users/entries:
    get:
      tags:
      - users
      description: Get all of the entries for a user, sorted by most recently updated.
      operationId: getUserEntries
      parameters:
      - name: count
        in: query
        description: Maximum number of entries to return
        schema:
          type: integer
          format: int32
      - name: filter
        in: query
        description: Filter paths with matching text
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EntryUpdateTime'
      security:
      - bearer: []
  /users/registries:
    get:
      tags:
      - users
      description: Get all of the git registries accessible to the logged in user.
      operationId: getUserRegistries
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  enum:
                  - dockstore.org
                  - github.com
                  - bitbucket.org
                  - gitlab.com
      security:
      - bearer: []
  /users/registries/{gitRegistry}/organizations:
    get:
      tags:
      - users
      description: Get all of the organizations for a given git registry accessible
        to the logged in user.
      operationId: getUserOrganizations
      parameters:
      - name: gitRegistry
        in: path
        description: Git registry
        required: true
        schema:
          type: string
          enum:
          - dockstore.org
          - github.com
          - bitbucket.org
          - gitlab.com
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  type: string
      security:
      - bearer: []
  /users/registries/{gitRegistry}/organizations/{organization}:
    get:
      tags:
      - users
      description: Get all of the repositories for an organization for a given git
        registry accessible to the logged in user.
      operationId: getUserOrganizationRepositories
      parameters:
      - name: gitRegistry
        in: path
        description: Git registry
        required: true
        schema:
          type: string
          enum:
          - dockstore.org
          - github.com
          - bitbucket.org
          - gitlab.com
      - name: organization
        in: path
        description: Git organization
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Repository'
      security:
      - bearer: []
  /workflows/registries/{gitRegistry}/organizations/{organization}/repositories/{repositoryName}:
    post:
      tags:
      - workflows
      description: Adds a workflow for a registry and repository path with defaults
        set.
      operationId: addWorkflow
      parameters:
      - name: gitRegistry
        in: path
        description: Git registry
        required: true
        schema:
          type: string
          enum:
          - dockstore.org
          - github.com
          - bitbucket.org
          - gitlab.com
      - name: organization
        in: path
        description: Git repository organization
        required: true
        schema:
          type: string
      - name: repositoryName
        in: path
        description: Git repository name
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BioWorkflow'
      security:
      - bearer: []
    delete:
      tags:
      - workflows
      description: Delete a stubbed workflow for a registry and repository path.
      operationId: deleteWorkflow
      parameters:
      - name: gitRegistry
        in: path
        description: Git registry
        required: true
        schema:
          type: string
          enum:
          - dockstore.org
          - github.com
          - bitbucket.org
          - gitlab.com
      - name: organization
        in: path
        description: Git repository organization
        required: true
        schema:
          type: string
      - name: repositoryName
        in: path
        description: Git repository name
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
      security:
      - bearer: []
  /ga4gh/trs/v2/toolClasses:
    get:
      tags:
      - GA4GHV20
      summary: List all tool types
      description: 'This endpoint returns all tool-classes available. '
      operationId: toolClassesGet
      responses:
        "200":
          description: A list of potential tool classes.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ToolClass'
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ToolClass'
      security:
      - BEARER: []
  /ga4gh/trs/v2/tools/{id}:
    get:
      tags:
      - GA4GHV20
      summary: List one specific tool, acts as an anchor for self references
      description: This endpoint returns one specific tool (which has ToolVersions
        nested inside it).
      operationId: toolsIdGet
      parameters:
      - name: id
        in: path
        description: A unique identifier of the tool, scoped to this registry, for
          example `123456`.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: A tool.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
            text/plain:
              schema:
                $ref: '#/components/schemas/Tool'
        "404":
          description: The tool can not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - BEARER: []
  /ga4gh/trs/v2/tools/{id}/versions:
    get:
      tags:
      - GA4GHV20
      summary: List versions of a tool
      description: Returns all versions of the specified tool.
      operationId: toolsIdVersionsGet
      parameters:
      - name: id
        in: path
        description: A unique identifier of the tool, scoped to this registry, for
          example `123456`.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: An array of tool versions.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ToolVersion'
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ToolVersion'
      security:
      - BEARER: []
  /ga4gh/trs/v2/tools/{id}/versions/{version_id}:
    get:
      tags:
      - GA4GHV20
      summary: List one specific tool version, acts as an anchor for self references
      description: This endpoint returns one specific tool version.
      operationId: toolsIdVersionsVersionIdGet
      parameters:
      - name: id
        in: path
        description: A unique identifier of the tool, scoped to this registry, for
          example `123456`.
        required: true
        schema:
          type: string
      - name: version_id
        in: path
        description: An identifier of the tool version, scoped to this registry, for
          example `v1`. We recommend that versions use semantic versioning https://semver.org/spec/v2.0.0.html  (For
          example, `1.0.0` instead of `develop`)
        required: true
        schema:
          type: string
      responses:
        "200":
          description: A tool version.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolVersion'
            text/plain:
              schema:
                $ref: '#/components/schemas/ToolVersion'
        "404":
          description: The tool can not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - BEARER: []
  /ga4gh/trs/v2/tools/{id}/versions/{version_id}/{type}/descriptor:
    get:
      tags:
      - GA4GHV20
      summary: Get the tool descriptor for the specified tool
      description: Returns the descriptor for the specified tool (examples include
        CWL, WDL, or Nextflow documents).
      operationId: toolsIdVersionsVersionIdTypeDescriptorGet
      parameters:
      - name: type
        in: path
        description: The output type of the descriptor. Plain types return the bare
          descriptor while the "non-plain" types return a descriptor wrapped with
          metadata. Allowable values include "CWL", "WDL", "NFL", "PLAIN_CWL", "PLAIN_WDL",
          "PLAIN_NFL".
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: A unique identifier of the tool, scoped to this registry, for
          example `123456`.
        required: true
        schema:
          type: string
      - name: version_id
        in: path
        description: An identifier of the tool version, scoped to this registry, for
          example `v1`.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: The tool descriptor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileWrapper'
            text/plain:
              schema:
                $ref: '#/components/schemas/FileWrapper'
        "404":
          description: The tool descriptor can not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - BEARER: []
  /ga4gh/trs/v2/tools/{id}/versions/{version_id}/{type}/descriptor/{relative_path}:
    get:
      tags:
      - GA4GHV20
      summary: Get additional tool descriptor files relative to the main file
      description: Descriptors can often include imports that refer to additional
        descriptors. This returns additional descriptors for the specified tool in
        the same or other directories that can be reached as a relative path. This
        endpoint can be useful for workflow engine implementations like cwltool to
        programmatically download all the descriptors for a tool and run it. This
        can optionally include other files described with FileWrappers such as test
        parameters and containerfiles.
      operationId: toolsIdVersionsVersionIdTypeDescriptorRelativePathGet
      parameters:
      - name: type
        in: path
        description: The output type of the descriptor. If not specified, it is up
          to the underlying implementation to determine which output type to return.
          Plain types return the bare descriptor while the "non-plain" types return
          a descriptor wrapped with metadata. Allowable values are "CWL", "WDL", "NFL",
          "PLAIN_CWL", "PLAIN_WDL", "PLAIN_NFL".
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: A unique identifier of the tool, scoped to this registry, for
          example `123456`.
        required: true
        schema:
          type: string
      - name: version_id
        in: path
        description: An identifier of the tool version for this particular tool registry,
          for example `v1`.
        required: true
        schema:
          type: string
      - name: relative_path
        in: path
        description: A relative path to the additional file (same directory or subdirectories),
          for example 'foo.cwl' would return a 'foo.cwl' from the same directory as
          the main descriptor. 'nestedDirectory/foo.cwl' would return the file  from
          a nested subdirectory.  Unencoded paths such 'sampleDirectory/foo.cwl' should
          also be allowed.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: The tool descriptor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileWrapper'
            text/plain:
              schema:
                $ref: '#/components/schemas/FileWrapper'
        "404":
          description: The tool can not be output in the specified type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - BEARER: []
  /ga4gh/trs/v2/tools:
    get:
      tags:
      - GA4GHV20
      summary: List all tools
      description: 'This endpoint returns all tools available or a filtered subset
        using metadata query parameters. '
      operationId: toolsGet
      parameters:
      - name: id
        in: query
        description: A unique identifier of the tool, scoped to this registry, for
          example `123456`.
        schema:
          type: string
      - name: alias
        in: query
        description: Support for this parameter is optional for tool registries that
          support aliases. If provided will only return entries with the given alias.
        schema:
          type: string
      - name: toolClass
        in: query
        description: Filter tools by the name of the subclass (#/definitions/ToolClass)
        schema:
          type: string
      - name: registry
        in: query
        description: The image registry that contains the image.
        schema:
          type: string
      - name: organization
        in: query
        description: The organization in the registry that published the image.
        schema:
          type: string
      - name: name
        in: query
        description: The name of the image.
        schema:
          type: string
      - name: toolname
        in: query
        description: The name of the tool.
        schema:
          type: string
      - name: description
        in: query
        description: The description of the tool.
        schema:
          type: string
      - name: author
        in: query
        description: The author of the tool (TODO a thought occurs, are we assuming
          that the author of the CWL and the image are the same?).
        schema:
          type: string
      - name: checker
        in: query
        description: Return only checker workflows.
        schema:
          type: boolean
      - name: offset
        in: query
        description: Start index of paging. Pagination results can be based on numbers
          or other values chosen by the registry implementor (for example, SHA values).
          If this exceeds the current result set return an empty set.  If not specified
          in the request, this will start at the beginning of the results.
        schema:
          type: string
      - name: limit
        in: query
        description: Amount of records to return in a given page.
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: An array of Tools that match the filter.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tool'
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tool'
      security:
      - BEARER: []
  /ga4gh/trs/v2/tools/{id}/versions/{version_id}/{type}/tests:
    get:
      tags:
      - GA4GHV20
      summary: Get a list of test JSONs
      description: Get a list of test JSONs (these allow you to execute the tool successfully)
        suitable for use with this descriptor type.
      operationId: toolsIdVersionsVersionIdTypeTestsGet
      parameters:
      - name: type
        in: path
        description: The type of the underlying descriptor. Allowable values include
          "CWL", "WDL", "NFL", "PLAIN_CWL", "PLAIN_WDL", "PLAIN_NFL". For example,
          "CWL" would return an list of ToolTests objects while "PLAIN_CWL" would
          return a bare JSON list with the content of the tests.
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: A unique identifier of the tool, scoped to this registry, for
          example `123456`.
        required: true
        schema:
          type: string
      - name: version_id
        in: path
        description: An identifier of the tool version for this particular tool registry,
          for example `v1`.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: The tool test JSON response.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FileWrapper'
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FileWrapper'
        "404":
          description: The tool can not be output in the specified type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - BEARER: []
  /ga4gh/trs/v2/tools/{id}/versions/{version_id}/containerfile:
    get:
      tags:
      - GA4GHV20
      summary: Get the container specification(s) for the specified image.
      description: Returns the container specifications(s) for the specified image.
        For example, a CWL CommandlineTool can be associated with one specification
        for a container, a CWL Workflow can be associated with multiple specifications
        for containers.
      operationId: toolsIdVersionsVersionIdContainerfileGet
      parameters:
      - name: id
        in: path
        description: A unique identifier of the tool, scoped to this registry, for
          example `123456`.
        required: true
        schema:
          type: string
      - name: version_id
        in: path
        description: An identifier of the tool version for this particular tool registry,
          for example `v1`.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: The tool payload.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FileWrapper'
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FileWrapper'
        "404":
          description: There are no container specifications for this tool.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - BEARER: []
  /ga4gh/trs/v2/tools/{id}/versions/{version_id}/{type}/files:
    get:
      tags:
      - GA4GHV20
      summary: Get a list of objects that contain the relative path and file type
      description: 'Get a list of objects that contain the relative path and file
        type. The descriptors are intended for use with the /tools/{id}/versions/{version_id}/{type}/descriptor/{relative_path
        : .+} endpoint.'
      operationId: toolsIdVersionsVersionIdTypeFilesGet
      parameters:
      - name: type
        in: path
        description: The output type of the descriptor. Examples of allowable values
          are "CWL", "WDL", and "NFL".
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: A unique identifier of the tool, scoped to this registry, for
          example `123456`.
        required: true
        schema:
          type: string
      - name: version_id
        in: path
        description: An identifier of the tool version for this particular tool registry,
          for example `v1`.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: The array of File JSON responses.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ToolFile'
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ToolFile'
        "404":
          description: The tool can not be output in the specified type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/plain:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - BEARER: []
components:
  schemas:
    Alias:
      type: object
      properties:
        content:
          type: string
    Checksum:
      required:
      - checksum
      - type
      type: object
      properties:
        checksum:
          type: string
          description: 'The hex-string encoded checksum for the data. '
        type:
          type: string
          description: The digest method used to create the checksum. The value (e.g.
            `sha-256`) SHOULD be listed as `Hash Name String` in the https://github.com/ga4gh-discovery/ga4gh-checksum/blob/master/hash-alg.csv[GA4GH
            Checksum Hash Algorithm Registry]. Other values MAY be used, as long as
            implementors are aware of the issues discussed in https://tools.ietf.org/html/rfc6920#section-9.4[RFC6920].
            GA4GH may provide more explicit guidance for use of non-IANA-registered
            algorithms in the future.
      description: 'A production (immutable) tool version is required to have a hashcode.
        Not required otherwise, but might be useful to detect changes. '
      example: '[{checksum=ea2a5db69bd20a42976838790bc29294df3af02b, type=sha1}]'
    Collection:
      required:
      - name
      - topic
      type: object
      properties:
        aliases:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Alias'
        dbCreateDate:
          type: string
          format: date-time
        dbUpdateDate:
          type: string
          format: date-time
        description:
          type: string
          description: Description of the collection
        displayName:
          maxLength: 50
          minLength: 3
          pattern: '[\w ,_\-&()'']*'
          type: string
        entries:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Entry'
        id:
          type: integer
          description: Implementation specific ID for the collection in this web service
          format: int64
        name:
          maxLength: 39
          minLength: 3
          pattern: '[a-zA-Z][a-zA-Z\d]*'
          type: string
          description: Name of the collection
          example: Alignment
        organizationID:
          type: integer
          format: int64
        organizationName:
          type: string
        topic:
          type: string
          description: Short description of the collection
          example: A collection of alignment algorithms
      description: Collection in an organization, collects entries
    Entry:
      type: object
      properties:
        aliases:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Alias'
        author:
          type: string
        checker_id:
          type: integer
          format: int64
        conceptDoi:
          type: string
        dbCreateDate:
          type: string
          format: date-time
        dbUpdateDate:
          type: string
          format: date-time
        defaultVersion:
          type: string
        description:
          type: string
        email:
          type: string
        gitUrl:
          type: string
        has_checker:
          type: boolean
        id:
          type: integer
          format: int64
        input_file_formats:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/FileFormat'
        is_published:
          type: boolean
        labels:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Label'
        lastUpdated:
          type: string
          format: date-time
        last_modified:
          type: integer
          format: int32
        last_modified_date:
          type: string
          format: date-time
        metadataFromEntry:
          $ref: '#/components/schemas/Entry'
        metadataFromVersion:
          $ref: '#/components/schemas/Version'
        output_file_formats:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/FileFormat'
        starredUsers:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/User'
        topicId:
          type: integer
          format: int64
        users:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/User'
        workflowVersions:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Version'
    FileFormat:
      type: object
      properties:
        value:
          type: string
    Image:
      type: object
      properties:
        checksums:
          type: array
          items:
            $ref: '#/components/schemas/Checksum'
        imageID:
          type: string
        repository:
          type: string
        tag:
          type: string
    Label:
      type: object
      properties:
        id:
          type: integer
          format: int64
        value:
          type: string
    Profile:
      type: object
      properties:
        avatarURL:
          type: string
        bio:
          type: string
        company:
          type: string
        email:
          type: string
        location:
          type: string
        name:
          type: string
        username:
          type: string
    SourceFile:
      type: object
      properties:
        absolutePath:
          type: string
        content:
          type: string
        frozen:
          type: boolean
        id:
          type: integer
          format: int64
        path:
          type: string
        type:
          type: string
          enum:
          - DOCKSTORE_CWL
          - DOCKSTORE_WDL
          - DOCKERFILE
          - CWL_TEST_JSON
          - WDL_TEST_JSON
          - NEXTFLOW
          - NEXTFLOW_CONFIG
          - NEXTFLOW_TEST_PARAMS
          - DOCKSTORE_YML
          - DOCKSTORE_SERVICE_YML
          - DOCKSTORE_SERVICE_TEST_JSON
          - DOCKSTORE_SERVICE_OTHER
          - DOCKSTORE_GXFORMAT2
          - GXFORMAT2_TEST_FILE
          - DOCKSTORE_SWL
          - SWL_TEST_JSON
        verifiedBySource:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/VerificationInformation'
    User:
      type: object
      properties:
        avatarUrl:
          type: string
        curator:
          type: boolean
        id:
          type: integer
          format: int64
        isAdmin:
          type: boolean
        name:
          type: string
        privacyPolicyVersion:
          type: string
          enum:
          - NONE
          - PRIVACY_POLICY_VERSION_2_5
        privacyPolicyVersionAcceptanceDate:
          type: string
          format: date-time
        setupComplete:
          type: boolean
        tosacceptanceDate:
          type: string
          format: date-time
        tosversion:
          type: string
          enum:
          - NONE
          - TOS_VERSION_1
        tosversionAcceptanceDate:
          type: string
          format: date-time
          writeOnly: true
        userProfiles:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Profile'
        username:
          type: string
    Validation:
      type: object
      properties:
        id:
          type: integer
          format: int64
        message:
          type: string
        type:
          type: string
          enum:
          - DOCKSTORE_CWL
          - DOCKSTORE_WDL
          - DOCKERFILE
          - CWL_TEST_JSON
          - WDL_TEST_JSON
          - NEXTFLOW
          - NEXTFLOW_CONFIG
          - NEXTFLOW_TEST_PARAMS
          - DOCKSTORE_YML
          - DOCKSTORE_SERVICE_YML
          - DOCKSTORE_SERVICE_TEST_JSON
          - DOCKSTORE_SERVICE_OTHER
          - DOCKSTORE_GXFORMAT2
          - GXFORMAT2_TEST_FILE
          - DOCKSTORE_SWL
          - SWL_TEST_JSON
        valid:
          type: boolean
    VerificationInformation:
      type: object
      properties:
        metadata:
          type: string
        platformVersion:
          type: string
        verified:
          type: boolean
    Version:
      type: object
      properties:
        author:
          type: string
        commitID:
          type: string
        dbUpdateDate:
          type: string
          format: date-time
        description:
          type: string
        descriptionSource:
          type: string
          enum:
          - README
          - DESCRIPTOR
        dirtyBit:
          type: boolean
        doiStatus:
          type: string
          enum:
          - NOT_REQUESTED
          - REQUESTED
          - CREATED
        doiURL:
          type: string
        email:
          type: string
        frozen:
          type: boolean
        hidden:
          type: boolean
        id:
          type: integer
          format: int64
        images:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Image'
        input_file_formats:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/FileFormat'
        name:
          type: string
        output_file_formats:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/FileFormat'
        reference:
          type: string
        referenceType:
          type: string
          enum:
          - COMMIT
          - TAG
          - BRANCH
          - NOT_APPLICABLE
          - UNSET
        sourceFiles:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/SourceFile'
        valid:
          type: boolean
        validations:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Validation'
        verified:
          type: boolean
        verifiedSource:
          type: string
        verifiedSources:
          type: array
          items:
            type: string
        versionEditor:
          $ref: '#/components/schemas/User'
        workingDirectory:
          type: string
    Aliasable:
      type: object
      properties:
        aliases:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Alias'
    BioWorkflow:
      type: object
      properties:
        descriptorType:
          type: string
          enum:
          - CWL
          - WDL
          - gxformat2
          - SWL
          - NFL
          - service
          
          
        aliases:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Alias'
        author:
          type: string
        checker_id:
          type: integer
          format: int64
        conceptDoi:
          type: string
        dbCreateDate:
          type: string
          format: date-time
        dbUpdateDate:
          type: string
          format: date-time
        defaultTestParameterFilePath:
          type: string
        defaultVersion:
          type: string
        description:
          type: string
        email:
          type: string
        full_workflow_path:
          type: string
        gitUrl:
          type: string
        has_checker:
          type: boolean
        id:
          type: integer
          format: int64
        input_file_formats:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/FileFormat'
        is_checker:
          type: boolean
        is_published:
          type: boolean
        labels:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Label'
        lastUpdated:
          type: string
          format: date-time
        last_modified:
          type: integer
          format: int32
        last_modified_date:
          type: string
          format: date-time
        metadataFromEntry:
          $ref: '#/components/schemas/Workflow'
        metadataFromVersion:
          $ref: '#/components/schemas/Version'
        mode:
          type: string
          enum:
          - FULL
          - STUB
          - HOSTED
          - SERVICE
        organization:
          type: string
        output_file_formats:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/FileFormat'
        parent_id:
          type: integer
          format: int64
        path:
          type: string
        repository:
          type: string
        sourceControl:
          type: string
          enum:
          - dockstore.org
          - github.com
          - bitbucket.org
          - gitlab.com
        source_control_provider:
          type: string
        starredUsers:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/User'
        topicId:
          type: integer
          format: int64
        users:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/User'
        workflowName:
          type: string
        workflowVersions:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/WorkflowVersion'
        workflow_path:
          type: string
    Event:
      type: object
      properties:
        collection:
          $ref: '#/components/schemas/Collection'
        dbCreateDate:
          type: string
          format: date-time
        dbUpdateDate:
          type: string
          format: date-time
        id:
          type: integer
          format: int64
        initiatorUser:
          $ref: '#/components/schemas/User'
        organization:
          $ref: '#/components/schemas/Organization'
        tool:
          $ref: '#/components/schemas/Tool'
        type:
          type: string
          enum:
          - CREATE_ORG
          - DELETE_ORG
          - MODIFY_ORG
          - APPROVE_ORG
          - REJECT_ORG
          - REREQUEST_ORG
          - ADD_USER_TO_ORG
          - REMOVE_USER_FROM_ORG
          - MODIFY_USER_ROLE_ORG
          - APPROVE_ORG_INVITE
          - REJECT_ORG_INVITE
          - CREATE_COLLECTION
          - MODIFY_COLLECTION
          - REMOVE_FROM_COLLECTION
          - ADD_TO_COLLECTION
          - ADD_VERSION_TO_ENTRY
        user:
          $ref: '#/components/schemas/User'
        version:
          $ref: '#/components/schemas/Version'
        workflow:
          $ref: '#/components/schemas/Workflow'
    Organization:
      type: object
      properties:
        aliases:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Alias'
        avatarUrl:
          pattern: ([^\s]+)(?i)(\.jpg|\.jpeg|\.png|\.gif)
          type: string
        dbCreateDate:
          type: string
          format: date-time
        dbUpdateDate:
          type: string
          format: date-time
        description:
          type: string
        displayName:
          maxLength: 50
          minLength: 3
          pattern: '[\w ,_\-&()'']*'
          type: string
        email:
          type: string
        id:
          type: integer
          format: int64
        link:
          type: string
        location:
          type: string
        name:
          maxLength: 39
          minLength: 3
          pattern: '[a-zA-Z][a-zA-Z\d]*'
          type: string
        starredUsers:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/User'
        status:
          type: string
          enum:
          - PENDING
          - REJECTED
          - APPROVED
        topic:
          type: string
        users:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/OrganizationUser'
    OrganizationUser:
      type: object
      properties:
        accepted:
          type: boolean
        dbCreateDate:
          type: string
          format: date-time
        dbUpdateDate:
          type: string
          format: date-time
        id:
          $ref: '#/components/schemas/OrganizationUserId'
        organization:
          $ref: '#/components/schemas/Organization'
        role:
          type: string
          enum:
          - MAINTAINER
          - MEMBER
        user:
          $ref: '#/components/schemas/User'
    OrganizationUserId:
      type: object
      properties:
        organizationId:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
    Service:
      type: object
      allOf:
      - $ref: '#/components/schemas/Workflow'
    Tag:
      type: object
      properties:
        author:
          type: string
        automated:
          type: boolean
        commitID:
          type: string
        cwl_path:
          type: string
        dbUpdateDate:
          type: string
          format: date-time
        description:
          type: string
        descriptionSource:
          type: string
          enum:
          - README
          - DESCRIPTOR
        dirtyBit:
          type: boolean
        dockerfile_path:
          type: string
        doiStatus:
          type: string
          enum:
          - NOT_REQUESTED
          - REQUESTED
          - CREATED
        doiURL:
          type: string
        email:
          type: string
        frozen:
          type: boolean
        hidden:
          type: boolean
        id:
          type: integer
          format: int64
        image_id:
          type: string
        images:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Image'
        input_file_formats:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/FileFormat'
        last_built:
          type: string
          format: date-time
        name:
          type: string
        output_file_formats:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/FileFormat'
        reference:
          type: string
        referenceType:
          type: string
          enum:
          - COMMIT
          - TAG
          - BRANCH
          - NOT_APPLICABLE
          - UNSET
        size:
          type: integer
          format: int64
        sourceFiles:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/SourceFile'
        valid:
          type: boolean
        validations:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Validation'
        verified:
          type: boolean
        verifiedSource:
          type: string
        verifiedSources:
          type: array
          items:
            type: string
        versionEditor:
          $ref: '#/components/schemas/User'
        wdl_path:
          type: string
        workingDirectory:
          type: string
    Tool:
      required:
      - id
      - organization
      - toolclass
      - url
      - versions
      type: object
      properties:
        aliases:
          type: array
          description: Support for this parameter is optional for tool registries
            that support aliases. A list of strings that can be used to identify this
            tool which could be  straight up URLs.  This can be used to expose alternative
            ids (such as GUIDs) for a tool for registries. Can be used to match tools
            across registries.
          items:
            type: string
            description: Support for this parameter is optional for tool registries
              that support aliases. A list of strings that can be used to identify
              this tool which could be  straight up URLs.  This can be used to expose
              alternative ids (such as GUIDs) for a tool for registries. Can be used
              to match tools across registries.
        checker_url:
          type: string
          description: Optional url to the checker tool that will exit successfully
            if this tool produced the expected result given test data.
        description:
          type: string
          description: The description of the tool.
        has_checker:
          type: boolean
          description: Whether this tool has a checker tool associated with it.
        id:
          type: string
          description: A unique identifier of the tool, scoped to this registry.
          example: "123456"
        meta_version:
          type: string
          description: The version of this tool in the registry. Iterates when fields
            like the description, author, etc. are updated.
        name:
          type: string
          description: The name of the tool.
        organization:
          type: string
          description: The organization that published the image.
        toolclass:
          $ref: '#/components/schemas/ToolClass'
        url:
          type: string
          description: The URL for this tool in this registry.
          example: http://agora.broadinstitute.org/tools/123456
        versions:
          type: array
          description: A list of versions for this tool.
          items:
            $ref: '#/components/schemas/ToolVersion'
      description: A tool (or described tool) is defined as a tuple of a descriptor
        file (which potentially consists of multiple files), a set of container images,
        and a set of instructions for creating those images.
    Workflow:
      required:
      - type
      type: object
      properties:
        descriptorType:
          type: string
          enum:
          - CWL
          - WDL
          - gxformat2
          - SWL
          - NFL
          - service
          
          
        aliases:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Alias'
        author:
          type: string
        checker_id:
          type: integer
          format: int64
        conceptDoi:
          type: string
        dbCreateDate:
          type: string
          format: date-time
        dbUpdateDate:
          type: string
          format: date-time
        defaultTestParameterFilePath:
          type: string
        defaultVersion:
          type: string
        description:
          type: string
        email:
          type: string
        full_workflow_path:
          type: string
        gitUrl:
          type: string
        has_checker:
          type: boolean
        id:
          type: integer
          format: int64
        input_file_formats:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/FileFormat'
        isChecker:
          type: boolean
        is_published:
          type: boolean
        labels:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Label'
        lastUpdated:
          type: string
          format: date-time
        last_modified:
          type: integer
          format: int32
        last_modified_date:
          type: string
          format: date-time
        metadataFromEntry:
          $ref: '#/components/schemas/Workflow'
        metadataFromVersion:
          $ref: '#/components/schemas/Version'
        mode:
          type: string
          enum:
          - FULL
          - STUB
          - HOSTED
          - SERVICE
        organization:
          type: string
        output_file_formats:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/FileFormat'
        parentEntry:
          $ref: '#/components/schemas/Entry'
        path:
          type: string
        repository:
          type: string
        sourceControl:
          type: string
          enum:
          - dockstore.org
          - github.com
          - bitbucket.org
          - gitlab.com
        source_control_provider:
          type: string
        starredUsers:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/User'
        topicId:
          type: integer
          format: int64
        users:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/User'
        workflowName:
          type: string
        workflowVersions:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/WorkflowVersion'
        workflow_path:
          type: string
        type:
          type: string
      discriminator:
        propertyName: type
    WorkflowVersion:
      type: object
      properties:
        aliases:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Alias'
        author:
          type: string
        commitID:
          type: string
        dbUpdateDate:
          type: string
          format: date-time
        description:
          type: string
        descriptionSource:
          type: string
          enum:
          - README
          - DESCRIPTOR
        dirtyBit:
          type: boolean
        doiStatus:
          type: string
          enum:
          - NOT_REQUESTED
          - REQUESTED
          - CREATED
        doiURL:
          type: string
        email:
          type: string
        frozen:
          type: boolean
        hidden:
          type: boolean
        id:
          type: integer
          format: int64
        images:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Image'
        input_file_formats:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/FileFormat'
        last_modified:
          type: string
          format: date-time
        name:
          type: string
        output_file_formats:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/FileFormat'
        reference:
          type: string
        referenceType:
          type: string
          enum:
          - COMMIT
          - TAG
          - BRANCH
          - NOT_APPLICABLE
          - UNSET
        sourceFiles:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/SourceFile'
        subClass:
          type: string
          enum:
          - DOCKER_COMPOSE
          - SWARM
          - KUBERNETES
          - HELM
        valid:
          type: boolean
        validations:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Validation'
        verified:
          type: boolean
        verifiedSource:
          type: string
        verifiedSources:
          type: array
          items:
            type: string
        versionEditor:
          $ref: '#/components/schemas/User'
        workflow_path:
          type: string
        workingDirectory:
          type: string
    RegistryBean:
      type: object
      properties:
        customDockerPath:
          type: string
        dockerPath:
          type: string
        enum:
          type: string
        friendlyName:
          type: string
        privateOnly:
          type: string
        url:
          type: string
    SourceControlBean:
      type: object
      properties:
        friendlyName:
          type: string
        value:
          type: string
    DescriptorLanguageBean:
      type: object
      properties:
        friendlyName:
          type: string
        value:
          type: string
    Config:
      type: object
      properties:
        bitBucketAuthUrl:
          type: string
        bitBucketClientId:
          type: string
        cwlVisualizerUri:
          type: string
        discourseUrl:
          type: string
        dnaNexusImportUrl:
          type: string
        dnaStackImportUrl:
          type: string
        documentationUrl:
          type: string
        featuredContentUrl:
          type: string
        gitHubAppInstallationUrl:
          type: string
        gitHubAuthUrl:
          type: string
        gitHubRedirectPath:
          type: string
        gitHubScope:
          type: string
        githubClientId:
          type: string
        gitlabAuthUrl:
          type: string
        gitlabClientId:
          type: string
        gitlabRedirectPath:
          type: string
        gitlabScope:
          type: string
        googleClientId:
          type: string
        googleScope:
          type: string
        quayIoAuthUrl:
          type: string
        quayIoClientId:
          type: string
        quayIoRedirectPath:
          type: string
        quayIoScope:
          type: string
        tagManagerId:
          type: string
        terraImportUrl:
          type: string
        zenodoAuthUrl:
          type: string
        zenodoClientId:
          type: string
        zenodoRedirectPath:
          type: string
        zenodoScope:
          type: string
    StarRequest:
      type: object
      properties:
        star:
          type: boolean
    ToolTesterLog:
      type: object
      properties:
        filename:
          type: string
        logType:
          type: string
          enum:
          - FULL
          - SUMMARY
        runner:
          type: string
        testFilename:
          type: string
        toolId:
          type: string
        toolVersionName:
          type: string
    OrganizationUpdateTime:
      type: object
      properties:
        displayName:
          type: string
        lastUpdateDate:
          type: string
          format: date-time
        name:
          type: string
    EntryUpdateTime:
      type: object
      properties:
        entryType:
          type: string
          enum:
          - TOOL
          - WORKFLOW
          - SERVICE
        lastUpdateDate:
          type: string
          format: date-time
        path:
          type: string
        prettyPath:
          type: string
    Repository:
      type: object
      properties:
        canDelete:
          type: boolean
        gitRegistry:
          type: string
          enum:
          - dockstore.org
          - github.com
          - bitbucket.org
          - gitlab.com
        organization:
          type: string
        path:
          type: string
        present:
          type: boolean
        repositoryName:
          type: string
    ToolClass:
      type: object
      properties:
        description:
          type: string
          description: A longer explanation of what this class is and what it can
            accomplish.
        id:
          type: string
          description: The unique identifier for the class.
        name:
          type: string
          description: A short friendly name for the class.
      description: Describes a class (type) of tool allowing us to categorize workflows,
        tasks, and maybe even other entities (such as services) separately.
    ImageData:
      type: object
      properties:
        checksum:
          type: array
          description: A production (immutable) tool version is required to have a
            hashcode. Not required otherwise, but might be useful to detect changes.  This
            exposes the hashcode for specific image versions to verify that the container
            version pulled is actually the version that was indexed by the registry.
          example: '[{checksum=77af4d6b9913e693e8d0b4b294fa62ade6054e6b2f1ffb617ac955dd63fb0182,
            type=sha256}]'
          items:
            $ref: '#/components/schemas/Checksum'
        image_name:
          type: string
          description: Used in conjunction with a registry_url if provided to locate
            images.
        image_type:
          type: string
          enum:
          - Docker
          - Singularity
          - Conda
        registry_host:
          type: string
          description: A docker registry or a URL to a Singularity registry. Used
            along with image_name to locate a specific image.
        size:
          type: integer
          description: Size of the container in bytes.
          format: int32
        updated:
          type: string
          description: Last time the container was updated.
      description: Describes one container image.
    ToolVersion:
      required:
      - id
      - url
      type: object
      properties:
        author:
          type: array
          description: Contact information for the author of this version of the tool
            in the registry. (More complex authorship information is handled by the
            descriptor).
          items:
            type: string
            description: Contact information for the author of this version of the
              tool in the registry. (More complex authorship information is handled
              by the descriptor).
        containerfile:
          type: boolean
          description: Reports if this tool has a containerfile available. (For Docker-based
            tools, this would indicate the presence of a Dockerfile)
        descriptor_type:
          type: array
          description: The type (or types) of descriptors available.
          items:
            type: string
            description: The type (or types) of descriptors available.
            enum:
            - CWL
            - WDL
            - NFL
        id:
          type: string
          description: An identifier of the version of this tool for this particular
            tool registry.
          example: v1
        images:
          type: array
          description: All known docker images (and versions/hashes) used by this
            tool. If the tool has to evaluate any of the docker images strings at
            runtime, those ones cannot be reported here.
          items:
            $ref: '#/components/schemas/ImageData'
        included_apps:
          type: array
          description: An array of IDs for the applications that are stored inside
            this tool.
          example: '[https://bio.tools/tool/mytum.de/SNAP2/1, https://bio.tools/bioexcel_seqqc]'
          items:
            type: string
            description: An array of IDs for the applications that are stored inside
              this tool.
            example: '[https://bio.tools/tool/mytum.de/SNAP2/1, https://bio.tools/bioexcel_seqqc]'
        is_production:
          type: boolean
          description: This version of a tool is guaranteed to not change over time
            (for example, a  tool built from a tag in git as opposed to a branch).
            A production quality tool  is required to have a checksum
        meta_version:
          type: string
          description: The version of this tool version in the registry. Iterates
            when fields like the description, author, etc. are updated.
        name:
          type: string
          description: The name of the version.
        signed:
          type: boolean
          description: Reports whether this version of the tool has been signed.
        url:
          type: string
          description: The URL for this tool version in this registry.
          example: http://agora.broadinstitute.org/tools/123456/versions/1
        verified:
          type: boolean
          description: Reports whether this tool has been verified by a specific organization
            or individual.
        verified_source:
          type: array
          description: Source of metadata that can support a verified tool, such as
            an email or URL.
          items:
            type: string
            description: Source of metadata that can support a verified tool, such
              as an email or URL.
      description: A tool version describes a particular iteration of a tool as described
        by a reference to a specific image and/or documents.
    Error:
      required:
      - code
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    FileWrapper:
      type: object
      properties:
        checksum:
          type: array
          description: 'A production (immutable) tool version is required to have
            a hashcode. Not required otherwise, but might be useful to detect changes. '
          example: '[{checksum=ea2a5db69bd20a42976838790bc29294df3af02b, type=sha1}]'
          items:
            $ref: '#/components/schemas/Checksum'
        content:
          type: string
          description: The content of the file itself. One of url or content is required.
        url:
          type: string
          description: Optional url to the underlying content, should include version
            information, and can include a git hash.  Note that this URL should resolve
            to the raw unwrapped content that would otherwise be available in content.
            One of url or content is required.
      description: 'A file provides content for one of - A tool descriptor is a metadata
        document that describes one or more tools. - A tool document that describes
        how to test with one or more sample test JSON. - A containerfile is a document
        that describes how to build a particular container image. Examples include
        Dockerfiles for creating Docker images and Singularity recipes for Singularity
        images '
    ToolFile:
      type: object
      properties:
        file_type:
          type: string
          enum:
          - TEST_FILE
          - PRIMARY_DESCRIPTOR
          - SECONDARY_DESCRIPTOR
          - CONTAINERFILE
          - OTHER
        path:
          type: string
          description: Relative path of the file.  A descriptor's path can be used
            with the GA4GH .../{type}/descriptor/{relative_path} endpoint.
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
